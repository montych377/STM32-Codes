
F446RE_NEW_I2C_SLAVE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004614  08004614  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08004628  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08004628  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a04  00000000  00000000  0002c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002db00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021080  00000000  00000000  0002ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d505  00000000  00000000  0004feb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a0e  00000000  00000000  0005d3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126dc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  00126e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080045dc 	.word	0x080045dc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080045dc 	.word	0x080045dc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 faa6 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f82a 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8ec 	bl	8000700 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000528:	f000 f892 	bl	8000650 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f8be 	bl	80006ac <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_I2C_Slave_Receive(&hi2c1, rdata, 30, HAL_MAX_DELAY);
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	221e      	movs	r2, #30
 8000536:	490c      	ldr	r1, [pc, #48]	; (8000568 <main+0x50>)
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0x54>)
 800053a:	f000 ff7b 	bl	8001434 <HAL_I2C_Slave_Receive>

	  HAL_UART_Transmit(&huart2, rdata, strlen((char *)rdata),HAL_MAX_DELAY);
 800053e:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x50>)
 8000540:	f7ff fe60 	bl	8000204 <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	4906      	ldr	r1, [pc, #24]	; (8000568 <main+0x50>)
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x58>)
 8000550:	f003 fca3 	bl	8003e9a <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000554:	2120      	movs	r1, #32
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <main+0x5c>)
 8000558:	f000 fe0d 	bl	8001176 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f000 faf6 	bl	8000b50 <HAL_Delay>
	  HAL_I2C_Slave_Receive(&hi2c1, rdata, 30, HAL_MAX_DELAY);
 8000564:	e7e4      	b.n	8000530 <main+0x18>
 8000566:	bf00      	nop
 8000568:	200000c0 	.word	0x200000c0
 800056c:	20000028 	.word	0x20000028
 8000570:	2000007c 	.word	0x2000007c
 8000574:	40020000 	.word	0x40020000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 f820 	bl	80045cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd4>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4618      	mov	r0, r3
 8000606:	f003 f95d 	bl	80038c4 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000610:	f000 f8e4 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fdfd 	bl	8003230 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800063c:	f000 f8ce 	bl	80007dc <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2224      	movs	r2, #36	; 0x24
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f000 fd8d 	bl	80011ac <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f8a0 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40005400 	.word	0x40005400
 80006a8:	000186a0 	.word	0x000186a0

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f003 fb8c 	bl	8003e00 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f875 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xd4>)
 800078c:	f000 fcda 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000796:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_GPIO_Init+0xd8>)
 80007a8:	f000 fb38 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ac:	2320      	movs	r3, #32
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xd4>)
 80007c4:	f000 fb2a 	bl	8000e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020800 	.word	0x40020800

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000826:	2007      	movs	r0, #7
 8000828:	f000 fa86 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <HAL_I2C_MspInit+0xa4>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d13c      	bne.n	80008d4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <HAL_I2C_MspInit+0xa8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <HAL_I2C_MspInit+0xa8>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <HAL_I2C_MspInit+0xa8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000876:	f44f 7340 	mov.w	r3, #768	; 0x300
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087c:	2312      	movs	r3, #18
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000888:	2304      	movs	r3, #4
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <HAL_I2C_MspInit+0xac>)
 8000894:	f000 fac2 	bl	8000e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_I2C_MspInit+0xa8>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_I2C_MspInit+0xa8>)
 80008a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_I2C_MspInit+0xa8>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	201f      	movs	r0, #31
 80008ba:	f000 fa48 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008be:	201f      	movs	r0, #31
 80008c0:	f000 fa61 	bl	8000d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2020      	movs	r0, #32
 80008ca:	f000 fa40 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008ce:	2020      	movs	r0, #32
 80008d0:	f000 fa59 	bl	8000d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12b      	bne.n	8000962 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0x8c>)
 800095e:	f000 fa5d 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f8a4 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <I2C1_EV_IRQHandler+0x10>)
 80009d2:	f000 fe39 	bl	8001648 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000028 	.word	0x20000028

080009e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <I2C1_ER_IRQHandler+0x10>)
 80009e6:	f000 ffa0 	bl	800192a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000028 	.word	0x20000028

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fd9d 	bl	8004584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fd65 	bl	8000518 <main>
  bx  lr    
 8000a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a5c:	0800461c 	.word	0x0800461c
  ldr r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a64:	200000e4 	.word	0x200000e4

08000a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_Init+0x40>)
 8000a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_Init+0x40>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x40>)
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f94f 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fea2 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023c00 	.word	0x40023c00

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f967 	bl	8000da2 <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f92f 	bl	8000d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008
 8000b34:	200000e0 	.word	0x200000e0

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	200000e0 	.word	0x200000e0

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0b      	blt.n	8000c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <__NVIC_EnableIRQ+0x38>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff29 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d60:	f7ff ff3e 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff8e 	bl	8000c8c <NVIC_EncodePriority>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5d 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff31 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffa2 	bl	8000cf4 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d004      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e00c      	b.n	8000df2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2205      	movs	r2, #5
 8000ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e0c:	b2db      	uxtb	r3, r3
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e165      	b.n	8001104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8154 	bne.w	80010fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d005      	beq.n	8000e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d130      	bne.n	8000ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d017      	beq.n	8000f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	69b9      	ldr	r1, [r7, #24]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80ae 	beq.w	80010fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HAL_GPIO_Init+0x300>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a5c      	ldr	r2, [pc, #368]	; (800111c <HAL_GPIO_Init+0x300>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	; (800111c <HAL_GPIO_Init+0x300>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fbe:	4a58      	ldr	r2, [pc, #352]	; (8001120 <HAL_GPIO_Init+0x304>)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <HAL_GPIO_Init+0x308>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x21a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x216>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	; (800112c <HAL_GPIO_Init+0x310>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x212>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <HAL_GPIO_Init+0x314>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x20e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4b      	ldr	r2, [pc, #300]	; (8001134 <HAL_GPIO_Init+0x318>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x20a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4a      	ldr	r2, [pc, #296]	; (8001138 <HAL_GPIO_Init+0x31c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x206>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a49      	ldr	r2, [pc, #292]	; (800113c <HAL_GPIO_Init+0x320>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x202>
 800101a:	2306      	movs	r3, #6
 800101c:	e00c      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800101e:	2307      	movs	r3, #7
 8001020:	e00a      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001022:	2305      	movs	r3, #5
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001026:	2304      	movs	r3, #4
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001036:	2300      	movs	r3, #0
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	; (8001120 <HAL_GPIO_Init+0x304>)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_GPIO_Init+0x324>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a31      	ldr	r2, [pc, #196]	; (8001140 <HAL_GPIO_Init+0x324>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x324>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a26      	ldr	r2, [pc, #152]	; (8001140 <HAL_GPIO_Init+0x324>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_GPIO_Init+0x324>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_GPIO_Init+0x324>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_GPIO_Init+0x324>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f8:	4a11      	ldr	r2, [pc, #68]	; (8001140 <HAL_GPIO_Init+0x324>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	f67f ae96 	bls.w	8000e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40021400 	.word	0x40021400
 800113c:	40021800 	.word	0x40021800
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	041a      	lsls	r2, r3, #16
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43d9      	mvns	r1, r3
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	400b      	ands	r3, r1
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e12b      	b.n	8001416 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d106      	bne.n	80011d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fb30 	bl	8000838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2224      	movs	r2, #36	; 0x24
 80011dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800120e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001210:	f002 f900 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8001214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a81      	ldr	r2, [pc, #516]	; (8001420 <HAL_I2C_Init+0x274>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d807      	bhi.n	8001230 <HAL_I2C_Init+0x84>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a80      	ldr	r2, [pc, #512]	; (8001424 <HAL_I2C_Init+0x278>)
 8001224:	4293      	cmp	r3, r2
 8001226:	bf94      	ite	ls
 8001228:	2301      	movls	r3, #1
 800122a:	2300      	movhi	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	e006      	b.n	800123e <HAL_I2C_Init+0x92>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a7d      	ldr	r2, [pc, #500]	; (8001428 <HAL_I2C_Init+0x27c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	bf94      	ite	ls
 8001238:	2301      	movls	r3, #1
 800123a:	2300      	movhi	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0e7      	b.n	8001416 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4a78      	ldr	r2, [pc, #480]	; (800142c <HAL_I2C_Init+0x280>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9b      	lsrs	r3, r3, #18
 8001250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a6a      	ldr	r2, [pc, #424]	; (8001420 <HAL_I2C_Init+0x274>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d802      	bhi.n	8001280 <HAL_I2C_Init+0xd4>
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3301      	adds	r3, #1
 800127e:	e009      	b.n	8001294 <HAL_I2C_Init+0xe8>
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	4a69      	ldr	r2, [pc, #420]	; (8001430 <HAL_I2C_Init+0x284>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	099b      	lsrs	r3, r3, #6
 8001292:	3301      	adds	r3, #1
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	430b      	orrs	r3, r1
 800129a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	495c      	ldr	r1, [pc, #368]	; (8001420 <HAL_I2C_Init+0x274>)
 80012b0:	428b      	cmp	r3, r1
 80012b2:	d819      	bhi.n	80012e8 <HAL_I2C_Init+0x13c>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1e59      	subs	r1, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c2:	1c59      	adds	r1, r3, #1
 80012c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012c8:	400b      	ands	r3, r1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <HAL_I2C_Init+0x138>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1e59      	subs	r1, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e2:	e051      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e04f      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d111      	bne.n	8001314 <HAL_I2C_Init+0x168>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e58      	subs	r0, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001302:	3301      	adds	r3, #1
 8001304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	e012      	b.n	800133a <HAL_I2C_Init+0x18e>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1e58      	subs	r0, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	0099      	lsls	r1, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	fbb0 f3f3 	udiv	r3, r0, r3
 800132a:	3301      	adds	r3, #1
 800132c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Init+0x196>
 800133e:	2301      	movs	r3, #1
 8001340:	e022      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10e      	bne.n	8001368 <HAL_I2C_Init+0x1bc>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1e58      	subs	r0, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6859      	ldr	r1, [r3, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	440b      	add	r3, r1
 8001358:	fbb0 f3f3 	udiv	r3, r0, r3
 800135c:	3301      	adds	r3, #1
 800135e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001366:	e00f      	b.n	8001388 <HAL_I2C_Init+0x1dc>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1e58      	subs	r0, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	0099      	lsls	r1, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	fbb0 f3f3 	udiv	r3, r0, r3
 800137e:	3301      	adds	r3, #1
 8001380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	6809      	ldr	r1, [r1, #0]
 800138c:	4313      	orrs	r3, r2
 800138e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6911      	ldr	r1, [r2, #16]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68d2      	ldr	r2, [r2, #12]
 80013c2:	4311      	orrs	r1, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2220      	movs	r2, #32
 8001402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	000186a0 	.word	0x000186a0
 8001424:	001e847f 	.word	0x001e847f
 8001428:	003d08ff 	.word	0x003d08ff
 800142c:	431bde83 	.word	0x431bde83
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff fb78 	bl	8000b38 <HAL_GetTick>
 8001448:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b20      	cmp	r3, #32
 8001454:	f040 80ee 	bne.w	8001634 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <HAL_I2C_Slave_Receive+0x30>
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0e6      	b.n	8001636 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_I2C_Slave_Receive+0x42>
 8001472:	2302      	movs	r3, #2
 8001474:	e0df      	b.n	8001636 <HAL_I2C_Slave_Receive+0x202>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d007      	beq.n	800149c <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014aa:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2222      	movs	r2, #34	; 0x22
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a59      	ldr	r2, [pc, #356]	; (8001640 <HAL_I2C_Slave_Receive+0x20c>)
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014ec:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4953      	ldr	r1, [pc, #332]	; (8001644 <HAL_I2C_Slave_Receive+0x210>)
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f001 fd33 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e096      	b.n	8001636 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 800151e:	e04e      	b.n	80015be <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	6839      	ldr	r1, [r7, #0]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f001 fde3 	bl	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d009      	beq.n	8001544 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800153e:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e078      	b.n	8001636 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b04      	cmp	r3, #4
 8001582:	d11c      	bne.n	80015be <HAL_I2C_Slave_Receive+0x18a>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	2b00      	cmp	r3, #0
 800158a:	d018      	beq.n	80015be <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ac      	bne.n	8001520 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f001 fd21 	bl	8003012 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e4:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e025      	b.n	8001636 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001634:	2302      	movs	r3, #2
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	ffff0000 	.word	0xffff0000
 8001644:	00010002 	.word	0x00010002

08001648 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001668:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001670:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b10      	cmp	r3, #16
 8001676:	d003      	beq.n	8001680 <HAL_I2C_EV_IRQHandler+0x38>
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b40      	cmp	r3, #64	; 0x40
 800167c:	f040 80c1 	bne.w	8001802 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80016a0:	d003      	beq.n	80016aa <HAL_I2C_EV_IRQHandler+0x62>
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80016a8:	d101      	bne.n	80016ae <HAL_I2C_EV_IRQHandler+0x66>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_I2C_EV_IRQHandler+0x68>
 80016ae:	2300      	movs	r3, #0
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	f000 8132 	beq.w	800191a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <HAL_I2C_EV_IRQHandler+0x92>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	0a5b      	lsrs	r3, r3, #9
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f001 fd94 	bl	80031fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fd83 	bl	80021de <I2C_Master_SB>
 80016d8:	e092      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_I2C_EV_IRQHandler+0xb2>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	0a5b      	lsrs	r3, r3, #9
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fdf9 	bl	80022ea <I2C_Master_ADD10>
 80016f8:	e082      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_I2C_EV_IRQHandler+0xd2>
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	0a5b      	lsrs	r3, r3, #9
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fe13 	bl	800233e <I2C_Master_ADDR>
 8001718:	e072      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03b      	beq.n	800179e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001734:	f000 80f3 	beq.w	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	09db      	lsrs	r3, r3, #7
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00f      	beq.n	8001764 <HAL_I2C_EV_IRQHandler+0x11c>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	0a9b      	lsrs	r3, r3, #10
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <HAL_I2C_EV_IRQHandler+0x11c>
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f9f3 	bl	8001b48 <I2C_MasterTransmit_TXE>
 8001762:	e04d      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80d6 	beq.w	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	0a5b      	lsrs	r3, r3, #9
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80cf 	beq.w	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	2b21      	cmp	r3, #33	; 0x21
 8001784:	d103      	bne.n	800178e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fa7a 	bl	8001c80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800178c:	e0c7      	b.n	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b40      	cmp	r3, #64	; 0x40
 8001792:	f040 80c4 	bne.w	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fae8 	bl	8001d6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800179c:	e0bf      	b.n	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ac:	f000 80b7 	beq.w	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00f      	beq.n	80017dc <HAL_I2C_EV_IRQHandler+0x194>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	0a9b      	lsrs	r3, r3, #10
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <HAL_I2C_EV_IRQHandler+0x194>
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fb5d 	bl	8001e94 <I2C_MasterReceive_RXNE>
 80017da:	e011      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 809a 	beq.w	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	0a5b      	lsrs	r3, r3, #9
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8093 	beq.w	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fc06 	bl	800200a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017fe:	e08e      	b.n	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001800:	e08d      	b.n	800191e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	e007      	b.n	8001824 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d012      	beq.n	8001856 <HAL_I2C_EV_IRQHandler+0x20e>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	0a5b      	lsrs	r3, r3, #9
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00c      	beq.n	8001856 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800184c:	69b9      	ldr	r1, [r7, #24]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 ffc4 	bl	80027dc <I2C_Slave_ADDR>
 8001854:	e066      	b.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_I2C_EV_IRQHandler+0x22e>
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	0a5b      	lsrs	r3, r3, #9
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fffe 	bl	8002870 <I2C_Slave_STOPF>
 8001874:	e056      	b.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	2b21      	cmp	r3, #33	; 0x21
 800187a:	d002      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x23a>
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	2b29      	cmp	r3, #41	; 0x29
 8001880:	d125      	bne.n	80018ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	09db      	lsrs	r3, r3, #7
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <HAL_I2C_EV_IRQHandler+0x266>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	0a9b      	lsrs	r3, r3, #10
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_I2C_EV_IRQHandler+0x266>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 feda 	bl	8002660 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018ac:	e039      	b.n	8001922 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d033      	beq.n	8001922 <HAL_I2C_EV_IRQHandler+0x2da>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	0a5b      	lsrs	r3, r3, #9
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d02d      	beq.n	8001922 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 ff07 	bl	80026da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018cc:	e029      	b.n	8001922 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00f      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	0a9b      	lsrs	r3, r3, #10
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 ff12 	bl	800271c <I2C_SlaveReceive_RXNE>
 80018f8:	e014      	b.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00e      	beq.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	0a5b      	lsrs	r3, r3, #9
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 ff40 	bl	8002798 <I2C_SlaveReceive_BTF>
 8001918:	e004      	b.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800191a:	bf00      	nop
 800191c:	e002      	b.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001922:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b08a      	sub	sp, #40	; 0x28
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800194c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00e      	beq.n	8001978 <HAL_I2C_ER_IRQHandler+0x4e>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001976:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	0a5b      	lsrs	r3, r3, #9
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00e      	beq.n	80019a2 <HAL_I2C_ER_IRQHandler+0x78>
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80019a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	0a9b      	lsrs	r3, r3, #10
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03f      	beq.n	8001a2e <HAL_I2C_ER_IRQHandler+0x104>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d039      	beq.n	8001a2e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80019ba:	7efb      	ldrb	r3, [r7, #27]
 80019bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80019d4:	7ebb      	ldrb	r3, [r7, #26]
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d112      	bne.n	8001a00 <HAL_I2C_ER_IRQHandler+0xd6>
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <HAL_I2C_ER_IRQHandler+0xd6>
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	2b21      	cmp	r3, #33	; 0x21
 80019e4:	d008      	beq.n	80019f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80019e6:	7cfb      	ldrb	r3, [r7, #19]
 80019e8:	2b29      	cmp	r3, #41	; 0x29
 80019ea:	d005      	beq.n	80019f8 <HAL_I2C_ER_IRQHandler+0xce>
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	2b28      	cmp	r3, #40	; 0x28
 80019f0:	d106      	bne.n	8001a00 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b21      	cmp	r3, #33	; 0x21
 80019f6:	d103      	bne.n	8001a00 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f001 f869 	bl	8002ad0 <I2C_Slave_AF>
 80019fe:	e016      	b.n	8001a2e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a08:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a12:	7efb      	ldrb	r3, [r7, #27]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d002      	beq.n	8001a1e <HAL_I2C_ER_IRQHandler+0xf4>
 8001a18:	7efb      	ldrb	r3, [r7, #27]
 8001a1a:	2b40      	cmp	r3, #64	; 0x40
 8001a1c:	d107      	bne.n	8001a2e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	0adb      	lsrs	r3, r3, #11
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00e      	beq.n	8001a58 <HAL_I2C_ER_IRQHandler+0x12e>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001a56:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f001 f8a0 	bl	8002bb0 <I2C_ITError>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d150      	bne.n	8001c10 <I2C_MasterTransmit_TXE+0xc8>
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b21      	cmp	r3, #33	; 0x21
 8001b72:	d14d      	bne.n	8001c10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d01d      	beq.n	8001bb6 <I2C_MasterTransmit_TXE+0x6e>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d01a      	beq.n	8001bb6 <I2C_MasterTransmit_TXE+0x6e>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b86:	d016      	beq.n	8001bb6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2211      	movs	r2, #17
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff62 	bl	8001a78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bb4:	e060      	b.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bc4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d107      	bne.n	8001c00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff7d 	bl	8001af8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bfe:	e03b      	b.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff35 	bl	8001a78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c0e:	e033      	b.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b21      	cmp	r3, #33	; 0x21
 8001c14:	d005      	beq.n	8001c22 <I2C_MasterTransmit_TXE+0xda>
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d12d      	bne.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b22      	cmp	r3, #34	; 0x22
 8001c20:	d12a      	bne.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c3c:	e01c      	b.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b40      	cmp	r3, #64	; 0x40
 8001c48:	d103      	bne.n	8001c52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f88e 	bl	8001d6c <I2C_MemoryTransmit_TXE_BTF>
}
 8001c50:	e012      	b.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c76:	e7ff      	b.n	8001c78 <I2C_MasterTransmit_TXE+0x130>
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b21      	cmp	r3, #33	; 0x21
 8001c98:	d164      	bne.n	8001d64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d012      	beq.n	8001cca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001cc8:	e04c      	b.n	8001d64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d01d      	beq.n	8001d0c <I2C_MasterTransmit_BTF+0x8c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d01a      	beq.n	8001d0c <I2C_MasterTransmit_BTF+0x8c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cdc:	d016      	beq.n	8001d0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2211      	movs	r2, #17
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff feb7 	bl	8001a78 <HAL_I2C_MasterTxCpltCallback>
}
 8001d0a:	e02b      	b.n	8001d64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b40      	cmp	r3, #64	; 0x40
 8001d44:	d107      	bne.n	8001d56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fed2 	bl	8001af8 <HAL_I2C_MemTxCpltCallback>
}
 8001d54:	e006      	b.n	8001d64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fe8a 	bl	8001a78 <HAL_I2C_MasterTxCpltCallback>
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d11d      	bne.n	8001dc0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10b      	bne.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001da2:	e073      	b.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	121b      	asrs	r3, r3, #8
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dbe:	e065      	b.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10b      	bne.n	8001de0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dde:	e055      	b.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d151      	bne.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b22      	cmp	r3, #34	; 0x22
 8001dec:	d10d      	bne.n	8001e0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e08:	e040      	b.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d015      	beq.n	8001e40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b21      	cmp	r3, #33	; 0x21
 8001e18:	d112      	bne.n	8001e40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e3e:	e025      	b.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d120      	bne.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b21      	cmp	r3, #33	; 0x21
 8001e4e:	d11d      	bne.n	8001e8c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fe36 	bl	8001af8 <HAL_I2C_MemTxCpltCallback>
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b22      	cmp	r3, #34	; 0x22
 8001ea6:	f040 80ac 	bne.w	8002002 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d921      	bls.n	8001efc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	f040 808c 	bne.w	8002002 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001efa:	e082      	b.n	8002002 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d075      	beq.n	8001ff0 <I2C_MasterReceive_RXNE+0x15c>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d002      	beq.n	8001f10 <I2C_MasterReceive_RXNE+0x7c>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d16f      	bne.n	8001ff0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 f8bb 	bl	800308c <I2C_WaitOnSTOPRequestThroughIT>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d142      	bne.n	8001fa2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d10a      	bne.n	8001f8c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fdc1 	bl	8001b0c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f8a:	e03a      	b.n	8002002 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2212      	movs	r2, #18
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fd76 	bl	8001a8c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fa0:	e02f      	b.n	8002002 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fd99 	bl	8001b20 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fee:	e008      	b.n	8002002 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffe:	605a      	str	r2, [r3, #4]
}
 8002000:	e7ff      	b.n	8002002 <I2C_MasterReceive_RXNE+0x16e>
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b04      	cmp	r3, #4
 8002020:	d11b      	bne.n	800205a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002030:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002058:	e0bd      	b.n	80021d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d129      	bne.n	80020b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002072:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d00a      	beq.n	8002090 <I2C_MasterReceive_BTF+0x86>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d007      	beq.n	8002090 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800208e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020b6:	e08e      	b.n	80021d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d176      	bne.n	80021b0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d002      	beq.n	80020ce <I2C_MasterReceive_BTF+0xc4>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d108      	bne.n	80020e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e019      	b.n	8002114 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d002      	beq.n	80020ec <I2C_MasterReceive_BTF+0xe2>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d108      	bne.n	80020fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e00a      	b.n	8002114 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b10      	cmp	r3, #16
 8002102:	d007      	beq.n	8002114 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800216e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d10a      	bne.n	800219a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fcba 	bl	8001b0c <HAL_I2C_MemRxCpltCallback>
}
 8002198:	e01d      	b.n	80021d6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2212      	movs	r2, #18
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fc6f 	bl	8001a8c <HAL_I2C_MasterRxCpltCallback>
}
 80021ae:	e012      	b.n	80021d6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b40      	cmp	r3, #64	; 0x40
 80021f0:	d117      	bne.n	8002222 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800220a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800220c:	e067      	b.n	80022de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	b2da      	uxtb	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]
}
 8002220:	e05d      	b.n	80022de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222a:	d133      	bne.n	8002294 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b21      	cmp	r3, #33	; 0x21
 8002236:	d109      	bne.n	800224c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	e008      	b.n	800225e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <I2C_Master_SB+0x92>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d108      	bne.n	8002282 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	2b00      	cmp	r3, #0
 8002276:	d032      	beq.n	80022de <I2C_Master_SB+0x100>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d02d      	beq.n	80022de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002290:	605a      	str	r2, [r3, #4]
}
 8002292:	e024      	b.n	80022de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10e      	bne.n	80022ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	11db      	asrs	r3, r3, #7
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f003 0306 	and.w	r3, r3, #6
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f063 030f 	orn	r3, r3, #15
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	611a      	str	r2, [r3, #16]
}
 80022b8:	e011      	b.n	80022de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10d      	bne.n	80022de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	11db      	asrs	r3, r3, #7
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f003 0306 	and.w	r3, r3, #6
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f063 030e 	orn	r3, r3, #14
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	611a      	str	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <I2C_Master_ADD10+0x26>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00c      	beq.n	8002332 <I2C_Master_ADD10+0x48>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002330:	605a      	str	r2, [r3, #4]
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800233e:	b480      	push	{r7}
 8002340:	b091      	sub	sp, #68	; 0x44
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800234c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b22      	cmp	r3, #34	; 0x22
 8002366:	f040 8169 	bne.w	800263c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <I2C_Master_ADDR+0x54>
 8002372:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d10b      	bne.n	8002392 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	e160      	b.n	8002654 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002396:	2b00      	cmp	r3, #0
 8002398:	d11d      	bne.n	80023d6 <I2C_Master_ADDR+0x98>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023a2:	d118      	bne.n	80023d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	651a      	str	r2, [r3, #80]	; 0x50
 80023d4:	e13e      	b.n	8002654 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d113      	bne.n	8002408 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e0:	2300      	movs	r3, #0
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e115      	b.n	8002634 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	f040 808a 	bne.w	8002528 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002416:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800241a:	d137      	bne.n	800248c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243a:	d113      	bne.n	8002464 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	e0e7      	b.n	8002634 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e0d3      	b.n	8002634 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248e:	2b08      	cmp	r3, #8
 8002490:	d02e      	beq.n	80024f0 <I2C_Master_ADDR+0x1b2>
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	2b20      	cmp	r3, #32
 8002496:	d02b      	beq.n	80024f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249a:	2b12      	cmp	r3, #18
 800249c:	d102      	bne.n	80024a4 <I2C_Master_ADDR+0x166>
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d125      	bne.n	80024f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00e      	beq.n	80024c8 <I2C_Master_ADDR+0x18a>
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d00b      	beq.n	80024c8 <I2C_Master_ADDR+0x18a>
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d008      	beq.n	80024c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e007      	b.n	80024d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	e0a1      	b.n	8002634 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e085      	b.n	8002634 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d14d      	bne.n	80025ce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	2b04      	cmp	r3, #4
 8002536:	d016      	beq.n	8002566 <I2C_Master_ADDR+0x228>
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	2b02      	cmp	r3, #2
 800253c:	d013      	beq.n	8002566 <I2C_Master_ADDR+0x228>
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	2b10      	cmp	r3, #16
 8002542:	d010      	beq.n	8002566 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e007      	b.n	8002576 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002574:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002584:	d117      	bne.n	80025b6 <I2C_Master_ADDR+0x278>
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800258c:	d00b      	beq.n	80025a6 <I2C_Master_ADDR+0x268>
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	2b01      	cmp	r3, #1
 8002592:	d008      	beq.n	80025a6 <I2C_Master_ADDR+0x268>
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	2b08      	cmp	r3, #8
 8002598:	d005      	beq.n	80025a6 <I2C_Master_ADDR+0x268>
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2b10      	cmp	r3, #16
 800259e:	d002      	beq.n	80025a6 <I2C_Master_ADDR+0x268>
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d107      	bne.n	80025b6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	e032      	b.n	8002634 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025dc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	d117      	bne.n	800261e <I2C_Master_ADDR+0x2e0>
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f4:	d00b      	beq.n	800260e <I2C_Master_ADDR+0x2d0>
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d008      	beq.n	800260e <I2C_Master_ADDR+0x2d0>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d005      	beq.n	800260e <I2C_Master_ADDR+0x2d0>
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b10      	cmp	r3, #16
 8002606:	d002      	beq.n	800260e <I2C_Master_ADDR+0x2d0>
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	2b20      	cmp	r3, #32
 800260c:	d107      	bne.n	800261e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800261c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800263a:	e00b      	b.n	8002654 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
}
 8002652:	e7ff      	b.n	8002654 <I2C_Master_ADDR+0x316>
 8002654:	bf00      	nop
 8002656:	3744      	adds	r7, #68	; 0x44
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02b      	beq.n	80026d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d114      	bne.n	80026d2 <I2C_SlaveTransmit_TXE+0x72>
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b29      	cmp	r3, #41	; 0x29
 80026ac:	d111      	bne.n	80026d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2228      	movs	r2, #40	; 0x28
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff f9e7 	bl	8001aa0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d011      	beq.n	8002710 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02c      	beq.n	8002790 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d114      	bne.n	8002790 <I2C_SlaveReceive_RXNE+0x74>
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b2a      	cmp	r3, #42	; 0x2a
 800276a:	d111      	bne.n	8002790 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2222      	movs	r2, #34	; 0x22
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2228      	movs	r2, #40	; 0x28
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff f992 	bl	8001ab4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027f6:	2b28      	cmp	r3, #40	; 0x28
 80027f8:	d127      	bne.n	800284a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	09db      	lsrs	r3, r3, #7
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	81bb      	strh	r3, [r7, #12]
 800282c:	e002      	b.n	8002834 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800283c:	89ba      	ldrh	r2, [r7, #12]
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff f940 	bl	8001ac8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002848:	e00e      	b.n	8002868 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800288e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	d172      	bne.n	80029b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b22      	cmp	r3, #34	; 0x22
 80028d2:	d002      	beq.n	80028da <I2C_Slave_STOPF+0x6a>
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b2a      	cmp	r3, #42	; 0x2a
 80028d8:	d135      	bne.n	8002946 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fa73 	bl	8000dfe <HAL_DMA_GetState>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d049      	beq.n	80029b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <I2C_Slave_STOPF+0x258>)
 8002924:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fa45 	bl	8000dba <HAL_DMA_Abort_IT>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03d      	beq.n	80029b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002940:	4610      	mov	r0, r2
 8002942:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002944:	e035      	b.n	80029b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0204 	orr.w	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002978:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fa3d 	bl	8000dfe <HAL_DMA_GetState>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d014      	beq.n	80029b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	4a4e      	ldr	r2, [pc, #312]	; (8002ac8 <I2C_Slave_STOPF+0x258>)
 8002990:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fa0f 	bl	8000dba <HAL_DMA_Abort_IT>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ac:	4610      	mov	r0, r2
 80029ae:	4798      	blx	r3
 80029b0:	e000      	b.n	80029b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03e      	beq.n	8002a3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d112      	bne.n	80029f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d112      	bne.n	8002a26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f8b3 	bl	8002bb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a4a:	e039      	b.n	8002ac0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a50:	d109      	bne.n	8002a66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2228      	movs	r2, #40	; 0x28
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff f827 	bl	8001ab4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b28      	cmp	r3, #40	; 0x28
 8002a70:	d111      	bne.n	8002a96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <I2C_Slave_STOPF+0x25c>)
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff f828 	bl	8001ae4 <HAL_I2C_ListenCpltCallback>
}
 8002a94:	e014      	b.n	8002ac0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	2b22      	cmp	r3, #34	; 0x22
 8002a9c:	d002      	beq.n	8002aa4 <I2C_Slave_STOPF+0x234>
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b22      	cmp	r3, #34	; 0x22
 8002aa2:	d10d      	bne.n	8002ac0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fffa 	bl	8001ab4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	08002e15 	.word	0x08002e15
 8002acc:	ffff0000 	.word	0xffff0000

08002ad0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d002      	beq.n	8002af2 <I2C_Slave_AF+0x22>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d129      	bne.n	8002b46 <I2C_Slave_AF+0x76>
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b28      	cmp	r3, #40	; 0x28
 8002af6:	d126      	bne.n	8002b46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <I2C_Slave_AF+0xdc>)
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe ffd0 	bl	8001ae4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002b44:	e02e      	b.n	8002ba4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b21      	cmp	r3, #33	; 0x21
 8002b4a:	d126      	bne.n	8002b9a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <I2C_Slave_AF+0xdc>)
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2221      	movs	r2, #33	; 0x21
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b90:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe ff84 	bl	8001aa0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b98:	e004      	b.n	8002ba4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba2:	615a      	str	r2, [r3, #20]
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	ffff0000 	.word	0xffff0000

08002bb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bc8:	7bbb      	ldrb	r3, [r7, #14]
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d002      	beq.n	8002bd4 <I2C_ITError+0x24>
 8002bce:	7bbb      	ldrb	r3, [r7, #14]
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d10a      	bne.n	8002bea <I2C_ITError+0x3a>
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b22      	cmp	r3, #34	; 0x22
 8002bd8:	d107      	bne.n	8002bea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bf0:	2b28      	cmp	r3, #40	; 0x28
 8002bf2:	d107      	bne.n	8002c04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2228      	movs	r2, #40	; 0x28
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c02:	e015      	b.n	8002c30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c12:	d00a      	beq.n	8002c2a <I2C_ITError+0x7a>
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b60      	cmp	r3, #96	; 0x60
 8002c18:	d007      	beq.n	8002c2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3e:	d162      	bne.n	8002d06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d020      	beq.n	8002ca0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	4a6a      	ldr	r2, [pc, #424]	; (8002e0c <I2C_ITError+0x25c>)
 8002c64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe f8a5 	bl	8000dba <HAL_DMA_Abort_IT>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8089 	beq.w	8002d8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4798      	blx	r3
 8002c9e:	e074      	b.n	8002d8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	4a59      	ldr	r2, [pc, #356]	; (8002e0c <I2C_ITError+0x25c>)
 8002ca6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f884 	bl	8000dba <HAL_DMA_Abort_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d068      	beq.n	8002d8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d10b      	bne.n	8002cde <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d00:	4610      	mov	r0, r2
 8002d02:	4798      	blx	r3
 8002d04:	e041      	b.n	8002d8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b60      	cmp	r3, #96	; 0x60
 8002d10:	d125      	bne.n	8002d5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d10b      	bne.n	8002d46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe feec 	bl	8001b34 <HAL_I2C_AbortCpltCallback>
 8002d5c:	e015      	b.n	8002d8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d10b      	bne.n	8002d84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fe fecb 	bl	8001b20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d113      	bne.n	8002e04 <I2C_ITError+0x254>
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b28      	cmp	r3, #40	; 0x28
 8002de0:	d110      	bne.n	8002e04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <I2C_ITError+0x260>)
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fe70 	bl	8001ae4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	08002e15 	.word	0x08002e15
 8002e10:	ffff0000 	.word	0xffff0000

08002e14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <I2C_DMAAbort+0x148>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <I2C_DMAAbort+0x14c>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0a1a      	lsrs	r2, r3, #8
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	00da      	lsls	r2, r3, #3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e5a:	e00a      	b.n	8002e72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d0ea      	beq.n	8002e48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2200      	movs	r2, #0
 8002e80:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	2200      	movs	r2, #0
 8002e90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b60      	cmp	r3, #96	; 0x60
 8002ee2:	d10e      	bne.n	8002f02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7fe fe1a 	bl	8001b34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f00:	e027      	b.n	8002f52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f08:	2b28      	cmp	r3, #40	; 0x28
 8002f0a:	d117      	bne.n	8002f3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2228      	movs	r2, #40	; 0x28
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f3a:	e007      	b.n	8002f4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	f7fe fde7 	bl	8001b20 <HAL_I2C_ErrorCallback>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	14f8b589 	.word	0x14f8b589

08002f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f74:	e025      	b.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d021      	beq.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fd fddb 	bl	8000b38 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d116      	bne.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0220 	orr.w	r2, r3, #32
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e023      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10d      	bne.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	e00c      	b.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d0b6      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301e:	e029      	b.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f8bb 	bl	800319c <I2C_IsAcknowledgeFailed>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e029      	b.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fd fd82 	bl	8000b38 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d116      	bne.n	8003074 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e007      	b.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d1ce      	bne.n	8003020 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	08db      	lsrs	r3, r3, #3
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0a1a      	lsrs	r2, r3, #8
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e008      	b.n	80030dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d8:	d0e9      	beq.n	80030ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	20000000 	.word	0x20000000
 80030ec:	14f8b589 	.word	0x14f8b589

080030f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030fc:	e042      	b.n	8003184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b10      	cmp	r3, #16
 800310a:	d119      	bne.n	8003140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0210 	mvn.w	r2, #16
 8003114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e029      	b.n	8003194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7fd fcfa 	bl	8000b38 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e007      	b.n	8003194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d1b5      	bne.n	80030fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d11b      	bne.n	80031ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800320a:	d103      	bne.n	8003214 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003212:	e007      	b.n	8003224 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800321c:	d102      	bne.n	8003224 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2208      	movs	r2, #8
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cc      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d90c      	bls.n	800326c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0b8      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a58      	ldr	r2, [pc, #352]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800328e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a52      	ldr	r2, [pc, #328]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	494d      	ldr	r1, [pc, #308]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d044      	beq.n	8003350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d119      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e067      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 0203 	bic.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4934      	ldr	r1, [pc, #208]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003320:	f7fd fc0a 	bl	8000b38 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	e00a      	b.n	800333e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003328:	f7fd fc06 	bl	8000b38 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 020c 	and.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	429a      	cmp	r2, r3
 800334e:	d1eb      	bne.n	8003328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d20c      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e032      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4916      	ldr	r1, [pc, #88]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f855 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	490a      	ldr	r1, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fb6a 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023c00 	.word	0x40023c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	080045f4 	.word	0x080045f4
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	08004604 	.word	0x08004604

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08004604 	.word	0x08004604

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003468:	b0ae      	sub	sp, #184	; 0xb8
 800346a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800348a:	4bcb      	ldr	r3, [pc, #812]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b0c      	cmp	r3, #12
 8003494:	f200 8206 	bhi.w	80038a4 <HAL_RCC_GetSysClockFreq+0x440>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	080038a5 	.word	0x080038a5
 80034a8:	080038a5 	.word	0x080038a5
 80034ac:	080038a5 	.word	0x080038a5
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080038a5 	.word	0x080038a5
 80034b8:	080038a5 	.word	0x080038a5
 80034bc:	080038a5 	.word	0x080038a5
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	080038a5 	.word	0x080038a5
 80034c8:	080038a5 	.word	0x080038a5
 80034cc:	080038a5 	.word	0x080038a5
 80034d0:	080036d5 	.word	0x080036d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4bb9      	ldr	r3, [pc, #740]	; (80037bc <HAL_RCC_GetSysClockFreq+0x358>)
 80034d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034da:	e1e7      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034dc:	4bb8      	ldr	r3, [pc, #736]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034e2:	e1e3      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4bb4      	ldr	r3, [pc, #720]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f0:	4bb1      	ldr	r3, [pc, #708]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d071      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fc:	4bae      	ldr	r3, [pc, #696]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	2200      	movs	r2, #0
 8003504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003508:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800350c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800351e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003534:	0150      	lsls	r0, r2, #5
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4621      	mov	r1, r4
 800353c:	1a51      	subs	r1, r2, r1
 800353e:	6439      	str	r1, [r7, #64]	; 0x40
 8003540:	4629      	mov	r1, r5
 8003542:	eb63 0301 	sbc.w	r3, r3, r1
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003554:	4649      	mov	r1, r9
 8003556:	018b      	lsls	r3, r1, #6
 8003558:	4641      	mov	r1, r8
 800355a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800355e:	4641      	mov	r1, r8
 8003560:	018a      	lsls	r2, r1, #6
 8003562:	4641      	mov	r1, r8
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	63b9      	str	r1, [r7, #56]	; 0x38
 8003568:	4649      	mov	r1, r9
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800357c:	4649      	mov	r1, r9
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4641      	mov	r1, r8
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4622      	mov	r2, r4
 8003592:	189b      	adds	r3, r3, r2
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
 8003596:	462b      	mov	r3, r5
 8003598:	460a      	mov	r2, r1
 800359a:	eb42 0303 	adc.w	r3, r2, r3
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035ac:	4629      	mov	r1, r5
 80035ae:	024b      	lsls	r3, r1, #9
 80035b0:	4621      	mov	r1, r4
 80035b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035b6:	4621      	mov	r1, r4
 80035b8:	024a      	lsls	r2, r1, #9
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035d0:	f7fc fe20 	bl	8000214 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035de:	e067      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e0:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035fa:	2300      	movs	r3, #0
 80035fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003614:	0150      	lsls	r0, r2, #5
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4621      	mov	r1, r4
 800361c:	1a51      	subs	r1, r2, r1
 800361e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003620:	4629      	mov	r1, r5
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003634:	4649      	mov	r1, r9
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363e:	4641      	mov	r1, r8
 8003640:	018a      	lsls	r2, r1, #6
 8003642:	4641      	mov	r1, r8
 8003644:	ebb2 0a01 	subs.w	sl, r2, r1
 8003648:	4649      	mov	r1, r9
 800364a:	eb63 0b01 	sbc.w	fp, r3, r1
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800365a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800365e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003662:	4692      	mov	sl, r2
 8003664:	469b      	mov	fp, r3
 8003666:	4623      	mov	r3, r4
 8003668:	eb1a 0303 	adds.w	r3, sl, r3
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	462b      	mov	r3, r5
 8003670:	eb4b 0303 	adc.w	r3, fp, r3
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003698:	2200      	movs	r2, #0
 800369a:	673b      	str	r3, [r7, #112]	; 0x70
 800369c:	677a      	str	r2, [r7, #116]	; 0x74
 800369e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80036a2:	f7fc fdb7 	bl	8000214 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4613      	mov	r3, r2
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036d2:	e0eb      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d4:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e0:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d06b      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	2200      	movs	r2, #0
 80036f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003700:	2300      	movs	r3, #0
 8003702:	667b      	str	r3, [r7, #100]	; 0x64
 8003704:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003708:	4622      	mov	r2, r4
 800370a:	462b      	mov	r3, r5
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0159      	lsls	r1, r3, #5
 8003716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371a:	0150      	lsls	r0, r2, #5
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4621      	mov	r1, r4
 8003722:	1a51      	subs	r1, r2, r1
 8003724:	61b9      	str	r1, [r7, #24]
 8003726:	4629      	mov	r1, r5
 8003728:	eb63 0301 	sbc.w	r3, r3, r1
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800373a:	4659      	mov	r1, fp
 800373c:	018b      	lsls	r3, r1, #6
 800373e:	4651      	mov	r1, sl
 8003740:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003744:	4651      	mov	r1, sl
 8003746:	018a      	lsls	r2, r1, #6
 8003748:	4651      	mov	r1, sl
 800374a:	ebb2 0801 	subs.w	r8, r2, r1
 800374e:	4659      	mov	r1, fp
 8003750:	eb63 0901 	sbc.w	r9, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003760:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003764:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003768:	4690      	mov	r8, r2
 800376a:	4699      	mov	r9, r3
 800376c:	4623      	mov	r3, r4
 800376e:	eb18 0303 	adds.w	r3, r8, r3
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	462b      	mov	r3, r5
 8003776:	eb49 0303 	adc.w	r3, r9, r3
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003788:	4629      	mov	r1, r5
 800378a:	024b      	lsls	r3, r1, #9
 800378c:	4621      	mov	r1, r4
 800378e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003792:	4621      	mov	r1, r4
 8003794:	024a      	lsls	r2, r1, #9
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800379e:	2200      	movs	r2, #0
 80037a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80037a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037a8:	f7fc fd34 	bl	8000214 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4613      	mov	r3, r2
 80037b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037b6:	e065      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x420>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c4:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_GetSysClockFreq+0x458>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	2200      	movs	r2, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	4611      	mov	r1, r2
 80037d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037d4:	653b      	str	r3, [r7, #80]	; 0x50
 80037d6:	2300      	movs	r3, #0
 80037d8:	657b      	str	r3, [r7, #84]	; 0x54
 80037da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037de:	4642      	mov	r2, r8
 80037e0:	464b      	mov	r3, r9
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f0:	0150      	lsls	r0, r2, #5
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4641      	mov	r1, r8
 80037f8:	1a51      	subs	r1, r2, r1
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4649      	mov	r1, r9
 80037fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003810:	4659      	mov	r1, fp
 8003812:	018b      	lsls	r3, r1, #6
 8003814:	4651      	mov	r1, sl
 8003816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381a:	4651      	mov	r1, sl
 800381c:	018a      	lsls	r2, r1, #6
 800381e:	4651      	mov	r1, sl
 8003820:	1a54      	subs	r4, r2, r1
 8003822:	4659      	mov	r1, fp
 8003824:	eb63 0501 	sbc.w	r5, r3, r1
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	00eb      	lsls	r3, r5, #3
 8003832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003836:	00e2      	lsls	r2, r4, #3
 8003838:	4614      	mov	r4, r2
 800383a:	461d      	mov	r5, r3
 800383c:	4643      	mov	r3, r8
 800383e:	18e3      	adds	r3, r4, r3
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	464b      	mov	r3, r9
 8003844:	eb45 0303 	adc.w	r3, r5, r3
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003856:	4629      	mov	r1, r5
 8003858:	028b      	lsls	r3, r1, #10
 800385a:	4621      	mov	r1, r4
 800385c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003860:	4621      	mov	r1, r4
 8003862:	028a      	lsls	r2, r1, #10
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800386c:	2200      	movs	r2, #0
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003870:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003872:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003876:	f7fc fccd 	bl	8000214 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4613      	mov	r3, r2
 8003880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_RCC_GetSysClockFreq+0x458>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0f1b      	lsrs	r3, r3, #28
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038a2:	e003      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	37b8      	adds	r7, #184	; 0xb8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400

080038c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e28d      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8083 	beq.w	80039ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038e4:	4b94      	ldr	r3, [pc, #592]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d019      	beq.n	8003924 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038f0:	4b91      	ldr	r3, [pc, #580]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038fc:	4b8e      	ldr	r3, [pc, #568]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003908:	d00c      	beq.n	8003924 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390a:	4b8b      	ldr	r3, [pc, #556]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d112      	bne.n	800393c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003922:	d10b      	bne.n	800393c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	4b84      	ldr	r3, [pc, #528]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05b      	beq.n	80039e8 <HAL_RCC_OscConfig+0x124>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d157      	bne.n	80039e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e25a      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d106      	bne.n	8003954 <HAL_RCC_OscConfig+0x90>
 8003946:	4b7c      	ldr	r3, [pc, #496]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7b      	ldr	r2, [pc, #492]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0xcc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0xb4>
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0xcc>
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6b      	ldr	r2, [pc, #428]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd f8ce 	bl	8000b38 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd f8ca 	bl	8000b38 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e21f      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0xdc>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd f8ba 	bl	8000b38 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd f8b6 	bl	8000b38 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e20b      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x104>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d06f      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039f6:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a02:	4b4d      	ldr	r3, [pc, #308]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x186>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1d3      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4937      	ldr	r1, [pc, #220]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCC_OscConfig+0x278>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fd f863 	bl	8000b38 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fd f85f 	bl	8000b38 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1b4      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4925      	ldr	r1, [pc, #148]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x278>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd f842 	bl	8000b38 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7fd f83e 	bl	8000b38 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e193      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d036      	beq.n	8003b50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fd f822 	bl	8000b38 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fd f81e 	bl	8000b38 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e173      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x234>
 8003b16:	e01b      	b.n	8003b50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fd f80b 	bl	8000b38 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e00e      	b.n	8003b44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fd f807 	bl	8000b38 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d907      	bls.n	8003b44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e15c      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470000 	.word	0x42470000
 8003b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	4b8a      	ldr	r3, [pc, #552]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ea      	bne.n	8003b26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8097 	beq.w	8003c8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b62:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a7e      	ldr	r2, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b79      	ldr	r3, [pc, #484]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d118      	bne.n	8003bcc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9a:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a75      	ldr	r2, [pc, #468]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba6:	f7fc ffc7 	bl	8000b38 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bae:	f7fc ffc3 	bl	8000b38 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e118      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	4b6c      	ldr	r3, [pc, #432]	; (8003d74 <HAL_RCC_OscConfig+0x4b0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x31e>
 8003bd4:	4b66      	ldr	r3, [pc, #408]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a65      	ldr	r2, [pc, #404]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e01c      	b.n	8003c1c <HAL_RCC_OscConfig+0x358>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x340>
 8003bea:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a60      	ldr	r2, [pc, #384]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a5d      	ldr	r2, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0x358>
 8003c04:	4b5a      	ldr	r3, [pc, #360]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a59      	ldr	r2, [pc, #356]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	4b57      	ldr	r3, [pc, #348]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a56      	ldr	r2, [pc, #344]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fc ff88 	bl	8000b38 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fc ff84 	bl	8000b38 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0d7      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	4b4b      	ldr	r3, [pc, #300]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ee      	beq.n	8003c2c <HAL_RCC_OscConfig+0x368>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fc ff72 	bl	8000b38 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fc ff6e 	bl	8000b38 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e0c1      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ee      	bne.n	8003c58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	4a3a      	ldr	r2, [pc, #232]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80ad 	beq.w	8003df0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d060      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d145      	bne.n	8003d36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x4b4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fc ff42 	bl	8000b38 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fc ff3e 	bl	8000b38 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e093      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	071b      	lsls	r3, r3, #28
 8003d02:	491b      	ldr	r1, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x4b4>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fc ff13 	bl	8000b38 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fc ff0f 	bl	8000b38 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e064      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x452>
 8003d34:	e05c      	b.n	8003df0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x4b4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fc fefc 	bl	8000b38 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fc fef8 	bl	8000b38 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e04d      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x4ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x480>
 8003d62:	e045      	b.n	8003df0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e040      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40007000 	.word	0x40007000
 8003d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <HAL_RCC_OscConfig+0x538>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d030      	beq.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d129      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d122      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d119      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d10f      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e03f      	b.n	8003e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fc fd5e 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f929 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08a      	sub	sp, #40	; 0x28
 8003e9e:	af02      	add	r7, sp, #8
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d17c      	bne.n	8003fb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_UART_Transmit+0x2c>
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e075      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Transmit+0x3e>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e06e      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2221      	movs	r2, #33	; 0x21
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eee:	f7fc fe23 	bl	8000b38 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d108      	bne.n	8003f1c <HAL_UART_Transmit+0x82>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e003      	b.n	8003f24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f2c:	e02a      	b.n	8003f84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2200      	movs	r2, #0
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f840 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e036      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	3302      	adds	r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e007      	b.n	8003f76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1cf      	bne.n	8003f2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f810 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e006      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b090      	sub	sp, #64	; 0x40
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	e050      	b.n	8004072 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d04c      	beq.n	8004072 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0x30>
 8003fde:	f7fc fdab 	bl	8000b38 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d241      	bcs.n	8004072 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800400e:	637a      	str	r2, [r7, #52]	; 0x34
 8004010:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3314      	adds	r3, #20
 8004028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	613b      	str	r3, [r7, #16]
   return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004042:	623a      	str	r2, [r7, #32]
 8004044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e00f      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4013      	ands	r3, r2
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	429a      	cmp	r2, r3
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	429a      	cmp	r2, r3
 800408e:	d09f      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3740      	adds	r7, #64	; 0x40
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0c0      	sub	sp, #256	; 0x100
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	ea40 0301 	orr.w	r3, r0, r1
 80040c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f4:	f021 010c 	bic.w	r1, r1, #12
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004102:	430b      	orrs	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004116:	6999      	ldr	r1, [r3, #24]
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	ea40 0301 	orr.w	r3, r0, r1
 8004122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8f      	ldr	r3, [pc, #572]	; (8004368 <UART_SetConfig+0x2cc>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d005      	beq.n	800413c <UART_SetConfig+0xa0>
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8d      	ldr	r3, [pc, #564]	; (800436c <UART_SetConfig+0x2d0>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d104      	bne.n	8004146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7ff f97e 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8004140:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004144:	e003      	b.n	800414e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7ff f965 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 800414a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	f040 810c 	bne.w	8004374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800415c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004166:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800416a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	1891      	adds	r1, r2, r2
 8004174:	65b9      	str	r1, [r7, #88]	; 0x58
 8004176:	415b      	adcs	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800417e:	4621      	mov	r1, r4
 8004180:	eb12 0801 	adds.w	r8, r2, r1
 8004184:	4629      	mov	r1, r5
 8004186:	eb43 0901 	adc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041ac:	462b      	mov	r3, r5
 80041ae:	eb49 0303 	adc.w	r3, r9, r3
 80041b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041ca:	460b      	mov	r3, r1
 80041cc:	18db      	adds	r3, r3, r3
 80041ce:	653b      	str	r3, [r7, #80]	; 0x50
 80041d0:	4613      	mov	r3, r2
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
 80041d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041e0:	f7fc f818 	bl	8000214 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <UART_SetConfig+0x2d4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	64b9      	str	r1, [r7, #72]	; 0x48
 800420c:	415b      	adcs	r3, r3
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004214:	4641      	mov	r1, r8
 8004216:	eb12 0a01 	adds.w	sl, r2, r1
 800421a:	4649      	mov	r1, r9
 800421c:	eb43 0b01 	adc.w	fp, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800422c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004234:	4692      	mov	sl, r2
 8004236:	469b      	mov	fp, r3
 8004238:	4643      	mov	r3, r8
 800423a:	eb1a 0303 	adds.w	r3, sl, r3
 800423e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004242:	464b      	mov	r3, r9
 8004244:	eb4b 0303 	adc.w	r3, fp, r3
 8004248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004258:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800425c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004260:	460b      	mov	r3, r1
 8004262:	18db      	adds	r3, r3, r3
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
 8004266:	4613      	mov	r3, r2
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
 800426e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004276:	f7fb ffcd 	bl	8000214 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4611      	mov	r1, r2
 8004280:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <UART_SetConfig+0x2d4>)
 8004282:	fba3 2301 	umull	r2, r3, r3, r1
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2264      	movs	r2, #100	; 0x64
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	1acb      	subs	r3, r1, r3
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <UART_SetConfig+0x2d4>)
 8004298:	fba3 2302 	umull	r2, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a4:	441c      	add	r4, r3
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	63b9      	str	r1, [r7, #56]	; 0x38
 80042c0:	415b      	adcs	r3, r3
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6339      	str	r1, [r7, #48]	; 0x30
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004314:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800431c:	460b      	mov	r3, r1
 800431e:	18db      	adds	r3, r3, r3
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
 8004322:	4613      	mov	r3, r2
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800432e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004332:	f7fb ff6f 	bl	8000214 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <UART_SetConfig+0x2d4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <UART_SetConfig+0x2d4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0207 	and.w	r2, r3, #7
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4422      	add	r2, r4
 8004362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004364:	e105      	b.n	8004572 <UART_SetConfig+0x4d6>
 8004366:	bf00      	nop
 8004368:	40011000 	.word	0x40011000
 800436c:	40011400 	.word	0x40011400
 8004370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800437e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	1891      	adds	r1, r2, r2
 800438c:	6239      	str	r1, [r7, #32]
 800438e:	415b      	adcs	r3, r3
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
 8004392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004396:	4641      	mov	r1, r8
 8004398:	1854      	adds	r4, r2, r1
 800439a:	4649      	mov	r1, r9
 800439c:	eb43 0501 	adc.w	r5, r3, r1
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	18e3      	adds	r3, r4, r3
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043bc:	464b      	mov	r3, r9
 80043be:	eb45 0303 	adc.w	r3, r5, r3
 80043c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043e2:	4629      	mov	r1, r5
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ec:	4621      	mov	r1, r4
 80043ee:	008a      	lsls	r2, r1, #2
 80043f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043f4:	f7fb ff0e 	bl	8000214 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b60      	ldr	r3, [pc, #384]	; (8004580 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004410:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	61b9      	str	r1, [r7, #24]
 8004420:	415b      	adcs	r3, r3
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004428:	4641      	mov	r1, r8
 800442a:	1851      	adds	r1, r2, r1
 800442c:	6139      	str	r1, [r7, #16]
 800442e:	4649      	mov	r1, r9
 8004430:	414b      	adcs	r3, r1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004440:	4659      	mov	r1, fp
 8004442:	00cb      	lsls	r3, r1, #3
 8004444:	4651      	mov	r1, sl
 8004446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444a:	4651      	mov	r1, sl
 800444c:	00ca      	lsls	r2, r1, #3
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	4603      	mov	r3, r0
 8004454:	4642      	mov	r2, r8
 8004456:	189b      	adds	r3, r3, r2
 8004458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	67bb      	str	r3, [r7, #120]	; 0x78
 8004472:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004480:	4649      	mov	r1, r9
 8004482:	008b      	lsls	r3, r1, #2
 8004484:	4641      	mov	r1, r8
 8004486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448a:	4641      	mov	r1, r8
 800448c:	008a      	lsls	r2, r1, #2
 800448e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004492:	f7fb febf 	bl	8000214 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <UART_SetConfig+0x4e4>)
 800449c:	fba3 1302 	umull	r1, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	2164      	movs	r1, #100	; 0x64
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	3332      	adds	r3, #50	; 0x32
 80044ae:	4a34      	ldr	r2, [pc, #208]	; (8004580 <UART_SetConfig+0x4e4>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ba:	441c      	add	r4, r3
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c0:	2200      	movs	r2, #0
 80044c2:	673b      	str	r3, [r7, #112]	; 0x70
 80044c4:	677a      	str	r2, [r7, #116]	; 0x74
 80044c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044ca:	4642      	mov	r2, r8
 80044cc:	464b      	mov	r3, r9
 80044ce:	1891      	adds	r1, r2, r2
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	415b      	adcs	r3, r3
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044da:	4641      	mov	r1, r8
 80044dc:	1851      	adds	r1, r2, r1
 80044de:	6039      	str	r1, [r7, #0]
 80044e0:	4649      	mov	r1, r9
 80044e2:	414b      	adcs	r3, r1
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044f2:	4659      	mov	r1, fp
 80044f4:	00cb      	lsls	r3, r1, #3
 80044f6:	4651      	mov	r1, sl
 80044f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fc:	4651      	mov	r1, sl
 80044fe:	00ca      	lsls	r2, r1, #3
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	4603      	mov	r3, r0
 8004506:	4642      	mov	r2, r8
 8004508:	189b      	adds	r3, r3, r2
 800450a:	66bb      	str	r3, [r7, #104]	; 0x68
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	663b      	str	r3, [r7, #96]	; 0x60
 8004520:	667a      	str	r2, [r7, #100]	; 0x64
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800452e:	4649      	mov	r1, r9
 8004530:	008b      	lsls	r3, r1, #2
 8004532:	4641      	mov	r1, r8
 8004534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004538:	4641      	mov	r1, r8
 800453a:	008a      	lsls	r2, r1, #2
 800453c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004540:	f7fb fe68 	bl	8000214 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <UART_SetConfig+0x4e4>)
 800454a:	fba3 1302 	umull	r1, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2164      	movs	r1, #100	; 0x64
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <UART_SetConfig+0x4e4>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4422      	add	r2, r4
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4d0d      	ldr	r5, [pc, #52]	; (80045bc <__libc_init_array+0x38>)
 8004588:	4c0d      	ldr	r4, [pc, #52]	; (80045c0 <__libc_init_array+0x3c>)
 800458a:	1b64      	subs	r4, r4, r5
 800458c:	10a4      	asrs	r4, r4, #2
 800458e:	2600      	movs	r6, #0
 8004590:	42a6      	cmp	r6, r4
 8004592:	d109      	bne.n	80045a8 <__libc_init_array+0x24>
 8004594:	4d0b      	ldr	r5, [pc, #44]	; (80045c4 <__libc_init_array+0x40>)
 8004596:	4c0c      	ldr	r4, [pc, #48]	; (80045c8 <__libc_init_array+0x44>)
 8004598:	f000 f820 	bl	80045dc <_init>
 800459c:	1b64      	subs	r4, r4, r5
 800459e:	10a4      	asrs	r4, r4, #2
 80045a0:	2600      	movs	r6, #0
 80045a2:	42a6      	cmp	r6, r4
 80045a4:	d105      	bne.n	80045b2 <__libc_init_array+0x2e>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ac:	4798      	blx	r3
 80045ae:	3601      	adds	r6, #1
 80045b0:	e7ee      	b.n	8004590 <__libc_init_array+0xc>
 80045b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b6:	4798      	blx	r3
 80045b8:	3601      	adds	r6, #1
 80045ba:	e7f2      	b.n	80045a2 <__libc_init_array+0x1e>
 80045bc:	08004614 	.word	0x08004614
 80045c0:	08004614 	.word	0x08004614
 80045c4:	08004614 	.word	0x08004614
 80045c8:	08004618 	.word	0x08004618

080045cc <memset>:
 80045cc:	4402      	add	r2, r0
 80045ce:	4603      	mov	r3, r0
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d100      	bne.n	80045d6 <memset+0xa>
 80045d4:	4770      	bx	lr
 80045d6:	f803 1b01 	strb.w	r1, [r3], #1
 80045da:	e7f9      	b.n	80045d0 <memset+0x4>

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
