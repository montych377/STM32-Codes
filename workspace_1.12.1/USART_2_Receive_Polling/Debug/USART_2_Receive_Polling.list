
USART_2_Receive_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000239c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002588  08002588  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002590  08002590  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080025a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080025a4  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015fa  00000000  00000000  00028a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f72  00000000  00000000  0002ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009359  00000000  00000000  0004bcb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c81d1  00000000  00000000  0005500b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d1dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001af8  00000000  00000000  0011d22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002548 	.word	0x08002548

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002548 	.word	0x08002548

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b974 	b.w	8000528 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	468e      	mov	lr, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14d      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000266:	428a      	cmp	r2, r1
 8000268:	4694      	mov	ip, r2
 800026a:	d969      	bls.n	8000340 <__udivmoddi4+0xe8>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b152      	cbz	r2, 8000288 <__udivmoddi4+0x30>
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	f1c2 0120 	rsb	r1, r2, #32
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000282:	ea41 0e03 	orr.w	lr, r1, r3
 8000286:	4094      	lsls	r4, r2
 8000288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800028c:	0c21      	lsrs	r1, r4, #16
 800028e:	fbbe f6f8 	udiv	r6, lr, r8
 8000292:	fa1f f78c 	uxth.w	r7, ip
 8000296:	fb08 e316 	mls	r3, r8, r6, lr
 800029a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029e:	fb06 f107 	mul.w	r1, r6, r7
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ae:	f080 811f 	bcs.w	80004f0 <__udivmoddi4+0x298>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 811c 	bls.w	80004f0 <__udivmoddi4+0x298>
 80002b8:	3e02      	subs	r6, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c4:	fb08 3310 	mls	r3, r8, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 f707 	mul.w	r7, r0, r7
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x92>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002dc:	f080 810a 	bcs.w	80004f4 <__udivmoddi4+0x29c>
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	f240 8107 	bls.w	80004f4 <__udivmoddi4+0x29c>
 80002e6:	4464      	add	r4, ip
 80002e8:	3802      	subs	r0, #2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	1be4      	subs	r4, r4, r7
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0xa4>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xc2>
 8000306:	2d00      	cmp	r5, #0
 8000308:	f000 80ef 	beq.w	80004ea <__udivmoddi4+0x292>
 800030c:	2600      	movs	r6, #0
 800030e:	e9c5 0100 	strd	r0, r1, [r5]
 8000312:	4630      	mov	r0, r6
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f683 	clz	r6, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d14a      	bne.n	80003b8 <__udivmoddi4+0x160>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd4>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80f9 	bhi.w	800051e <__udivmoddi4+0x2c6>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	469e      	mov	lr, r3
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa4>
 800033a:	e9c5 4e00 	strd	r4, lr, [r5]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa4>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xec>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 8092 	bne.w	8000472 <__udivmoddi4+0x21a>
 800034e:	eba1 010c 	sub.w	r1, r1, ip
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2601      	movs	r6, #1
 800035c:	0c20      	lsrs	r0, r4, #16
 800035e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000362:	fb07 1113 	mls	r1, r7, r3, r1
 8000366:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036a:	fb0e f003 	mul.w	r0, lr, r3
 800036e:	4288      	cmp	r0, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x12c>
 8000372:	eb1c 0101 	adds.w	r1, ip, r1
 8000376:	f103 38ff 	add.w	r8, r3, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x12a>
 800037c:	4288      	cmp	r0, r1
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2c0>
 8000382:	4643      	mov	r3, r8
 8000384:	1a09      	subs	r1, r1, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb1 f0f7 	udiv	r0, r1, r7
 800038c:	fb07 1110 	mls	r1, r7, r0, r1
 8000390:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x156>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x154>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2ca>
 80003ac:	4608      	mov	r0, r1
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b6:	e79c      	b.n	80002f2 <__udivmoddi4+0x9a>
 80003b8:	f1c6 0720 	rsb	r7, r6, #32
 80003bc:	40b3      	lsls	r3, r6
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ca:	fa01 f306 	lsl.w	r3, r1, r6
 80003ce:	431c      	orrs	r4, r3
 80003d0:	40f9      	lsrs	r1, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fa00 f306 	lsl.w	r3, r0, r6
 80003da:	fbb1 f8f9 	udiv	r8, r1, r9
 80003de:	0c20      	lsrs	r0, r4, #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fb09 1118 	mls	r1, r9, r8, r1
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	4288      	cmp	r0, r1
 80003f2:	fa02 f206 	lsl.w	r2, r2, r6
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b8>
 80003f8:	eb1c 0101 	adds.w	r1, ip, r1
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2bc>
 8000404:	4288      	cmp	r0, r1
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2bc>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4461      	add	r1, ip
 8000410:	1a09      	subs	r1, r1, r0
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb1 f0f9 	udiv	r0, r1, r9
 8000418:	fb09 1110 	mls	r1, r9, r0, r1
 800041c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	458e      	cmp	lr, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1e2>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2b4>
 8000432:	458e      	cmp	lr, r1
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2b4>
 8000436:	3802      	subs	r0, #2
 8000438:	4461      	add	r1, ip
 800043a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043e:	fba0 9402 	umull	r9, r4, r0, r2
 8000442:	eba1 010e 	sub.w	r1, r1, lr
 8000446:	42a1      	cmp	r1, r4
 8000448:	46c8      	mov	r8, r9
 800044a:	46a6      	mov	lr, r4
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x2a4>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x2a0>
 8000450:	b15d      	cbz	r5, 800046a <__udivmoddi4+0x212>
 8000452:	ebb3 0208 	subs.w	r2, r3, r8
 8000456:	eb61 010e 	sbc.w	r1, r1, lr
 800045a:	fa01 f707 	lsl.w	r7, r1, r7
 800045e:	fa22 f306 	lsr.w	r3, r2, r6
 8000462:	40f1      	lsrs	r1, r6
 8000464:	431f      	orrs	r7, r3
 8000466:	e9c5 7100 	strd	r7, r1, [r5]
 800046a:	2600      	movs	r6, #0
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	f1c2 0320 	rsb	r3, r2, #32
 8000476:	40d8      	lsrs	r0, r3
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	fa21 f303 	lsr.w	r3, r1, r3
 8000480:	4091      	lsls	r1, r2
 8000482:	4301      	orrs	r1, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000490:	fb07 3610 	mls	r6, r7, r0, r3
 8000494:	0c0b      	lsrs	r3, r1, #16
 8000496:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800049a:	fb00 f60e 	mul.w	r6, r0, lr
 800049e:	429e      	cmp	r6, r3
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x260>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b8>
 80004b0:	429e      	cmp	r6, r3
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b8>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1b9b      	subs	r3, r3, r6
 80004ba:	b289      	uxth	r1, r1
 80004bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c0:	fb07 3316 	mls	r3, r7, r6, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb06 f30e 	mul.w	r3, r6, lr
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x28a>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004de:	3e02      	subs	r6, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	1ac9      	subs	r1, r1, r3
 80004e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0x104>
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e705      	b.n	80002fc <__udivmoddi4+0xa4>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e3      	b.n	80002bc <__udivmoddi4+0x64>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6f8      	b.n	80002ea <__udivmoddi4+0x92>
 80004f8:	454b      	cmp	r3, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f8>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000504:	3801      	subs	r0, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f8>
 8000508:	4646      	mov	r6, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x28a>
 800050c:	4620      	mov	r0, r4
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1e2>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x260>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b8>
 8000518:	3b02      	subs	r3, #2
 800051a:	4461      	add	r1, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x12c>
 800051e:	4630      	mov	r0, r6
 8000520:	e709      	b.n	8000336 <__udivmoddi4+0xde>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x156>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fa3c 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f854 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f8ee 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053c:	f000 f8c2 	bl	80006c4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart2, RxBuffer, 7, HAL_MAX_DELAY);
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	2207      	movs	r2, #7
 8000546:	4920      	ldr	r1, [pc, #128]	; (80005c8 <main+0x9c>)
 8000548:	4820      	ldr	r0, [pc, #128]	; (80005cc <main+0xa0>)
 800054a:	f001 fc4c 	bl	8001de6 <HAL_UART_Receive>
//	  HAL_UART_Transmit(&huart2, RxBuffer, strlen((char *)RxBuffer), HAL_MAX_DELAY);
//	  memset(RxBuffer,0x000,sizeof(RxBuffer));
	  i = strcmp((char *)RxBuffer,"LED1 ON");
 800054e:	4920      	ldr	r1, [pc, #128]	; (80005d0 <main+0xa4>)
 8000550:	481d      	ldr	r0, [pc, #116]	; (80005c8 <main+0x9c>)
 8000552:	f7ff fe57 	bl	8000204 <strcmp>
 8000556:	4603      	mov	r3, r0
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <main+0xa8>)
 800055a:	6013      	str	r3, [r2, #0]
	  if(i == 0) {
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <main+0xa8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d114      	bne.n	800058e <main+0x62>

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2120      	movs	r1, #32
 8000568:	481b      	ldr	r0, [pc, #108]	; (80005d8 <main+0xac>)
 800056a:	f000 fd0b 	bl	8000f84 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, RxBuffer, strlen((char *)RxBuffer), HAL_MAX_DELAY);
 800056e:	4816      	ldr	r0, [pc, #88]	; (80005c8 <main+0x9c>)
 8000570:	f7ff fe52 	bl	8000218 <strlen>
 8000574:	4603      	mov	r3, r0
 8000576:	b29a      	uxth	r2, r3
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	4912      	ldr	r1, [pc, #72]	; (80005c8 <main+0x9c>)
 800057e:	4813      	ldr	r0, [pc, #76]	; (80005cc <main+0xa0>)
 8000580:	f001 fb9f 	bl	8001cc2 <HAL_UART_Transmit>
		  memset(RxBuffer,0,sizeof(RxBuffer));
 8000584:	2207      	movs	r2, #7
 8000586:	2100      	movs	r1, #0
 8000588:	480f      	ldr	r0, [pc, #60]	; (80005c8 <main+0x9c>)
 800058a:	f001 ffd5 	bl	8002538 <memset>
	  }

	  if(strcmp((char *)RxBuffer,"LED1OFF") == 0) {
 800058e:	4913      	ldr	r1, [pc, #76]	; (80005dc <main+0xb0>)
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <main+0x9c>)
 8000592:	f7ff fe37 	bl	8000204 <strcmp>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1d1      	bne.n	8000540 <main+0x14>

	  		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2120      	movs	r1, #32
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <main+0xac>)
 80005a2:	f000 fcef 	bl	8000f84 <HAL_GPIO_WritePin>
	  		HAL_UART_Transmit(&huart2, RxBuffer, strlen((char *)RxBuffer), HAL_MAX_DELAY);
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <main+0x9c>)
 80005a8:	f7ff fe36 	bl	8000218 <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	4904      	ldr	r1, [pc, #16]	; (80005c8 <main+0x9c>)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <main+0xa0>)
 80005b8:	f001 fb83 	bl	8001cc2 <HAL_UART_Transmit>
	  		memset(RxBuffer,0,sizeof(RxBuffer));
 80005bc:	2207      	movs	r2, #7
 80005be:	2100      	movs	r1, #0
 80005c0:	4801      	ldr	r0, [pc, #4]	; (80005c8 <main+0x9c>)
 80005c2:	f001 ffb9 	bl	8002538 <memset>
	  HAL_UART_Receive(&huart2, RxBuffer, 7, HAL_MAX_DELAY);
 80005c6:	e7bb      	b.n	8000540 <main+0x14>
 80005c8:	2000006c 	.word	0x2000006c
 80005cc:	20000028 	.word	0x20000028
 80005d0:	08002560 	.word	0x08002560
 80005d4:	20000074 	.word	0x20000074
 80005d8:	40020000 	.word	0x40020000
 80005dc:	08002568 	.word	0x08002568

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ffa2 	bl	8002538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <SystemClock_Config+0xdc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xdc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <SystemClock_Config+0xe0>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xe0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000654:	23b4      	movs	r3, #180	; 0xb4
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f83f 	bl	80016ec <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f8be 	bl	80007f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000678:	f000 fc9e 	bl	8000fb8 <HAL_PWREx_EnableOverDrive>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000682:	f000 f8b7 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fcd7 	bl	8001058 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b0:	f000 f8a0 	bl	80007f4 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 fa94 	bl	8001c28 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f875 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007a4:	f000 fbee 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_GPIO_Init+0xd8>)
 80007c0:	f000 fa4c 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c4:	2320      	movs	r3, #32
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007dc:	f000 fa3e 	bl	8000c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020800 	.word	0x40020800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800083e:	2007      	movs	r0, #7
 8000840:	f000 f9d8 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_UART_MspInit+0x84>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d12b      	bne.n	80008ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x88>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_UART_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ba:	2307      	movs	r3, #7
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_UART_MspInit+0x8c>)
 80008c6:	f000 f9c9 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f890 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f001 fdb3 	bl	80024f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fdcf 	bl	800052c <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800099c:	08002598 	.word	0x08002598
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a4:	2000007c 	.word	0x2000007c

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <HAL_Init+0x40>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_Init+0x40>)
 80009c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x40>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f90d 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff ff0e 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f917 	bl	8000c42 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f8ed 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000078 	.word	0x20000078

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000078 	.word	0x20000078

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff47 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5c 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff8e 	bl	8000b48 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb0 	bl	8000bb0 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	e165      	b.n	8000f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 8154 	bne.w	8000f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d005      	beq.n	8000cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d130      	bne.n	8000d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	091b      	lsrs	r3, r3, #4
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d017      	beq.n	8000d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d123      	bne.n	8000da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0203 	and.w	r2, r3, #3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80ae 	beq.w	8000f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a5c      	ldr	r2, [pc, #368]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfe:	4a58      	ldr	r2, [pc, #352]	; (8000f60 <HAL_GPIO_Init+0x304>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_GPIO_Init+0x308>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d025      	beq.n	8000e76 <HAL_GPIO_Init+0x21a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4e      	ldr	r2, [pc, #312]	; (8000f68 <HAL_GPIO_Init+0x30c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01f      	beq.n	8000e72 <HAL_GPIO_Init+0x216>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4d      	ldr	r2, [pc, #308]	; (8000f6c <HAL_GPIO_Init+0x310>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x212>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_GPIO_Init+0x314>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x20e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <HAL_GPIO_Init+0x318>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x20a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x31c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x206>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a49      	ldr	r2, [pc, #292]	; (8000f7c <HAL_GPIO_Init+0x320>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x202>
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e00c      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00a      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e76:	2300      	movs	r3, #0
 8000e78:	69fa      	ldr	r2, [r7, #28]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_GPIO_Init+0x304>)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eba:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee4:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	f67f ae96 	bls.w	8000c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40013c00 	.word	0x40013c00

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_PWREx_EnableOverDrive+0x90>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_PWREx_EnableOverDrive+0x90>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_PWREx_EnableOverDrive+0x90>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_PWREx_EnableOverDrive+0x94>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe4:	f7ff fd48 	bl	8000a78 <HAL_GetTick>
 8000fe8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fea:	e009      	b.n	8001000 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fec:	f7ff fd44 	bl	8000a78 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffa:	d901      	bls.n	8001000 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e01f      	b.n	8001040 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d1ee      	bne.n	8000fec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001014:	f7ff fd30 	bl	8000a78 <HAL_GetTick>
 8001018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800101a:	e009      	b.n	8001030 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800101c:	f7ff fd2c 	bl	8000a78 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800102a:	d901      	bls.n	8001030 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e007      	b.n	8001040 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800103c:	d1ee      	bne.n	800101c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	420e0040 	.word	0x420e0040
 8001050:	40007000 	.word	0x40007000
 8001054:	420e0044 	.word	0x420e0044

08001058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0cc      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d90c      	bls.n	8001094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0b8      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ac:	4b59      	ldr	r3, [pc, #356]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c4:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	494d      	ldr	r1, [pc, #308]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d044      	beq.n	8001178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d119      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e07f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d003      	beq.n	8001116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001112:	2b03      	cmp	r3, #3
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e06f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e067      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f023 0203 	bic.w	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4934      	ldr	r1, [pc, #208]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	4313      	orrs	r3, r2
 8001146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001148:	f7ff fc96 	bl	8000a78 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff fc92 	bl	8000a78 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e04f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 020c 	and.w	r2, r3, #12
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d1eb      	bne.n	8001150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d20c      	bcs.n	80011a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e032      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4916      	ldr	r1, [pc, #88]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011de:	f000 f855 	bl	800128c <HAL_RCC_GetSysClockFreq>
 80011e2:	4602      	mov	r2, r0
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	5ccb      	ldrb	r3, [r1, r3]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fbf6 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00
 8001214:	40023800 	.word	0x40023800
 8001218:	08002570 	.word	0x08002570
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_RCC_GetHCLKFreq+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000

0800123c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001240:	f7ff fff0 	bl	8001224 <HAL_RCC_GetHCLKFreq>
 8001244:	4602      	mov	r2, r0
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	0a9b      	lsrs	r3, r3, #10
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	4903      	ldr	r1, [pc, #12]	; (8001260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001252:	5ccb      	ldrb	r3, [r1, r3]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	08002580 	.word	0x08002580

08001264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001268:	f7ff ffdc 	bl	8001224 <HAL_RCC_GetHCLKFreq>
 800126c:	4602      	mov	r2, r0
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	0b5b      	lsrs	r3, r3, #13
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	4903      	ldr	r1, [pc, #12]	; (8001288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800127a:	5ccb      	ldrb	r3, [r1, r3]
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001280:	4618      	mov	r0, r3
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	08002580 	.word	0x08002580

0800128c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001290:	b0ae      	sub	sp, #184	; 0xb8
 8001292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012b2:	4bcb      	ldr	r3, [pc, #812]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	f200 8206 	bhi.w	80016cc <HAL_RCC_GetSysClockFreq+0x440>
 80012c0:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012fd 	.word	0x080012fd
 80012cc:	080016cd 	.word	0x080016cd
 80012d0:	080016cd 	.word	0x080016cd
 80012d4:	080016cd 	.word	0x080016cd
 80012d8:	08001305 	.word	0x08001305
 80012dc:	080016cd 	.word	0x080016cd
 80012e0:	080016cd 	.word	0x080016cd
 80012e4:	080016cd 	.word	0x080016cd
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	080016cd 	.word	0x080016cd
 80012f0:	080016cd 	.word	0x080016cd
 80012f4:	080016cd 	.word	0x080016cd
 80012f8:	080014fd 	.word	0x080014fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012fc:	4bb9      	ldr	r3, [pc, #740]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80012fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001302:	e1e7      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001304:	4bb8      	ldr	r3, [pc, #736]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800130a:	e1e3      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800130c:	4bb4      	ldr	r3, [pc, #720]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001318:	4bb1      	ldr	r3, [pc, #708]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d071      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001324:	4bae      	ldr	r3, [pc, #696]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	2200      	movs	r2, #0
 800132c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001330:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800134a:	4622      	mov	r2, r4
 800134c:	462b      	mov	r3, r5
 800134e:	f04f 0000 	mov.w	r0, #0
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	0159      	lsls	r1, r3, #5
 8001358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800135c:	0150      	lsls	r0, r2, #5
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4621      	mov	r1, r4
 8001364:	1a51      	subs	r1, r2, r1
 8001366:	6439      	str	r1, [r7, #64]	; 0x40
 8001368:	4629      	mov	r1, r5
 800136a:	eb63 0301 	sbc.w	r3, r3, r1
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800137c:	4649      	mov	r1, r9
 800137e:	018b      	lsls	r3, r1, #6
 8001380:	4641      	mov	r1, r8
 8001382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001386:	4641      	mov	r1, r8
 8001388:	018a      	lsls	r2, r1, #6
 800138a:	4641      	mov	r1, r8
 800138c:	1a51      	subs	r1, r2, r1
 800138e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001390:	4649      	mov	r1, r9
 8001392:	eb63 0301 	sbc.w	r3, r3, r1
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80013a4:	4649      	mov	r1, r9
 80013a6:	00cb      	lsls	r3, r1, #3
 80013a8:	4641      	mov	r1, r8
 80013aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013ae:	4641      	mov	r1, r8
 80013b0:	00ca      	lsls	r2, r1, #3
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	4622      	mov	r2, r4
 80013ba:	189b      	adds	r3, r3, r2
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
 80013be:	462b      	mov	r3, r5
 80013c0:	460a      	mov	r2, r1
 80013c2:	eb42 0303 	adc.w	r3, r2, r3
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013d4:	4629      	mov	r1, r5
 80013d6:	024b      	lsls	r3, r1, #9
 80013d8:	4621      	mov	r1, r4
 80013da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013de:	4621      	mov	r1, r4
 80013e0:	024a      	lsls	r2, r1, #9
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80013f8:	f7fe ff16 	bl	8000228 <__aeabi_uldivmod>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4613      	mov	r3, r2
 8001402:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001406:	e067      	b.n	80014d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001408:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	2200      	movs	r2, #0
 8001410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001414:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800141c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001420:	67bb      	str	r3, [r7, #120]	; 0x78
 8001422:	2300      	movs	r3, #0
 8001424:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001426:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800142a:	4622      	mov	r2, r4
 800142c:	462b      	mov	r3, r5
 800142e:	f04f 0000 	mov.w	r0, #0
 8001432:	f04f 0100 	mov.w	r1, #0
 8001436:	0159      	lsls	r1, r3, #5
 8001438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800143c:	0150      	lsls	r0, r2, #5
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4621      	mov	r1, r4
 8001444:	1a51      	subs	r1, r2, r1
 8001446:	62b9      	str	r1, [r7, #40]	; 0x28
 8001448:	4629      	mov	r1, r5
 800144a:	eb63 0301 	sbc.w	r3, r3, r1
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800145c:	4649      	mov	r1, r9
 800145e:	018b      	lsls	r3, r1, #6
 8001460:	4641      	mov	r1, r8
 8001462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001466:	4641      	mov	r1, r8
 8001468:	018a      	lsls	r2, r1, #6
 800146a:	4641      	mov	r1, r8
 800146c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001470:	4649      	mov	r1, r9
 8001472:	eb63 0b01 	sbc.w	fp, r3, r1
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001482:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800148a:	4692      	mov	sl, r2
 800148c:	469b      	mov	fp, r3
 800148e:	4623      	mov	r3, r4
 8001490:	eb1a 0303 	adds.w	r3, sl, r3
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	462b      	mov	r3, r5
 8001498:	eb4b 0303 	adc.w	r3, fp, r3
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014aa:	4629      	mov	r1, r5
 80014ac:	028b      	lsls	r3, r1, #10
 80014ae:	4621      	mov	r1, r4
 80014b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014b4:	4621      	mov	r1, r4
 80014b6:	028a      	lsls	r2, r1, #10
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014c0:	2200      	movs	r2, #0
 80014c2:	673b      	str	r3, [r7, #112]	; 0x70
 80014c4:	677a      	str	r2, [r7, #116]	; 0x74
 80014c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014ca:	f7fe fead 	bl	8000228 <__aeabi_uldivmod>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4613      	mov	r3, r2
 80014d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	3301      	adds	r3, #1
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80014ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014fa:	e0eb      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014fc:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d06b      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001514:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	2200      	movs	r2, #0
 800151c:	66bb      	str	r3, [r7, #104]	; 0x68
 800151e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001526:	663b      	str	r3, [r7, #96]	; 0x60
 8001528:	2300      	movs	r3, #0
 800152a:	667b      	str	r3, [r7, #100]	; 0x64
 800152c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001530:	4622      	mov	r2, r4
 8001532:	462b      	mov	r3, r5
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	0159      	lsls	r1, r3, #5
 800153e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001542:	0150      	lsls	r0, r2, #5
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4621      	mov	r1, r4
 800154a:	1a51      	subs	r1, r2, r1
 800154c:	61b9      	str	r1, [r7, #24]
 800154e:	4629      	mov	r1, r5
 8001550:	eb63 0301 	sbc.w	r3, r3, r1
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001562:	4659      	mov	r1, fp
 8001564:	018b      	lsls	r3, r1, #6
 8001566:	4651      	mov	r1, sl
 8001568:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800156c:	4651      	mov	r1, sl
 800156e:	018a      	lsls	r2, r1, #6
 8001570:	4651      	mov	r1, sl
 8001572:	ebb2 0801 	subs.w	r8, r2, r1
 8001576:	4659      	mov	r1, fp
 8001578:	eb63 0901 	sbc.w	r9, r3, r1
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001588:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800158c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001590:	4690      	mov	r8, r2
 8001592:	4699      	mov	r9, r3
 8001594:	4623      	mov	r3, r4
 8001596:	eb18 0303 	adds.w	r3, r8, r3
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	462b      	mov	r3, r5
 800159e:	eb49 0303 	adc.w	r3, r9, r3
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015b0:	4629      	mov	r1, r5
 80015b2:	024b      	lsls	r3, r1, #9
 80015b4:	4621      	mov	r1, r4
 80015b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ba:	4621      	mov	r1, r4
 80015bc:	024a      	lsls	r2, r1, #9
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015c6:	2200      	movs	r2, #0
 80015c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80015ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015d0:	f7fe fe2a 	bl	8000228 <__aeabi_uldivmod>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4613      	mov	r3, r2
 80015da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015de:	e065      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x420>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	00f42400 	.word	0x00f42400
 80015e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	2200      	movs	r2, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	4611      	mov	r1, r2
 80015f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015fc:	653b      	str	r3, [r7, #80]	; 0x50
 80015fe:	2300      	movs	r3, #0
 8001600:	657b      	str	r3, [r7, #84]	; 0x54
 8001602:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001606:	4642      	mov	r2, r8
 8001608:	464b      	mov	r3, r9
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	0159      	lsls	r1, r3, #5
 8001614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001618:	0150      	lsls	r0, r2, #5
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4641      	mov	r1, r8
 8001620:	1a51      	subs	r1, r2, r1
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	4649      	mov	r1, r9
 8001626:	eb63 0301 	sbc.w	r3, r3, r1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001638:	4659      	mov	r1, fp
 800163a:	018b      	lsls	r3, r1, #6
 800163c:	4651      	mov	r1, sl
 800163e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001642:	4651      	mov	r1, sl
 8001644:	018a      	lsls	r2, r1, #6
 8001646:	4651      	mov	r1, sl
 8001648:	1a54      	subs	r4, r2, r1
 800164a:	4659      	mov	r1, fp
 800164c:	eb63 0501 	sbc.w	r5, r3, r1
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	00eb      	lsls	r3, r5, #3
 800165a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165e:	00e2      	lsls	r2, r4, #3
 8001660:	4614      	mov	r4, r2
 8001662:	461d      	mov	r5, r3
 8001664:	4643      	mov	r3, r8
 8001666:	18e3      	adds	r3, r4, r3
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	464b      	mov	r3, r9
 800166c:	eb45 0303 	adc.w	r3, r5, r3
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800167e:	4629      	mov	r1, r5
 8001680:	028b      	lsls	r3, r1, #10
 8001682:	4621      	mov	r1, r4
 8001684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001688:	4621      	mov	r1, r4
 800168a:	028a      	lsls	r2, r1, #10
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001694:	2200      	movs	r2, #0
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
 8001698:	64fa      	str	r2, [r7, #76]	; 0x4c
 800169a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800169e:	f7fe fdc3 	bl	8000228 <__aeabi_uldivmod>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4613      	mov	r3, r2
 80016a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0f1b      	lsrs	r3, r3, #28
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80016ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ca:	e003      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	37b8      	adds	r7, #184	; 0xb8
 80016dc:	46bd      	mov	sp, r7
 80016de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	00f42400 	.word	0x00f42400

080016ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e28d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8083 	beq.w	8001812 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800170c:	4b94      	ldr	r3, [pc, #592]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d019      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001718:	4b91      	ldr	r3, [pc, #580]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001720:	2b08      	cmp	r3, #8
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001724:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001730:	d00c      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x124>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e25a      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x90>
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7b      	ldr	r2, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xb4>
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 80017a0:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6e      	ldr	r2, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6b      	ldr	r2, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f95a 	bl	8000a78 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff f956 	bl	8000a78 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e21f      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b61      	ldr	r3, [pc, #388]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xdc>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f946 	bl	8000a78 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff f942 	bl	8000a78 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e20b      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b57      	ldr	r3, [pc, #348]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x104>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d06f      	beq.n	80018fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d017      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001832:	2b08      	cmp	r3, #8
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1d3      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff f8ef 	bl	8000a78 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff f8eb 	bl	8000a78 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1b4      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4925      	ldr	r1, [pc, #148]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f8ce 	bl	8000a78 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff f8ca 	bl	8000a78 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e193      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d036      	beq.n	8001978 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f8ae 	bl	8000a78 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff f8aa 	bl	8000a78 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e173      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x234>
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f897 	bl	8000a78 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e00e      	b.n	800196c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f893 	bl	8000a78 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d907      	bls.n	800196c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e15c      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001960:	40023800 	.word	0x40023800
 8001964:	42470000 	.word	0x42470000
 8001968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b8a      	ldr	r3, [pc, #552]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800196e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ea      	bne.n	800194e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8097 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a7e      	ldr	r2, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b7c      	ldr	r3, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f853 	bl	8000a78 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff f84f 	bl	8000a78 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e118      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b6c      	ldr	r3, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x31e>
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x340>
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a5d      	ldr	r2, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f814 	bl	8000a78 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff f810 	bl	8000a78 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0d7      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0ee      	beq.n	8001a54 <HAL_RCC_OscConfig+0x368>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7fe fffe 	bl	8000a78 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7fe fffa 	bl	8000a78 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0c1      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ad 	beq.w	8001c18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d060      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d145      	bne.n	8001b5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7fe ffce 	bl	8000a78 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7fe ffca 	bl	8000a78 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e093      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	071b      	lsls	r3, r3, #28
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7fe ff9f 	bl	8000a78 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe ff9b 	bl	8000a78 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e064      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x452>
 8001b5c:	e05c      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7fe ff88 	bl	8000a78 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe ff84 	bl	8000a78 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
 8001b8a:	e045      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e040      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x538>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d129      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d122      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d119      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10f      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e03f      	b.n	8001cba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fdfe 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f9cb 	bl	8002008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b08a      	sub	sp, #40	; 0x28
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d17c      	bne.n	8001ddc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_UART_Transmit+0x2c>
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e075      	b.n	8001dde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_UART_Transmit+0x3e>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e06e      	b.n	8001dde <HAL_UART_Transmit+0x11c>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2221      	movs	r2, #33	; 0x21
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d16:	f7fe feaf 	bl	8000a78 <HAL_GetTick>
 8001d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d30:	d108      	bne.n	8001d44 <HAL_UART_Transmit+0x82>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d104      	bne.n	8001d44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e003      	b.n	8001d4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d54:	e02a      	b.n	8001dac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f8e2 	bl	8001f2a <UART_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e036      	b.n	8001dde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10b      	bne.n	8001d8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	e007      	b.n	8001d9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1cf      	bne.n	8001d56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f8b2 	bl	8001f2a <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b08a      	sub	sp, #40	; 0x28
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	f040 808c 	bne.w	8001f20 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_UART_Receive+0x2e>
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e084      	b.n	8001f22 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_UART_Receive+0x40>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e07d      	b.n	8001f22 <HAL_UART_Receive+0x13c>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2222      	movs	r2, #34	; 0x22
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e42:	f7fe fe19 	bl	8000a78 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5c:	d108      	bne.n	8001e70 <HAL_UART_Receive+0x8a>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d104      	bne.n	8001e70 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	e003      	b.n	8001e78 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e80:	e043      	b.n	8001f0a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2120      	movs	r1, #32
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f84c 	bl	8001f2a <UART_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e042      	b.n	8001f22 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10c      	bne.n	8001ebc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e01f      	b.n	8001efc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec4:	d007      	beq.n	8001ed6 <HAL_UART_Receive+0xf0>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <HAL_UART_Receive+0xfe>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e008      	b.n	8001ef6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1b6      	bne.n	8001e82 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b090      	sub	sp, #64	; 0x40
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f3a:	e050      	b.n	8001fde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f42:	d04c      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8001f4a:	f7fe fd95 	bl	8000a78 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d241      	bcs.n	8001fde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	330c      	adds	r3, #12
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	e853 3f00 	ldrex	r3, [r3]
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	330c      	adds	r3, #12
 8001f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f7a:	637a      	str	r2, [r7, #52]	; 0x34
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f82:	e841 2300 	strex	r3, r2, [r1]
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e5      	bne.n	8001f5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3314      	adds	r3, #20
 8001f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	e853 3f00 	ldrex	r3, [r3]
 8001f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3314      	adds	r3, #20
 8001fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fae:	623a      	str	r2, [r7, #32]
 8001fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb2:	69f9      	ldr	r1, [r7, #28]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	e841 2300 	strex	r3, r2, [r1]
 8001fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e5      	bne.n	8001f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e00f      	b.n	8001ffe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d09f      	beq.n	8001f3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3740      	adds	r7, #64	; 0x40
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800200c:	b0c0      	sub	sp, #256	; 0x100
 800200e:	af00      	add	r7, sp, #0
 8002010:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	68d9      	ldr	r1, [r3, #12]
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	ea40 0301 	orr.w	r3, r0, r1
 8002030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	431a      	orrs	r2, r3
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002060:	f021 010c 	bic.w	r1, r1, #12
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800206e:	430b      	orrs	r3, r1
 8002070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002082:	6999      	ldr	r1, [r3, #24]
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	ea40 0301 	orr.w	r3, r0, r1
 800208e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b8f      	ldr	r3, [pc, #572]	; (80022d4 <UART_SetConfig+0x2cc>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d005      	beq.n	80020a8 <UART_SetConfig+0xa0>
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <UART_SetConfig+0x2d0>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d104      	bne.n	80020b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020a8:	f7ff f8dc 	bl	8001264 <HAL_RCC_GetPCLK2Freq>
 80020ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020b0:	e003      	b.n	80020ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020b2:	f7ff f8c3 	bl	800123c <HAL_RCC_GetPCLK1Freq>
 80020b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c4:	f040 810c 	bne.w	80022e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020cc:	2200      	movs	r2, #0
 80020ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020da:	4622      	mov	r2, r4
 80020dc:	462b      	mov	r3, r5
 80020de:	1891      	adds	r1, r2, r2
 80020e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80020e2:	415b      	adcs	r3, r3
 80020e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ea:	4621      	mov	r1, r4
 80020ec:	eb12 0801 	adds.w	r8, r2, r1
 80020f0:	4629      	mov	r1, r5
 80020f2:	eb43 0901 	adc.w	r9, r3, r1
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210a:	4690      	mov	r8, r2
 800210c:	4699      	mov	r9, r3
 800210e:	4623      	mov	r3, r4
 8002110:	eb18 0303 	adds.w	r3, r8, r3
 8002114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002118:	462b      	mov	r3, r5
 800211a:	eb49 0303 	adc.w	r3, r9, r3
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800212e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002136:	460b      	mov	r3, r1
 8002138:	18db      	adds	r3, r3, r3
 800213a:	653b      	str	r3, [r7, #80]	; 0x50
 800213c:	4613      	mov	r3, r2
 800213e:	eb42 0303 	adc.w	r3, r2, r3
 8002142:	657b      	str	r3, [r7, #84]	; 0x54
 8002144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800214c:	f7fe f86c 	bl	8000228 <__aeabi_uldivmod>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4b61      	ldr	r3, [pc, #388]	; (80022dc <UART_SetConfig+0x2d4>)
 8002156:	fba3 2302 	umull	r2, r3, r3, r2
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	011c      	lsls	r4, r3, #4
 800215e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002162:	2200      	movs	r2, #0
 8002164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002168:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800216c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002170:	4642      	mov	r2, r8
 8002172:	464b      	mov	r3, r9
 8002174:	1891      	adds	r1, r2, r2
 8002176:	64b9      	str	r1, [r7, #72]	; 0x48
 8002178:	415b      	adcs	r3, r3
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800217c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002180:	4641      	mov	r1, r8
 8002182:	eb12 0a01 	adds.w	sl, r2, r1
 8002186:	4649      	mov	r1, r9
 8002188:	eb43 0b01 	adc.w	fp, r3, r1
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800219c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021a0:	4692      	mov	sl, r2
 80021a2:	469b      	mov	fp, r3
 80021a4:	4643      	mov	r3, r8
 80021a6:	eb1a 0303 	adds.w	r3, sl, r3
 80021aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ae:	464b      	mov	r3, r9
 80021b0:	eb4b 0303 	adc.w	r3, fp, r3
 80021b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021cc:	460b      	mov	r3, r1
 80021ce:	18db      	adds	r3, r3, r3
 80021d0:	643b      	str	r3, [r7, #64]	; 0x40
 80021d2:	4613      	mov	r3, r2
 80021d4:	eb42 0303 	adc.w	r3, r2, r3
 80021d8:	647b      	str	r3, [r7, #68]	; 0x44
 80021da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021e2:	f7fe f821 	bl	8000228 <__aeabi_uldivmod>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <UART_SetConfig+0x2d4>)
 80021ee:	fba3 2301 	umull	r2, r3, r3, r1
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2264      	movs	r2, #100	; 0x64
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	1acb      	subs	r3, r1, r3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <UART_SetConfig+0x2d4>)
 8002204:	fba3 2302 	umull	r2, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002210:	441c      	add	r4, r3
 8002212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002216:	2200      	movs	r2, #0
 8002218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800221c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002224:	4642      	mov	r2, r8
 8002226:	464b      	mov	r3, r9
 8002228:	1891      	adds	r1, r2, r2
 800222a:	63b9      	str	r1, [r7, #56]	; 0x38
 800222c:	415b      	adcs	r3, r3
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002234:	4641      	mov	r1, r8
 8002236:	1851      	adds	r1, r2, r1
 8002238:	6339      	str	r1, [r7, #48]	; 0x30
 800223a:	4649      	mov	r1, r9
 800223c:	414b      	adcs	r3, r1
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800224c:	4659      	mov	r1, fp
 800224e:	00cb      	lsls	r3, r1, #3
 8002250:	4651      	mov	r1, sl
 8002252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002256:	4651      	mov	r1, sl
 8002258:	00ca      	lsls	r2, r1, #3
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	4603      	mov	r3, r0
 8002260:	4642      	mov	r2, r8
 8002262:	189b      	adds	r3, r3, r2
 8002264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002268:	464b      	mov	r3, r9
 800226a:	460a      	mov	r2, r1
 800226c:	eb42 0303 	adc.w	r3, r2, r3
 8002270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002280:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002288:	460b      	mov	r3, r1
 800228a:	18db      	adds	r3, r3, r3
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
 800228e:	4613      	mov	r3, r2
 8002290:	eb42 0303 	adc.w	r3, r2, r3
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800229a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800229e:	f7fd ffc3 	bl	8000228 <__aeabi_uldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <UART_SetConfig+0x2d4>)
 80022a8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	2164      	movs	r1, #100	; 0x64
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	3332      	adds	r3, #50	; 0x32
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <UART_SetConfig+0x2d4>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	f003 0207 	and.w	r2, r3, #7
 80022c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4422      	add	r2, r4
 80022ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022d0:	e105      	b.n	80024de <UART_SetConfig+0x4d6>
 80022d2:	bf00      	nop
 80022d4:	40011000 	.word	0x40011000
 80022d8:	40011400 	.word	0x40011400
 80022dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022e4:	2200      	movs	r2, #0
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022f2:	4642      	mov	r2, r8
 80022f4:	464b      	mov	r3, r9
 80022f6:	1891      	adds	r1, r2, r2
 80022f8:	6239      	str	r1, [r7, #32]
 80022fa:	415b      	adcs	r3, r3
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002302:	4641      	mov	r1, r8
 8002304:	1854      	adds	r4, r2, r1
 8002306:	4649      	mov	r1, r9
 8002308:	eb43 0501 	adc.w	r5, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	00eb      	lsls	r3, r5, #3
 8002316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800231a:	00e2      	lsls	r2, r4, #3
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4643      	mov	r3, r8
 8002322:	18e3      	adds	r3, r4, r3
 8002324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002328:	464b      	mov	r3, r9
 800232a:	eb45 0303 	adc.w	r3, r5, r3
 800232e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800233e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800234e:	4629      	mov	r1, r5
 8002350:	008b      	lsls	r3, r1, #2
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002358:	4621      	mov	r1, r4
 800235a:	008a      	lsls	r2, r1, #2
 800235c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002360:	f7fd ff62 	bl	8000228 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4b60      	ldr	r3, [pc, #384]	; (80024ec <UART_SetConfig+0x4e4>)
 800236a:	fba3 2302 	umull	r2, r3, r3, r2
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	011c      	lsls	r4, r3, #4
 8002372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002376:	2200      	movs	r2, #0
 8002378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800237c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002384:	4642      	mov	r2, r8
 8002386:	464b      	mov	r3, r9
 8002388:	1891      	adds	r1, r2, r2
 800238a:	61b9      	str	r1, [r7, #24]
 800238c:	415b      	adcs	r3, r3
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002394:	4641      	mov	r1, r8
 8002396:	1851      	adds	r1, r2, r1
 8002398:	6139      	str	r1, [r7, #16]
 800239a:	4649      	mov	r1, r9
 800239c:	414b      	adcs	r3, r1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023ac:	4659      	mov	r1, fp
 80023ae:	00cb      	lsls	r3, r1, #3
 80023b0:	4651      	mov	r1, sl
 80023b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b6:	4651      	mov	r1, sl
 80023b8:	00ca      	lsls	r2, r1, #3
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	4642      	mov	r2, r8
 80023c2:	189b      	adds	r3, r3, r2
 80023c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023c8:	464b      	mov	r3, r9
 80023ca:	460a      	mov	r2, r1
 80023cc:	eb42 0303 	adc.w	r3, r2, r3
 80023d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80023de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023ec:	4649      	mov	r1, r9
 80023ee:	008b      	lsls	r3, r1, #2
 80023f0:	4641      	mov	r1, r8
 80023f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f6:	4641      	mov	r1, r8
 80023f8:	008a      	lsls	r2, r1, #2
 80023fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023fe:	f7fd ff13 	bl	8000228 <__aeabi_uldivmod>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4b39      	ldr	r3, [pc, #228]	; (80024ec <UART_SetConfig+0x4e4>)
 8002408:	fba3 1302 	umull	r1, r3, r3, r2
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	2164      	movs	r1, #100	; 0x64
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3332      	adds	r3, #50	; 0x32
 800241a:	4a34      	ldr	r2, [pc, #208]	; (80024ec <UART_SetConfig+0x4e4>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002426:	441c      	add	r4, r3
 8002428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800242c:	2200      	movs	r2, #0
 800242e:	673b      	str	r3, [r7, #112]	; 0x70
 8002430:	677a      	str	r2, [r7, #116]	; 0x74
 8002432:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002436:	4642      	mov	r2, r8
 8002438:	464b      	mov	r3, r9
 800243a:	1891      	adds	r1, r2, r2
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	415b      	adcs	r3, r3
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002446:	4641      	mov	r1, r8
 8002448:	1851      	adds	r1, r2, r1
 800244a:	6039      	str	r1, [r7, #0]
 800244c:	4649      	mov	r1, r9
 800244e:	414b      	adcs	r3, r1
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800245e:	4659      	mov	r1, fp
 8002460:	00cb      	lsls	r3, r1, #3
 8002462:	4651      	mov	r1, sl
 8002464:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002468:	4651      	mov	r1, sl
 800246a:	00ca      	lsls	r2, r1, #3
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	4603      	mov	r3, r0
 8002472:	4642      	mov	r2, r8
 8002474:	189b      	adds	r3, r3, r2
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
 8002478:	464b      	mov	r3, r9
 800247a:	460a      	mov	r2, r1
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	663b      	str	r3, [r7, #96]	; 0x60
 800248c:	667a      	str	r2, [r7, #100]	; 0x64
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800249a:	4649      	mov	r1, r9
 800249c:	008b      	lsls	r3, r1, #2
 800249e:	4641      	mov	r1, r8
 80024a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a4:	4641      	mov	r1, r8
 80024a6:	008a      	lsls	r2, r1, #2
 80024a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024ac:	f7fd febc 	bl	8000228 <__aeabi_uldivmod>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <UART_SetConfig+0x4e4>)
 80024b6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2164      	movs	r1, #100	; 0x64
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	3332      	adds	r3, #50	; 0x32
 80024c8:	4a08      	ldr	r2, [pc, #32]	; (80024ec <UART_SetConfig+0x4e4>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4422      	add	r2, r4
 80024dc:	609a      	str	r2, [r3, #8]
}
 80024de:	bf00      	nop
 80024e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024e4:	46bd      	mov	sp, r7
 80024e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ea:	bf00      	nop
 80024ec:	51eb851f 	.word	0x51eb851f

080024f0 <__libc_init_array>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	4d0d      	ldr	r5, [pc, #52]	; (8002528 <__libc_init_array+0x38>)
 80024f4:	4c0d      	ldr	r4, [pc, #52]	; (800252c <__libc_init_array+0x3c>)
 80024f6:	1b64      	subs	r4, r4, r5
 80024f8:	10a4      	asrs	r4, r4, #2
 80024fa:	2600      	movs	r6, #0
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d109      	bne.n	8002514 <__libc_init_array+0x24>
 8002500:	4d0b      	ldr	r5, [pc, #44]	; (8002530 <__libc_init_array+0x40>)
 8002502:	4c0c      	ldr	r4, [pc, #48]	; (8002534 <__libc_init_array+0x44>)
 8002504:	f000 f820 	bl	8002548 <_init>
 8002508:	1b64      	subs	r4, r4, r5
 800250a:	10a4      	asrs	r4, r4, #2
 800250c:	2600      	movs	r6, #0
 800250e:	42a6      	cmp	r6, r4
 8002510:	d105      	bne.n	800251e <__libc_init_array+0x2e>
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	f855 3b04 	ldr.w	r3, [r5], #4
 8002518:	4798      	blx	r3
 800251a:	3601      	adds	r6, #1
 800251c:	e7ee      	b.n	80024fc <__libc_init_array+0xc>
 800251e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002522:	4798      	blx	r3
 8002524:	3601      	adds	r6, #1
 8002526:	e7f2      	b.n	800250e <__libc_init_array+0x1e>
 8002528:	08002590 	.word	0x08002590
 800252c:	08002590 	.word	0x08002590
 8002530:	08002590 	.word	0x08002590
 8002534:	08002594 	.word	0x08002594

08002538 <memset>:
 8002538:	4402      	add	r2, r0
 800253a:	4603      	mov	r3, r0
 800253c:	4293      	cmp	r3, r2
 800253e:	d100      	bne.n	8002542 <memset+0xa>
 8002540:	4770      	bx	lr
 8002542:	f803 1b01 	strb.w	r1, [r3], #1
 8002546:	e7f9      	b.n	800253c <memset+0x4>

08002548 <_init>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr

08002554 <_fini>:
 8002554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002556:	bf00      	nop
 8002558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255a:	bc08      	pop	{r3}
 800255c:	469e      	mov	lr, r3
 800255e:	4770      	bx	lr
