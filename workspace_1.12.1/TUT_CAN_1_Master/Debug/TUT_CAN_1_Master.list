
TUT_CAN_1_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df4  08002df4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dfc  08002dfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002e10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e10  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018be  00000000  00000000  0002a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020949  00000000  00000000  0002cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a489  00000000  00000000  0004d701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6def  00000000  00000000  00057b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000212c  00000000  00000000  0011e9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002db0 	.word	0x08002db0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002db0 	.word	0x08002db0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Can_TransmitData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Can_TransmitData(uint16_t ide,uint8_t datalenght,uint32_t TxMailbox,uint8_t *pdata) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b08e      	sub	sp, #56	; 0x38
 800050c:	af00      	add	r7, sp, #0
 800050e:	60ba      	str	r2, [r7, #8]
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4603      	mov	r3, r0
 8000514:	81fb      	strh	r3, [r7, #14]
 8000516:	460b      	mov	r3, r1
 8000518:	737b      	strb	r3, [r7, #13]

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];
	for(uint8_t i=0;i<datalenght;i++)
 800051a:	2300      	movs	r3, #0
 800051c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000520:	e010      	b.n	8000544 <Can_TransmitData+0x3c>
	{
		TxData[i] = *pdata++;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800052c:	7819      	ldrb	r1, [r3, #0]
 800052e:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8000532:	443b      	add	r3, r7
 8000534:	460a      	mov	r2, r1
 8000536:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(uint8_t i=0;i<datalenght;i++)
 800053a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800053e:	3301      	adds	r3, #1
 8000540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000544:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000548:	7b7b      	ldrb	r3, [r7, #13]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3e9      	bcc.n	8000522 <Can_TransmitData+0x1a>
	}


	TxHeader.StdId = ide;
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8000552:	2300      	movs	r3, #0
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.IDE = CAN_ID_STD;
 8000556:	2300      	movs	r3, #0
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.DLC = datalenght;
 800055a:	7b7b      	ldrb	r3, [r7, #13]
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TransmitGlobalTime = DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	f107 0214 	add.w	r2, r7, #20
 800056c:	f107 011c 	add.w	r1, r7, #28
 8000570:	4809      	ldr	r0, [pc, #36]	; (8000598 <Can_TransmitData+0x90>)
 8000572:	f000 fe18 	bl	80011a6 <HAL_CAN_AddTxMessage>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <Can_TransmitData+0x78>
	{
	  Error_Handler();
 800057c:	f000 f9de 	bl	800093c <Error_Handler>
	}

	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3);
 8000580:	bf00      	nop
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <Can_TransmitData+0x90>)
 8000584:	f000 feea 	bl	800135c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b03      	cmp	r3, #3
 800058c:	d1f9      	bne.n	8000582 <Can_TransmitData+0x7a>
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3738      	adds	r7, #56	; 0x38
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028

0800059c <CAN_ReceiveData>:

void CAN_ReceiveData(uint8_t *pdata)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

	if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 1)
 80005a4:	2100      	movs	r1, #0
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <CAN_ReceiveData+0x38>)
 80005a8:	f001 f81f 	bl	80015ea <HAL_CAN_GetRxFifoFillLevel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d001      	beq.n	80005b6 <CAN_ReceiveData+0x1a>
	{
		/* Reception Missing */
		Error_Handler();
 80005b2:	f000 f9c3 	bl	800093c <Error_Handler>
	}

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, pdata) != HAL_OK)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <CAN_ReceiveData+0x3c>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <CAN_ReceiveData+0x38>)
 80005be:	f000 ff02 	bl	80013c6 <HAL_CAN_GetRxMessage>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <CAN_ReceiveData+0x30>
	{
		Error_Handler();
 80005c8:	f000 f9b8 	bl	800093c <Error_Handler>
	}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000028 	.word	0x20000028
 80005d8:	20000094 	.word	0x20000094

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80005e0:	f000 fae2 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f842 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f93a 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f90e 	bl	800080c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005f0:	f000 f8ae 	bl	8000750 <MX_CAN1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80005f4:	4817      	ldr	r0, [pc, #92]	; (8000654 <main+0x78>)
 80005f6:	f000 fd49 	bl	800108c <HAL_CAN_Start>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0x28>
	  {
		  Error_Handler();
 8000600:	f000 f99c 	bl	800093c <Error_Handler>
	  }
	  Can_TransmitData(0x11, 8,TxMailbox1,(uint8_t *)"hello 06");
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <main+0x7c>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <main+0x80>)
 800060a:	2108      	movs	r1, #8
 800060c:	2011      	movs	r0, #17
 800060e:	f7ff ff7b 	bl	8000508 <Can_TransmitData>
	  HAL_Delay(1000);
 8000612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000616:	f000 fb39 	bl	8000c8c <HAL_Delay>
	  CAN_ReceiveData(RxData);
 800061a:	4811      	ldr	r0, [pc, #68]	; (8000660 <main+0x84>)
 800061c:	f7ff ffbe 	bl	800059c <CAN_ReceiveData>
	  HAL_Delay(1000);
 8000620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000624:	f000 fb32 	bl	8000c8c <HAL_Delay>

	  Can_TransmitData(0x14, 5,TxMailbox2,(uint8_t *)"world");
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <main+0x88>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <main+0x8c>)
 800062e:	2105      	movs	r1, #5
 8000630:	2014      	movs	r0, #20
 8000632:	f7ff ff69 	bl	8000508 <Can_TransmitData>
	  HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f000 fb27 	bl	8000c8c <HAL_Delay>
	  CAN_ReceiveData(RxData);
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <main+0x84>)
 8000640:	f7ff ffac 	bl	800059c <CAN_ReceiveData>
	  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f000 fb20 	bl	8000c8c <HAL_Delay>

	  HAL_CAN_Stop(&hcan1);
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <main+0x78>)
 800064e:	f000 fd61 	bl	8001114 <HAL_CAN_Stop>
	  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000652:	e7cf      	b.n	80005f4 <main+0x18>
 8000654:	20000028 	.word	0x20000028
 8000658:	200000b8 	.word	0x200000b8
 800065c:	08002dc8 	.word	0x08002dc8
 8000660:	200000b0 	.word	0x200000b0
 8000664:	200000bc 	.word	0x200000bc
 8000668:	08002dd4 	.word	0x08002dd4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fb90 	bl	8002da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <SystemClock_Config+0xdc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <SystemClock_Config+0xdc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xdc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <SystemClock_Config+0xe0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <SystemClock_Config+0xe0>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xe0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006e0:	23b4      	movs	r3, #180	; 0xb4
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fdcf 	bl	8002298 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000700:	f000 f91c 	bl	800093c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000704:	f001 fa2e 	bl	8001b64 <HAL_PWREx_EnableOverDrive>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800070e:	f000 f915 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2105      	movs	r1, #5
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fa67 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800073c:	f000 f8fe 	bl	800093c <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_CAN1_Init+0xb4>)
 8000758:	4a2b      	ldr	r2, [pc, #172]	; (8000808 <MX_CAN1_Init+0xb8>)
 800075a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_CAN1_Init+0xb4>)
 800075e:	2212      	movs	r2, #18
 8000760:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_CAN1_Init+0xb4>)
 8000764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000768:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_CAN1_Init+0xb4>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_CAN1_Init+0xb4>)
 8000772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000776:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_CAN1_Init+0xb4>)
 800077a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800077e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_CAN1_Init+0xb4>)
 8000782:	2200      	movs	r2, #0
 8000784:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_CAN1_Init+0xb4>)
 8000788:	2200      	movs	r2, #0
 800078a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_CAN1_Init+0xb4>)
 800078e:	2200      	movs	r2, #0
 8000790:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_CAN1_Init+0xb4>)
 8000794:	2200      	movs	r2, #0
 8000796:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_CAN1_Init+0xb4>)
 800079a:	2200      	movs	r2, #0
 800079c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_CAN1_Init+0xb4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007a4:	4817      	ldr	r0, [pc, #92]	; (8000804 <MX_CAN1_Init+0xb4>)
 80007a6:	f000 fa95 	bl	8000cd4 <HAL_CAN_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80007b0:	f000 f8c4 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sConfig = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2228      	movs	r2, #40	; 0x28
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 faf0 	bl	8002da0 <memset>

  sConfig.FilterActivation = CAN_FILTER_ENABLE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  sConfig.FilterBank = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  sConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.FilterIdHigh = 0x000;
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.FilterIdLow = 0x000;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  sConfig.FilterMaskIdHigh = 0x000;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfig.FilterMaskIdLow = 0x000;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  sConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  sConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  sConfig.SlaveStartFilterBank = 18;
 80007e4:	2312      	movs	r3, #18
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_CAN1_Init+0xb4>)
 80007ee:	f000 fb6d 	bl	8000ecc <HAL_CAN_ConfigFilter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CAN1_Init+0xac>
  {
	Error_Handler();
 80007f8:	f000 f8a0 	bl	800093c <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000028 	.word	0x20000028
 8000808:	40006400 	.word	0x40006400

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f001 ffc6 	bl	80027d4 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f875 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000050 	.word	0x20000050
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a25      	ldr	r2, [pc, #148]	; (8000930 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_GPIO_Init+0xd4>)
 80008ec:	f001 f920 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0xd8>)
 8000908:	f000 ff7e 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800090c:	2320      	movs	r3, #32
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0xd4>)
 8000924:	f000 ff70 	bl	8001808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000986:	2007      	movs	r0, #7
 8000988:	f000 ff0a 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <HAL_CAN_MspInit+0xa8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d13d      	bne.n	8000a36 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <HAL_CAN_MspInit+0xac>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <HAL_CAN_MspInit+0xac>)
 80009c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <HAL_CAN_MspInit+0xac>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <HAL_CAN_MspInit+0xac>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_CAN_MspInit+0xac>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_CAN_MspInit+0xac>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a04:	2309      	movs	r3, #9
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <HAL_CAN_MspInit+0xb0>)
 8000a10:	f000 fefa 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a26:	2309      	movs	r3, #9
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_CAN_MspInit+0xb0>)
 8000a32:	f000 fee9 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40006400 	.word	0x40006400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_MspInit+0x8c>)
 8000ac2:	f000 fea1 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f890 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b7e:	f7ff ffd7 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f002 f8e9 	bl	8002d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fd29 	bl	80005dc <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b98:	08002e04 	.word	0x08002e04
  ldr r2, =_sbss
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba0:	200000c4 	.word	0x200000c4

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 fde5 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff feb4 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fdef 	bl	80017ee <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 fdc5 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200000c0 	.word	0x200000c0

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200000c0 	.word	0x200000c0

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e0ed      	b.n	8000ec2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fe50 	bl	8000998 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d08:	f7ff ffb4 	bl	8000c74 <HAL_GetTick>
 8000d0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d0e:	e012      	b.n	8000d36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d10:	f7ff ffb0 	bl	8000c74 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b0a      	cmp	r3, #10
 8000d1c:	d90b      	bls.n	8000d36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0c5      	b.n	8000ec2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0e5      	beq.n	8000d10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0202 	bic.w	r2, r2, #2
 8000d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d54:	f7ff ff8e 	bl	8000c74 <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d5a:	e012      	b.n	8000d82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d5c:	f7ff ff8a 	bl	8000c74 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d90b      	bls.n	8000d82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2205      	movs	r2, #5
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e09f      	b.n	8000ec2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1e5      	bne.n	8000d5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7e1b      	ldrb	r3, [r3, #24]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d108      	bne.n	8000daa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e007      	b.n	8000dba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7e5b      	ldrb	r3, [r3, #25]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d108      	bne.n	8000dd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e007      	b.n	8000de4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000de2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7e9b      	ldrb	r3, [r3, #26]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d108      	bne.n	8000dfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0220 	orr.w	r2, r2, #32
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e007      	b.n	8000e0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0220 	bic.w	r2, r2, #32
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7edb      	ldrb	r3, [r3, #27]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d108      	bne.n	8000e28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0210 	bic.w	r2, r2, #16
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	e007      	b.n	8000e38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0210 	orr.w	r2, r2, #16
 8000e36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7f1b      	ldrb	r3, [r3, #28]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d108      	bne.n	8000e52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0208 	orr.w	r2, r2, #8
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e007      	b.n	8000e62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0208 	bic.w	r2, r2, #8
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7f5b      	ldrb	r3, [r3, #29]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d108      	bne.n	8000e7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0204 	orr.w	r2, r2, #4
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e007      	b.n	8000e8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	ea42 0103 	orr.w	r1, r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ee4:	7cfb      	ldrb	r3, [r7, #19]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d003      	beq.n	8000ef2 <HAL_CAN_ConfigFilter+0x26>
 8000eea:	7cfb      	ldrb	r3, [r7, #19]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	f040 80be 	bne.w	800106e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ef2:	4b65      	ldr	r3, [pc, #404]	; (8001088 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	431a      	orrs	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	2201      	movs	r2, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	401a      	ands	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d123      	bne.n	8000f9c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3248      	adds	r2, #72	; 0x48
 8000f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f92:	6979      	ldr	r1, [r7, #20]
 8000f94:	3348      	adds	r3, #72	; 0x48
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d122      	bne.n	8000fea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3248      	adds	r2, #72	; 0x48
 8000fca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fe0:	6979      	ldr	r1, [r7, #20]
 8000fe2:	3348      	adds	r3, #72	; 0x48
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001004:	e007      	b.n	8001016 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	431a      	orrs	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d109      	bne.n	8001032 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001030:	e007      	b.n	8001042 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	431a      	orrs	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d107      	bne.n	800105a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	431a      	orrs	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001060:	f023 0201 	bic.w	r2, r3, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e006      	b.n	800107c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
  }
}
 800107c:	4618      	mov	r0, r3
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40006400 	.word	0x40006400

0800108c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d12e      	bne.n	80010fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b8:	f7ff fddc 	bl	8000c74 <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff fdd8 	bl	8000c74 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e012      	b.n	800110c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e5      	bne.n	80010c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e006      	b.n	800110c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
  }
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d133      	bne.n	8001190 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001138:	f7ff fd9c 	bl	8000c74 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113e:	e012      	b.n	8001166 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001140:	f7ff fd98 	bl	8000c74 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d90b      	bls.n	8001166 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2205      	movs	r2, #5
 800115e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e01b      	b.n	800119e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0e5      	beq.n	8001140 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0202 	bic.w	r2, r2, #2
 8001182:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	e006      	b.n	800119e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
  }
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b089      	sub	sp, #36	; 0x24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011c4:	7ffb      	ldrb	r3, [r7, #31]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d003      	beq.n	80011d2 <HAL_CAN_AddTxMessage+0x2c>
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	f040 80b8 	bne.w	8001342 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10a      	bne.n	80011f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80a0 	beq.w	8001332 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	0e1b      	lsrs	r3, r3, #24
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d907      	bls.n	8001212 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e09e      	b.n	8001350 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001212:	2201      	movs	r2, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10d      	bne.n	8001240 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	6809      	ldr	r1, [r1, #0]
 8001232:	431a      	orrs	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3318      	adds	r3, #24
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	440b      	add	r3, r1
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e00f      	b.n	8001260 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800124a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001254:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3318      	adds	r3, #24
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	440b      	add	r3, r1
 800125e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3318      	adds	r3, #24
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	440b      	add	r3, r1
 8001270:	3304      	adds	r3, #4
 8001272:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	7d1b      	ldrb	r3, [r3, #20]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d111      	bne.n	80012a0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3318      	adds	r3, #24
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	4413      	add	r3, r2
 8001288:	3304      	adds	r3, #4
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	6811      	ldr	r1, [r2, #0]
 8001290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3318      	adds	r3, #24
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	440b      	add	r3, r1
 800129c:	3304      	adds	r3, #4
 800129e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3307      	adds	r3, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	061a      	lsls	r2, r3, #24
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3306      	adds	r3, #6
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	041b      	lsls	r3, r3, #16
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3305      	adds	r3, #5
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4313      	orrs	r3, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	3204      	adds	r2, #4
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	4610      	mov	r0, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	6811      	ldr	r1, [r2, #0]
 80012c8:	ea43 0200 	orr.w	r2, r3, r0
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	440b      	add	r3, r1
 80012d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3303      	adds	r3, #3
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	061a      	lsls	r2, r3, #24
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3302      	adds	r3, #2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	4313      	orrs	r3, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	7812      	ldrb	r2, [r2, #0]
 80012f8:	4610      	mov	r0, r2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	6811      	ldr	r1, [r2, #0]
 80012fe:	ea43 0200 	orr.w	r2, r3, r0
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	440b      	add	r3, r1
 8001308:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800130c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3318      	adds	r3, #24
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6811      	ldr	r1, [r2, #0]
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3318      	adds	r3, #24
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	440b      	add	r3, r1
 800132c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e00e      	b.n	8001350 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e006      	b.n	8001350 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
  }
}
 8001350:	4618      	mov	r0, r3
 8001352:	3724      	adds	r7, #36	; 0x24
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001370:	7afb      	ldrb	r3, [r7, #11]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d002      	beq.n	800137c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d11d      	bne.n	80013b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013c6:	b480      	push	{r7}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d003      	beq.n	80013ea <HAL_CAN_GetRxMessage+0x24>
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	f040 80f3 	bne.w	80015d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10e      	bne.n	800140e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0e7      	b.n	80015de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0d8      	b.n	80015de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	331b      	adds	r3, #27
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0204 	and.w	r2, r3, #4
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10c      	bne.n	8001464 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	331b      	adds	r3, #27
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0d5b      	lsrs	r3, r3, #21
 800145a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e00b      	b.n	800147c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	331b      	adds	r3, #27
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	08db      	lsrs	r3, r3, #3
 8001474:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	331b      	adds	r3, #27
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0202 	and.w	r2, r3, #2
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	331b      	adds	r3, #27
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	3304      	adds	r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 020f 	and.w	r2, r3, #15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	331b      	adds	r3, #27
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	3304      	adds	r3, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	331b      	adds	r3, #27
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	3304      	adds	r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0a1a      	lsrs	r2, r3, #8
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0c1a      	lsrs	r2, r3, #16
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3302      	adds	r3, #2
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0e1a      	lsrs	r2, r3, #24
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3303      	adds	r3, #3
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	4413      	add	r3, r2
 8001548:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3304      	adds	r3, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4413      	add	r3, r2
 8001560:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0a1a      	lsrs	r2, r3, #8
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3305      	adds	r3, #5
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0c1a      	lsrs	r2, r3, #16
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3306      	adds	r3, #6
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0e1a      	lsrs	r2, r3, #24
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3307      	adds	r3, #7
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d108      	bne.n	80015bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	e007      	b.n	80015cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e006      	b.n	80015de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
  }
}
 80015de:	4618      	mov	r0, r3
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fe:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d002      	beq.n	800160c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d10f      	bne.n	800162c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e005      	b.n	800162c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff47 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff5c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffb0 	bl	800175c <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e165      	b.n	8001af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8154 	bne.w	8001aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80ae 	beq.w	8001aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a5c      	ldr	r2, [pc, #368]	; (8001b08 <HAL_GPIO_Init+0x300>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_GPIO_Init+0x300>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_GPIO_Init+0x304>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_GPIO_Init+0x308>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d025      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01f      	beq.n	8001a1e <HAL_GPIO_Init+0x216>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_GPIO_Init+0x310>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d019      	beq.n	8001a1a <HAL_GPIO_Init+0x212>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_GPIO_Init+0x314>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_GPIO_Init+0x20e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <HAL_GPIO_Init+0x318>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00d      	beq.n	8001a12 <HAL_GPIO_Init+0x20a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4a      	ldr	r2, [pc, #296]	; (8001b24 <HAL_GPIO_Init+0x31c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x206>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <HAL_GPIO_Init+0x320>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_GPIO_Init+0x202>
 8001a06:	2306      	movs	r3, #6
 8001a08:	e00c      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00a      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x21c>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_GPIO_Init+0x324>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f ae96 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b90:	f7ff f870 	bl	8000c74 <HAL_GetTick>
 8001b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b96:	e009      	b.n	8001bac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b98:	f7ff f86c 	bl	8000c74 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba6:	d901      	bls.n	8001bac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e01f      	b.n	8001bec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc0:	f7ff f858 	bl	8000c74 <HAL_GetTick>
 8001bc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bc6:	e009      	b.n	8001bdc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc8:	f7ff f854 	bl	8000c74 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd6:	d901      	bls.n	8001bdc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e007      	b.n	8001bec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	420e0040 	.word	0x420e0040
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	420e0044 	.word	0x420e0044

08001c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0cc      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d90c      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d044      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d119      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e067      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4934      	ldr	r1, [pc, #208]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7fe ffbe 	bl	8000c74 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7fe ffba 	bl	8000c74 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e04f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d20c      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f855 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ff1e 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08002ddc 	.word	0x08002ddc
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08002dec 	.word	0x08002dec

08001e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e14:	f7ff ffdc 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0b5b      	lsrs	r3, r3, #13
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	08002dec 	.word	0x08002dec

08001e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e3c:	b0ae      	sub	sp, #184	; 0xb8
 8001e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5e:	4bcb      	ldr	r3, [pc, #812]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	f200 8206 	bhi.w	8002278 <HAL_RCC_GetSysClockFreq+0x440>
 8001e6c:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001ea9 	.word	0x08001ea9
 8001e78:	08002279 	.word	0x08002279
 8001e7c:	08002279 	.word	0x08002279
 8001e80:	08002279 	.word	0x08002279
 8001e84:	08001eb1 	.word	0x08001eb1
 8001e88:	08002279 	.word	0x08002279
 8001e8c:	08002279 	.word	0x08002279
 8001e90:	08002279 	.word	0x08002279
 8001e94:	08001eb9 	.word	0x08001eb9
 8001e98:	08002279 	.word	0x08002279
 8001e9c:	08002279 	.word	0x08002279
 8001ea0:	08002279 	.word	0x08002279
 8001ea4:	080020a9 	.word	0x080020a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea8:	4bb9      	ldr	r3, [pc, #740]	; (8002190 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001eae:	e1e7      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb0:	4bb8      	ldr	r3, [pc, #736]	; (8002194 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eb6:	e1e3      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb8:	4bb4      	ldr	r3, [pc, #720]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec4:	4bb1      	ldr	r3, [pc, #708]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d071      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed0:	4bae      	ldr	r3, [pc, #696]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001edc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	462b      	mov	r3, r5
 8001efa:	f04f 0000 	mov.w	r0, #0
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	0159      	lsls	r1, r3, #5
 8001f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f08:	0150      	lsls	r0, r2, #5
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4621      	mov	r1, r4
 8001f10:	1a51      	subs	r1, r2, r1
 8001f12:	6439      	str	r1, [r7, #64]	; 0x40
 8001f14:	4629      	mov	r1, r5
 8001f16:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f28:	4649      	mov	r1, r9
 8001f2a:	018b      	lsls	r3, r1, #6
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f32:	4641      	mov	r1, r8
 8001f34:	018a      	lsls	r2, r1, #6
 8001f36:	4641      	mov	r1, r8
 8001f38:	1a51      	subs	r1, r2, r1
 8001f3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f50:	4649      	mov	r1, r9
 8001f52:	00cb      	lsls	r3, r1, #3
 8001f54:	4641      	mov	r1, r8
 8001f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f5a:	4641      	mov	r1, r8
 8001f5c:	00ca      	lsls	r2, r1, #3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	4622      	mov	r2, r4
 8001f66:	189b      	adds	r3, r3, r2
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
 8001f6a:	462b      	mov	r3, r5
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	eb42 0303 	adc.w	r3, r2, r3
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f80:	4629      	mov	r1, r5
 8001f82:	024b      	lsls	r3, r1, #9
 8001f84:	4621      	mov	r1, r4
 8001f86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	024a      	lsls	r2, r1, #9
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fa0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001fa4:	f7fe f92e 	bl	8000204 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fb2:	e067      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fc0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fce:	2300      	movs	r3, #0
 8001fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fd6:	4622      	mov	r2, r4
 8001fd8:	462b      	mov	r3, r5
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	0159      	lsls	r1, r3, #5
 8001fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe8:	0150      	lsls	r0, r2, #5
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4621      	mov	r1, r4
 8001ff0:	1a51      	subs	r1, r2, r1
 8001ff2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002008:	4649      	mov	r1, r9
 800200a:	018b      	lsls	r3, r1, #6
 800200c:	4641      	mov	r1, r8
 800200e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002012:	4641      	mov	r1, r8
 8002014:	018a      	lsls	r2, r1, #6
 8002016:	4641      	mov	r1, r8
 8002018:	ebb2 0a01 	subs.w	sl, r2, r1
 800201c:	4649      	mov	r1, r9
 800201e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800202e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002032:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002036:	4692      	mov	sl, r2
 8002038:	469b      	mov	fp, r3
 800203a:	4623      	mov	r3, r4
 800203c:	eb1a 0303 	adds.w	r3, sl, r3
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	462b      	mov	r3, r5
 8002044:	eb4b 0303 	adc.w	r3, fp, r3
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002056:	4629      	mov	r1, r5
 8002058:	028b      	lsls	r3, r1, #10
 800205a:	4621      	mov	r1, r4
 800205c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002060:	4621      	mov	r1, r4
 8002062:	028a      	lsls	r2, r1, #10
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800206c:	2200      	movs	r2, #0
 800206e:	673b      	str	r3, [r7, #112]	; 0x70
 8002070:	677a      	str	r2, [r7, #116]	; 0x74
 8002072:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002076:	f7fe f8c5 	bl	8000204 <__aeabi_uldivmod>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4613      	mov	r3, r2
 8002080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002084:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800209a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020a6:	e0eb      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a8:	4b38      	ldr	r3, [pc, #224]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d06b      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_RCC_GetSysClockFreq+0x354>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	2200      	movs	r2, #0
 80020c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d2:	663b      	str	r3, [r7, #96]	; 0x60
 80020d4:	2300      	movs	r3, #0
 80020d6:	667b      	str	r3, [r7, #100]	; 0x64
 80020d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020dc:	4622      	mov	r2, r4
 80020de:	462b      	mov	r3, r5
 80020e0:	f04f 0000 	mov.w	r0, #0
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	0159      	lsls	r1, r3, #5
 80020ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ee:	0150      	lsls	r0, r2, #5
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4621      	mov	r1, r4
 80020f6:	1a51      	subs	r1, r2, r1
 80020f8:	61b9      	str	r1, [r7, #24]
 80020fa:	4629      	mov	r1, r5
 80020fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800210e:	4659      	mov	r1, fp
 8002110:	018b      	lsls	r3, r1, #6
 8002112:	4651      	mov	r1, sl
 8002114:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002118:	4651      	mov	r1, sl
 800211a:	018a      	lsls	r2, r1, #6
 800211c:	4651      	mov	r1, sl
 800211e:	ebb2 0801 	subs.w	r8, r2, r1
 8002122:	4659      	mov	r1, fp
 8002124:	eb63 0901 	sbc.w	r9, r3, r1
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002134:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002138:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213c:	4690      	mov	r8, r2
 800213e:	4699      	mov	r9, r3
 8002140:	4623      	mov	r3, r4
 8002142:	eb18 0303 	adds.w	r3, r8, r3
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	462b      	mov	r3, r5
 800214a:	eb49 0303 	adc.w	r3, r9, r3
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800215c:	4629      	mov	r1, r5
 800215e:	024b      	lsls	r3, r1, #9
 8002160:	4621      	mov	r1, r4
 8002162:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002166:	4621      	mov	r1, r4
 8002168:	024a      	lsls	r2, r1, #9
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002172:	2200      	movs	r2, #0
 8002174:	65bb      	str	r3, [r7, #88]	; 0x58
 8002176:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002178:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800217c:	f7fe f842 	bl	8000204 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800218a:	e065      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x420>
 800218c:	40023800 	.word	0x40023800
 8002190:	00f42400 	.word	0x00f42400
 8002194:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_GetSysClockFreq+0x458>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	2200      	movs	r2, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	4611      	mov	r1, r2
 80021a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021a8:	653b      	str	r3, [r7, #80]	; 0x50
 80021aa:	2300      	movs	r3, #0
 80021ac:	657b      	str	r3, [r7, #84]	; 0x54
 80021ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80021b2:	4642      	mov	r2, r8
 80021b4:	464b      	mov	r3, r9
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	0159      	lsls	r1, r3, #5
 80021c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c4:	0150      	lsls	r0, r2, #5
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4641      	mov	r1, r8
 80021cc:	1a51      	subs	r1, r2, r1
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	4649      	mov	r1, r9
 80021d2:	eb63 0301 	sbc.w	r3, r3, r1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021e4:	4659      	mov	r1, fp
 80021e6:	018b      	lsls	r3, r1, #6
 80021e8:	4651      	mov	r1, sl
 80021ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ee:	4651      	mov	r1, sl
 80021f0:	018a      	lsls	r2, r1, #6
 80021f2:	4651      	mov	r1, sl
 80021f4:	1a54      	subs	r4, r2, r1
 80021f6:	4659      	mov	r1, fp
 80021f8:	eb63 0501 	sbc.w	r5, r3, r1
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	00eb      	lsls	r3, r5, #3
 8002206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800220a:	00e2      	lsls	r2, r4, #3
 800220c:	4614      	mov	r4, r2
 800220e:	461d      	mov	r5, r3
 8002210:	4643      	mov	r3, r8
 8002212:	18e3      	adds	r3, r4, r3
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	464b      	mov	r3, r9
 8002218:	eb45 0303 	adc.w	r3, r5, r3
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800222a:	4629      	mov	r1, r5
 800222c:	028b      	lsls	r3, r1, #10
 800222e:	4621      	mov	r1, r4
 8002230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002234:	4621      	mov	r1, r4
 8002236:	028a      	lsls	r2, r1, #10
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002240:	2200      	movs	r2, #0
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
 8002244:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002246:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800224a:	f7fd ffdb 	bl	8000204 <__aeabi_uldivmod>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4613      	mov	r3, r2
 8002254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCC_GetSysClockFreq+0x458>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	0f1b      	lsrs	r3, r3, #28
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800226a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002276:	e003      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_GetSysClockFreq+0x45c>)
 800227a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800227e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002284:	4618      	mov	r0, r3
 8002286:	37b8      	adds	r7, #184	; 0xb8
 8002288:	46bd      	mov	sp, r7
 800228a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400

08002298 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e28d      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8083 	beq.w	80023be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022b8:	4b94      	ldr	r3, [pc, #592]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d019      	beq.n	80022f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c4:	4b91      	ldr	r3, [pc, #580]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022d0:	4b8e      	ldr	r3, [pc, #568]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022dc:	d00c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022de:	4b8b      	ldr	r3, [pc, #556]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d112      	bne.n	8002310 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f6:	d10b      	bne.n	8002310 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	4b84      	ldr	r3, [pc, #528]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d05b      	beq.n	80023bc <HAL_RCC_OscConfig+0x124>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d157      	bne.n	80023bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e25a      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d106      	bne.n	8002328 <HAL_RCC_OscConfig+0x90>
 800231a:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x274>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7b      	ldr	r2, [pc, #492]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e01d      	b.n	8002364 <HAL_RCC_OscConfig+0xcc>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0xb4>
 8002332:	4b76      	ldr	r3, [pc, #472]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a75      	ldr	r2, [pc, #468]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b73      	ldr	r3, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a72      	ldr	r2, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0xcc>
 800234c:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x274>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6e      	ldr	r2, [pc, #440]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b6c      	ldr	r3, [pc, #432]	; (800250c <HAL_RCC_OscConfig+0x274>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6b      	ldr	r2, [pc, #428]	; (800250c <HAL_RCC_OscConfig+0x274>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fc82 	bl	8000c74 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe fc7e 	bl	8000c74 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e21f      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0xdc>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fc6e 	bl	8000c74 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe fc6a 	bl	8000c74 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e20b      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	4b57      	ldr	r3, [pc, #348]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x104>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d06f      	beq.n	80024aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023ca:	4b50      	ldr	r3, [pc, #320]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d017      	beq.n	8002406 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d6:	4b4d      	ldr	r3, [pc, #308]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023e2:	4b4a      	ldr	r3, [pc, #296]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d11c      	bne.n	8002434 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fa:	4b44      	ldr	r3, [pc, #272]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d116      	bne.n	8002434 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x186>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1d3      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4937      	ldr	r1, [pc, #220]	; (800250c <HAL_RCC_OscConfig+0x274>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	e03a      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243c:	4b34      	ldr	r3, [pc, #208]	; (8002510 <HAL_RCC_OscConfig+0x278>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7fe fc17 	bl	8000c74 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244a:	f7fe fc13 	bl	8000c74 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1b4      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x274>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_RCC_OscConfig+0x274>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4925      	ldr	r1, [pc, #148]	; (800250c <HAL_RCC_OscConfig+0x274>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x278>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fbf6 	bl	8000c74 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe fbf2 	bl	8000c74 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e193      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d036      	beq.n	8002524 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d016      	beq.n	80024ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe fbd6 	bl	8000c74 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe fbd2 	bl	8000c74 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e173      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x234>
 80024ea:	e01b      	b.n	8002524 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fbbf 	bl	8000c74 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	e00e      	b.n	8002518 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fa:	f7fe fbbb 	bl	8000c74 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d907      	bls.n	8002518 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e15c      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
 800250c:	40023800 	.word	0x40023800
 8002510:	42470000 	.word	0x42470000
 8002514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ea      	bne.n	80024fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8097 	beq.w	8002660 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b83      	ldr	r3, [pc, #524]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a7e      	ldr	r2, [pc, #504]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b7c      	ldr	r3, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	2301      	movs	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b79      	ldr	r3, [pc, #484]	; (8002748 <HAL_RCC_OscConfig+0x4b0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0x4b0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a75      	ldr	r2, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x4b0>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe fb7b 	bl	8000c74 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe fb77 	bl	8000c74 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e118      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x4b0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x31e>
 80025a8:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	e01c      	b.n	80025f0 <HAL_RCC_OscConfig+0x358>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x340>
 80025be:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a60      	ldr	r2, [pc, #384]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0x358>
 80025d8:	4b5a      	ldr	r3, [pc, #360]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a59      	ldr	r2, [pc, #356]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	4b57      	ldr	r3, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a56      	ldr	r2, [pc, #344]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe fb3c 	bl	8000c74 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fe fb38 	bl	8000c74 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0d7      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ee      	beq.n	8002600 <HAL_RCC_OscConfig+0x368>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fe fb26 	bl	8000c74 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7fe fb22 	bl	8000c74 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e0c1      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	4b40      	ldr	r3, [pc, #256]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ee      	bne.n	800262c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a3a      	ldr	r2, [pc, #232]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80ad 	beq.w	80027c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b08      	cmp	r3, #8
 8002674:	d060      	beq.n	8002738 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d145      	bne.n	800270a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x4b4>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe faf6 	bl	8000c74 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe faf2 	bl	8000c74 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e093      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	491b      	ldr	r1, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x4b4>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fac7 	bl	8000c74 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fac3 	bl	8000c74 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e064      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x452>
 8002708:	e05c      	b.n	80027c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x4b4>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fab0 	bl	8000c74 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe faac 	bl	8000c74 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04d      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x4ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x480>
 8002736:	e045      	b.n	80027c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e040      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_RCC_OscConfig+0x538>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d030      	beq.n	80027c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d129      	bne.n	80027c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d122      	bne.n	80027c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	4293      	cmp	r3, r2
 800278a:	d119      	bne.n	80027c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	3b01      	subs	r3, #1
 800279a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d10f      	bne.n	80027c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e03f      	b.n	8002866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe f926 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f829 	bl	8002870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800282c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800283c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800284c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002874:	b0c0      	sub	sp, #256	; 0x100
 8002876:	af00      	add	r7, sp, #0
 8002878:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	ea40 0301 	orr.w	r3, r0, r1
 8002898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028c8:	f021 010c 	bic.w	r1, r1, #12
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028d6:	430b      	orrs	r3, r1
 80028d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	6999      	ldr	r1, [r3, #24]
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	ea40 0301 	orr.w	r3, r0, r1
 80028f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b8f      	ldr	r3, [pc, #572]	; (8002b3c <UART_SetConfig+0x2cc>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d005      	beq.n	8002910 <UART_SetConfig+0xa0>
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b8d      	ldr	r3, [pc, #564]	; (8002b40 <UART_SetConfig+0x2d0>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d104      	bne.n	800291a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002910:	f7ff fa7e 	bl	8001e10 <HAL_RCC_GetPCLK2Freq>
 8002914:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002918:	e003      	b.n	8002922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800291a:	f7ff fa65 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 800291e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292c:	f040 810c 	bne.w	8002b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800293a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800293e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002942:	4622      	mov	r2, r4
 8002944:	462b      	mov	r3, r5
 8002946:	1891      	adds	r1, r2, r2
 8002948:	65b9      	str	r1, [r7, #88]	; 0x58
 800294a:	415b      	adcs	r3, r3
 800294c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800294e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002952:	4621      	mov	r1, r4
 8002954:	eb12 0801 	adds.w	r8, r2, r1
 8002958:	4629      	mov	r1, r5
 800295a:	eb43 0901 	adc.w	r9, r3, r1
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800296e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002972:	4690      	mov	r8, r2
 8002974:	4699      	mov	r9, r3
 8002976:	4623      	mov	r3, r4
 8002978:	eb18 0303 	adds.w	r3, r8, r3
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002980:	462b      	mov	r3, r5
 8002982:	eb49 0303 	adc.w	r3, r9, r3
 8002986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002996:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800299a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800299e:	460b      	mov	r3, r1
 80029a0:	18db      	adds	r3, r3, r3
 80029a2:	653b      	str	r3, [r7, #80]	; 0x50
 80029a4:	4613      	mov	r3, r2
 80029a6:	eb42 0303 	adc.w	r3, r2, r3
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
 80029ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029b4:	f7fd fc26 	bl	8000204 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <UART_SetConfig+0x2d4>)
 80029be:	fba3 2302 	umull	r2, r3, r3, r2
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	011c      	lsls	r4, r3, #4
 80029c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	64b9      	str	r1, [r7, #72]	; 0x48
 80029e0:	415b      	adcs	r3, r3
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029e8:	4641      	mov	r1, r8
 80029ea:	eb12 0a01 	adds.w	sl, r2, r1
 80029ee:	4649      	mov	r1, r9
 80029f0:	eb43 0b01 	adc.w	fp, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a08:	4692      	mov	sl, r2
 8002a0a:	469b      	mov	fp, r3
 8002a0c:	4643      	mov	r3, r8
 8002a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a16:	464b      	mov	r3, r9
 8002a18:	eb4b 0303 	adc.w	r3, fp, r3
 8002a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a34:	460b      	mov	r3, r1
 8002a36:	18db      	adds	r3, r3, r3
 8002a38:	643b      	str	r3, [r7, #64]	; 0x40
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	eb42 0303 	adc.w	r3, r2, r3
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
 8002a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a4a:	f7fd fbdb 	bl	8000204 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <UART_SetConfig+0x2d4>)
 8002a56:	fba3 2301 	umull	r2, r3, r3, r1
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2264      	movs	r2, #100	; 0x64
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	1acb      	subs	r3, r1, r3
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <UART_SetConfig+0x2d4>)
 8002a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a78:	441c      	add	r4, r3
 8002a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	1891      	adds	r1, r2, r2
 8002a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a94:	415b      	adcs	r3, r3
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	1851      	adds	r1, r2, r1
 8002aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	414b      	adcs	r3, r1
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	00cb      	lsls	r3, r1, #3
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002abe:	4651      	mov	r1, sl
 8002ac0:	00ca      	lsls	r2, r1, #3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4642      	mov	r2, r8
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	eb42 0303 	adc.w	r3, r2, r3
 8002ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002af0:	460b      	mov	r3, r1
 8002af2:	18db      	adds	r3, r3, r3
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af6:	4613      	mov	r3, r2
 8002af8:	eb42 0303 	adc.w	r3, r2, r3
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b06:	f7fd fb7d 	bl	8000204 <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <UART_SetConfig+0x2d4>)
 8002b10:	fba3 1302 	umull	r1, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	2164      	movs	r1, #100	; 0x64
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	3332      	adds	r3, #50	; 0x32
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <UART_SetConfig+0x2d4>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	f003 0207 	and.w	r2, r3, #7
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4422      	add	r2, r4
 8002b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b38:	e105      	b.n	8002d46 <UART_SetConfig+0x4d6>
 8002b3a:	bf00      	nop
 8002b3c:	40011000 	.word	0x40011000
 8002b40:	40011400 	.word	0x40011400
 8002b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b5a:	4642      	mov	r2, r8
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	1891      	adds	r1, r2, r2
 8002b60:	6239      	str	r1, [r7, #32]
 8002b62:	415b      	adcs	r3, r3
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	1854      	adds	r4, r2, r1
 8002b6e:	4649      	mov	r1, r9
 8002b70:	eb43 0501 	adc.w	r5, r3, r1
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	00eb      	lsls	r3, r5, #3
 8002b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b82:	00e2      	lsls	r2, r4, #3
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	4643      	mov	r3, r8
 8002b8a:	18e3      	adds	r3, r4, r3
 8002b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b90:	464b      	mov	r3, r9
 8002b92:	eb45 0303 	adc.w	r3, r5, r3
 8002b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	008b      	lsls	r3, r1, #2
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	008a      	lsls	r2, r1, #2
 8002bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bc8:	f7fd fb1c 	bl	8000204 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4b60      	ldr	r3, [pc, #384]	; (8002d54 <UART_SetConfig+0x4e4>)
 8002bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	011c      	lsls	r4, r3, #4
 8002bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	1891      	adds	r1, r2, r2
 8002bf2:	61b9      	str	r1, [r7, #24]
 8002bf4:	415b      	adcs	r3, r3
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	1851      	adds	r1, r2, r1
 8002c00:	6139      	str	r1, [r7, #16]
 8002c02:	4649      	mov	r1, r9
 8002c04:	414b      	adcs	r3, r1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c14:	4659      	mov	r1, fp
 8002c16:	00cb      	lsls	r3, r1, #3
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1e:	4651      	mov	r1, sl
 8002c20:	00ca      	lsls	r2, r1, #3
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c30:	464b      	mov	r3, r9
 8002c32:	460a      	mov	r2, r1
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c54:	4649      	mov	r1, r9
 8002c56:	008b      	lsls	r3, r1, #2
 8002c58:	4641      	mov	r1, r8
 8002c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c5e:	4641      	mov	r1, r8
 8002c60:	008a      	lsls	r2, r1, #2
 8002c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c66:	f7fd facd 	bl	8000204 <__aeabi_uldivmod>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <UART_SetConfig+0x4e4>)
 8002c70:	fba3 1302 	umull	r1, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	2164      	movs	r1, #100	; 0x64
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	3332      	adds	r3, #50	; 0x32
 8002c82:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <UART_SetConfig+0x4e4>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8e:	441c      	add	r4, r3
 8002c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c94:	2200      	movs	r2, #0
 8002c96:	673b      	str	r3, [r7, #112]	; 0x70
 8002c98:	677a      	str	r2, [r7, #116]	; 0x74
 8002c9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c9e:	4642      	mov	r2, r8
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	1891      	adds	r1, r2, r2
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cae:	4641      	mov	r1, r8
 8002cb0:	1851      	adds	r1, r2, r1
 8002cb2:	6039      	str	r1, [r7, #0]
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	414b      	adcs	r3, r1
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cc6:	4659      	mov	r1, fp
 8002cc8:	00cb      	lsls	r3, r1, #3
 8002cca:	4651      	mov	r1, sl
 8002ccc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	00ca      	lsls	r2, r1, #3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4642      	mov	r2, r8
 8002cdc:	189b      	adds	r3, r3, r2
 8002cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf4:	667a      	str	r2, [r7, #100]	; 0x64
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d02:	4649      	mov	r1, r9
 8002d04:	008b      	lsls	r3, r1, #2
 8002d06:	4641      	mov	r1, r8
 8002d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	008a      	lsls	r2, r1, #2
 8002d10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d14:	f7fd fa76 	bl	8000204 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <UART_SetConfig+0x4e4>)
 8002d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2164      	movs	r1, #100	; 0x64
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	; 0x32
 8002d30:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <UART_SetConfig+0x4e4>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4422      	add	r2, r4
 8002d44:	609a      	str	r2, [r3, #8]
}
 8002d46:	bf00      	nop
 8002d48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d52:	bf00      	nop
 8002d54:	51eb851f 	.word	0x51eb851f

08002d58 <__libc_init_array>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	4d0d      	ldr	r5, [pc, #52]	; (8002d90 <__libc_init_array+0x38>)
 8002d5c:	4c0d      	ldr	r4, [pc, #52]	; (8002d94 <__libc_init_array+0x3c>)
 8002d5e:	1b64      	subs	r4, r4, r5
 8002d60:	10a4      	asrs	r4, r4, #2
 8002d62:	2600      	movs	r6, #0
 8002d64:	42a6      	cmp	r6, r4
 8002d66:	d109      	bne.n	8002d7c <__libc_init_array+0x24>
 8002d68:	4d0b      	ldr	r5, [pc, #44]	; (8002d98 <__libc_init_array+0x40>)
 8002d6a:	4c0c      	ldr	r4, [pc, #48]	; (8002d9c <__libc_init_array+0x44>)
 8002d6c:	f000 f820 	bl	8002db0 <_init>
 8002d70:	1b64      	subs	r4, r4, r5
 8002d72:	10a4      	asrs	r4, r4, #2
 8002d74:	2600      	movs	r6, #0
 8002d76:	42a6      	cmp	r6, r4
 8002d78:	d105      	bne.n	8002d86 <__libc_init_array+0x2e>
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d80:	4798      	blx	r3
 8002d82:	3601      	adds	r6, #1
 8002d84:	e7ee      	b.n	8002d64 <__libc_init_array+0xc>
 8002d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8a:	4798      	blx	r3
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	e7f2      	b.n	8002d76 <__libc_init_array+0x1e>
 8002d90:	08002dfc 	.word	0x08002dfc
 8002d94:	08002dfc 	.word	0x08002dfc
 8002d98:	08002dfc 	.word	0x08002dfc
 8002d9c:	08002e00 	.word	0x08002e00

08002da0 <memset>:
 8002da0:	4402      	add	r2, r0
 8002da2:	4603      	mov	r3, r0
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d100      	bne.n	8002daa <memset+0xa>
 8002da8:	4770      	bx	lr
 8002daa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dae:	e7f9      	b.n	8002da4 <memset+0x4>

08002db0 <_init>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr

08002dbc <_fini>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr
