
MPU6050_ACCEL_GYRO_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b38  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d18  08003d18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d20  08003d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000010  08003d34  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003d34  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9ea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ec  00000000  00000000  0002ba26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021521  00000000  00000000  0002e608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d06e  00000000  00000000  0004fb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca91c  00000000  00000000  0005cb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001274b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  00127504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003ce8 	.word	0x08003ce8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08003ce8 	.word	0x08003ce8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <MPU6050_initialization>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void MPU6050_initialization( void ) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af04      	add	r7, sp, #16

	uint8_t check,data;

	HAL_I2C_Mem_Read(&hi2c1, 0x68<<1, 0x75, 1, &check, 1, HAL_MAX_DELAY);
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	2275      	movs	r2, #117	; 0x75
 8000cc0:	21d0      	movs	r1, #208	; 0xd0
 8000cc2:	4823      	ldr	r0, [pc, #140]	; (8000d50 <MPU6050_initialization+0xa8>)
 8000cc4:	f001 f968 	bl	8001f98 <HAL_I2C_Mem_Read>

	if(check == 104) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b68      	cmp	r3, #104	; 0x68
 8000ccc:	d13b      	bne.n	8000d46 <MPU6050_initialization+0x9e>

		data = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	2268      	movs	r2, #104	; 0x68
 8000ce4:	21d0      	movs	r1, #208	; 0xd0
 8000ce6:	481a      	ldr	r0, [pc, #104]	; (8000d50 <MPU6050_initialization+0xa8>)
 8000ce8:	f001 f85c 	bl	8001da4 <HAL_I2C_Mem_Write>

		data = 0x07;
 8000cec:	2307      	movs	r3, #7
 8000cee:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	1dbb      	adds	r3, r7, #6
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	2219      	movs	r2, #25
 8000d02:	21d0      	movs	r1, #208	; 0xd0
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MPU6050_initialization+0xa8>)
 8000d06:	f001 f84d 	bl	8001da4 <HAL_I2C_Mem_Write>

		data = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	221c      	movs	r2, #28
 8000d20:	21d0      	movs	r1, #208	; 0xd0
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <MPU6050_initialization+0xa8>)
 8000d24:	f001 f83e 	bl	8001da4 <HAL_I2C_Mem_Write>

		data = 0x00;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	9302      	str	r3, [sp, #8]
 8000d32:	2301      	movs	r3, #1
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	221b      	movs	r2, #27
 8000d3e:	21d0      	movs	r1, #208	; 0xd0
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <MPU6050_initialization+0xa8>)
 8000d42:	f001 f82f 	bl	8001da4 <HAL_I2C_Mem_Write>
	}
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000002c 	.word	0x2000002c

08000d54 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel( void ) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	9302      	str	r3, [sp, #8]
 8000d60:	2306      	movs	r3, #6
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	463b      	mov	r3, r7
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	223b      	movs	r2, #59	; 0x3b
 8000d6c:	21d0      	movs	r1, #208	; 0xd0
 8000d6e:	4829      	ldr	r0, [pc, #164]	; (8000e14 <MPU6050_Read_Accel+0xc0>)
 8000d70:	f001 f912 	bl	8001f98 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (uint16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000d74:	783b      	ldrb	r3, [r7, #0]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	787b      	ldrb	r3, [r7, #1]
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <MPU6050_Read_Accel+0xc4>)
 8000d86:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (uint16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000d88:	78bb      	ldrb	r3, [r7, #2]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MPU6050_Read_Accel+0xc8>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (uint16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000d9c:	793b      	ldrb	r3, [r7, #4]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	797b      	ldrb	r3, [r7, #5]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MPU6050_Read_Accel+0xcc>)
 8000dae:	801a      	strh	r2, [r3, #0]

	Ax = (double) (Accel_X_RAW/16384.0);
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MPU6050_Read_Accel+0xc4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb79 	bl	80004ac <__aeabi_i2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MPU6050_Read_Accel+0xd0>)
 8000dc0:	f7ff fd08 	bl	80007d4 <__aeabi_ddiv>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4917      	ldr	r1, [pc, #92]	; (8000e28 <MPU6050_Read_Accel+0xd4>)
 8000dca:	e9c1 2300 	strd	r2, r3, [r1]
	Ay = (double) (Accel_Y_RAW/16384.0);
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MPU6050_Read_Accel+0xc8>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb6a 	bl	80004ac <__aeabi_i2d>
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MPU6050_Read_Accel+0xd0>)
 8000dde:	f7ff fcf9 	bl	80007d4 <__aeabi_ddiv>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4911      	ldr	r1, [pc, #68]	; (8000e2c <MPU6050_Read_Accel+0xd8>)
 8000de8:	e9c1 2300 	strd	r2, r3, [r1]
	Az = (double) (Accel_Z_RAW/16384.0);
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MPU6050_Read_Accel+0xcc>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb5b 	bl	80004ac <__aeabi_i2d>
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MPU6050_Read_Accel+0xd0>)
 8000dfc:	f7ff fcea 	bl	80007d4 <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	490a      	ldr	r1, [pc, #40]	; (8000e30 <MPU6050_Read_Accel+0xdc>)
 8000e06:	e9c1 2300 	strd	r2, r3, [r1]


}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000002c 	.word	0x2000002c
 8000e18:	200000c4 	.word	0x200000c4
 8000e1c:	200000c6 	.word	0x200000c6
 8000e20:	200000c8 	.word	0x200000c8
 8000e24:	40d00000 	.word	0x40d00000
 8000e28:	200000d0 	.word	0x200000d0
 8000e2c:	200000d8 	.word	0x200000d8
 8000e30:	200000e0 	.word	0x200000e0
 8000e34:	00000000 	.word	0x00000000

08000e38 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro( void ) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, GYRO_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	2306      	movs	r3, #6
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	463b      	mov	r3, r7
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2243      	movs	r2, #67	; 0x43
 8000e50:	21d0      	movs	r1, #208	; 0xd0
 8000e52:	482b      	ldr	r0, [pc, #172]	; (8000f00 <MPU6050_Read_Gyro+0xc8>)
 8000e54:	f001 f8a0 	bl	8001f98 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (uint16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000e58:	783b      	ldrb	r3, [r7, #0]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	787b      	ldrb	r3, [r7, #1]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MPU6050_Read_Gyro+0xcc>)
 8000e6a:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (uint16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000e6c:	78bb      	ldrb	r3, [r7, #2]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MPU6050_Read_Gyro+0xd0>)
 8000e7e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (uint16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000e80:	793b      	ldrb	r3, [r7, #4]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	797b      	ldrb	r3, [r7, #5]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MPU6050_Read_Gyro+0xd4>)
 8000e92:	801a      	strh	r2, [r3, #0]

	Gx = (double)(Gyro_X_RAW/131.0);
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MPU6050_Read_Gyro+0xcc>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb07 	bl	80004ac <__aeabi_i2d>
 8000e9e:	a316      	add	r3, pc, #88	; (adr r3, 8000ef8 <MPU6050_Read_Gyro+0xc0>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fc96 	bl	80007d4 <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4918      	ldr	r1, [pc, #96]	; (8000f10 <MPU6050_Read_Gyro+0xd8>)
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]
	Gy = (double)(Gyro_Y_RAW/131.0);
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MPU6050_Read_Gyro+0xd0>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff faf8 	bl	80004ac <__aeabi_i2d>
 8000ebc:	a30e      	add	r3, pc, #56	; (adr r3, 8000ef8 <MPU6050_Read_Gyro+0xc0>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	f7ff fc87 	bl	80007d4 <__aeabi_ddiv>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4912      	ldr	r1, [pc, #72]	; (8000f14 <MPU6050_Read_Gyro+0xdc>)
 8000ecc:	e9c1 2300 	strd	r2, r3, [r1]
	Gz = (double)(Gyro_Z_RAW/131.0);
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MPU6050_Read_Gyro+0xd4>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fae9 	bl	80004ac <__aeabi_i2d>
 8000eda:	a307      	add	r3, pc, #28	; (adr r3, 8000ef8 <MPU6050_Read_Gyro+0xc0>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	f7ff fc78 	bl	80007d4 <__aeabi_ddiv>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	490b      	ldr	r1, [pc, #44]	; (8000f18 <MPU6050_Read_Gyro+0xe0>)
 8000eea:	e9c1 2300 	strd	r2, r3, [r1]

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	40606000 	.word	0x40606000
 8000f00:	2000002c 	.word	0x2000002c
 8000f04:	200000ca 	.word	0x200000ca
 8000f08:	200000cc 	.word	0x200000cc
 8000f0c:	200000ce 	.word	0x200000ce
 8000f10:	200000e8 	.word	0x200000e8
 8000f14:	200000f0 	.word	0x200000f0
 8000f18:	200000f8 	.word	0x200000f8

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fa82 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f814 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 f8dc 	bl	80010e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f2c:	f000 f882 	bl	8001034 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f30:	f000 f8ae 	bl	8001090 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_initialization();
 8000f34:	f7ff feb8 	bl	8000ca8 <MPU6050_initialization>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 8000f38:	f7ff ff0c 	bl	8000d54 <MPU6050_Read_Accel>
	  HAL_Delay(100);
 8000f3c:	2064      	movs	r0, #100	; 0x64
 8000f3e:	f000 fae5 	bl	800150c <HAL_Delay>
	  MPU6050_Read_Gyro();
 8000f42:	f7ff ff79 	bl	8000e38 <MPU6050_Read_Gyro>
	  HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f000 fae0 	bl	800150c <HAL_Delay>
	  MPU6050_Read_Accel();
 8000f4c:	e7f4      	b.n	8000f38 <main+0x1c>
	...

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2234      	movs	r2, #52	; 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 feba 	bl	8003cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <SystemClock_Config+0xdc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a2b      	ldr	r2, [pc, #172]	; (800102c <SystemClock_Config+0xdc>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <SystemClock_Config+0xdc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <SystemClock_Config+0xe0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a25      	ldr	r2, [pc, #148]	; (8001030 <SystemClock_Config+0xe0>)
 8000f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SystemClock_Config+0xe0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fc4:	23b4      	movs	r3, #180	; 0xb4
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 f8f9 	bl	80031d0 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fe4:	f000 f8f4 	bl	80011d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe8:	f001 fd58 	bl	8002a9c <HAL_PWREx_EnableOverDrive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ff2:	f000 f8ed 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001002:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2105      	movs	r1, #5
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fd91 	bl	8002b3c <HAL_RCC_ClockConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001020:	f000 f8d6 	bl	80011d0 <Error_Handler>
  }
}
 8001024:	bf00      	nop
 8001026:	3750      	adds	r7, #80	; 0x50
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x50>)
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <MX_I2C1_Init+0x54>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x50>)
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_I2C1_Init+0x58>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_I2C1_Init+0x50>)
 8001052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001056:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_I2C1_Init+0x50>)
 8001072:	f000 fd53 	bl	8001b1c <HAL_I2C_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f8a8 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000002c 	.word	0x2000002c
 8001088:	40005400 	.word	0x40005400
 800108c:	00061a80 	.word	0x00061a80

08001090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <MX_USART2_UART_Init+0x50>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_USART2_UART_Init+0x4c>)
 80010c8:	f002 fb20 	bl	800370c <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f000 f87d 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000080 	.word	0x20000080
 80010e0:	40004400 	.word	0x40004400

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <MX_GPIO_Init+0xe0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <MX_GPIO_Init+0xe0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <MX_GPIO_Init+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_GPIO_Init+0xe0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2120      	movs	r1, #32
 800116e:	4816      	ldr	r0, [pc, #88]	; (80011c8 <MX_GPIO_Init+0xe4>)
 8001170:	f000 fc96 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4810      	ldr	r0, [pc, #64]	; (80011cc <MX_GPIO_Init+0xe8>)
 800118c:	f000 faf4 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001190:	2320      	movs	r3, #32
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4808      	ldr	r0, [pc, #32]	; (80011c8 <MX_GPIO_Init+0xe4>)
 80011a8:	f000 fae6 	bl	8001778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2028      	movs	r0, #40	; 0x28
 80011b2:	f000 faaa 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b6:	2028      	movs	r0, #40	; 0x28
 80011b8:	f000 fac3 	bl	8001742 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020800 	.word	0x40020800

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_MspInit+0x4c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800121a:	2007      	movs	r0, #7
 800121c:	f000 fa6a 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_I2C_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12c      	bne.n	80012a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800126a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001270:	2312      	movs	r3, #18
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800127c:	2304      	movs	r3, #4
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <HAL_I2C_MspInit+0x8c>)
 8001288:	f000 fa76 	bl	8001778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020400 	.word	0x40020400

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <HAL_UART_MspInit+0x84>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12b      	bne.n	8001336 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_UART_MspInit+0x88>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_UART_MspInit+0x88>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_UART_MspInit+0x88>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_UART_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_UART_MspInit+0x88>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_UART_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001316:	230c      	movs	r3, #12
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001326:	2307      	movs	r3, #7
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_UART_MspInit+0x8c>)
 8001332:	f000 fa21 	bl	8001778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004400 	.word	0x40004400
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f898 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a8:	f000 fb94 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013da:	490e      	ldr	r1, [pc, #56]	; (8001414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f0:	4c0b      	ldr	r4, [pc, #44]	; (8001420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fe:	f7ff ffd7 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f002 fc45 	bl	8003c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fd89 	bl	8000f1c <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800140c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001418:	08003d28 	.word	0x08003d28
  ldr r2, =_sbss
 800141c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001420:	20000104 	.word	0x20000104

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f94f 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff febe 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f967 	bl	800175e <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f92f 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000100 	.word	0x20000100

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000100 	.word	0x20000100

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff29 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff3e 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff31 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa2 	bl	80016b0 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e165      	b.n	8001a60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8154 	bne.w	8001a5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d005      	beq.n	80017ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d130      	bne.n	800182c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 0201 	and.w	r2, r3, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b03      	cmp	r3, #3
 8001836:	d017      	beq.n	8001868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d123      	bne.n	80018bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	08da      	lsrs	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3208      	adds	r2, #8
 800187c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	69b9      	ldr	r1, [r7, #24]
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80ae 	beq.w	8001a5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_GPIO_Init+0x300>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a5c      	ldr	r2, [pc, #368]	; (8001a78 <HAL_GPIO_Init+0x300>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b5a      	ldr	r3, [pc, #360]	; (8001a78 <HAL_GPIO_Init+0x300>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191a:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_GPIO_Init+0x304>)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	220f      	movs	r2, #15
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <HAL_GPIO_Init+0x308>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x21a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4e      	ldr	r2, [pc, #312]	; (8001a84 <HAL_GPIO_Init+0x30c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x216>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4d      	ldr	r2, [pc, #308]	; (8001a88 <HAL_GPIO_Init+0x310>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x212>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <HAL_GPIO_Init+0x314>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x20e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4b      	ldr	r2, [pc, #300]	; (8001a90 <HAL_GPIO_Init+0x318>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x20a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_GPIO_Init+0x31c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x206>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a49      	ldr	r2, [pc, #292]	; (8001a98 <HAL_GPIO_Init+0x320>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x202>
 8001976:	2306      	movs	r3, #6
 8001978:	e00c      	b.n	8001994 <HAL_GPIO_Init+0x21c>
 800197a:	2307      	movs	r3, #7
 800197c:	e00a      	b.n	8001994 <HAL_GPIO_Init+0x21c>
 800197e:	2305      	movs	r3, #5
 8001980:	e008      	b.n	8001994 <HAL_GPIO_Init+0x21c>
 8001982:	2304      	movs	r3, #4
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x21c>
 8001986:	2303      	movs	r3, #3
 8001988:	e004      	b.n	8001994 <HAL_GPIO_Init+0x21c>
 800198a:	2302      	movs	r3, #2
 800198c:	e002      	b.n	8001994 <HAL_GPIO_Init+0x21c>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x21c>
 8001992:	2300      	movs	r3, #0
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f002 0203 	and.w	r2, r2, #3
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	4093      	lsls	r3, r2
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a4:	4935      	ldr	r1, [pc, #212]	; (8001a7c <HAL_GPIO_Init+0x304>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b2:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <HAL_GPIO_Init+0x324>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d6:	4a31      	ldr	r2, [pc, #196]	; (8001a9c <HAL_GPIO_Init+0x324>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019dc:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x324>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a00:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a54:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_GPIO_Init+0x324>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	f67f ae96 	bls.w	8001794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40021400 	.word	0x40021400
 8001a98:	40021800 	.word	0x40021800
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f806 	bl	8001b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40013c00 	.word	0x40013c00

08001b04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e12b      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fb72 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b80:	f001 f8ce 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a81      	ldr	r2, [pc, #516]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d807      	bhi.n	8001ba0 <HAL_I2C_Init+0x84>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_I2C_Init+0x278>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e006      	b.n	8001bae <HAL_I2C_Init+0x92>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	; (8001d98 <HAL_I2C_Init+0x27c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0e7      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a78      	ldr	r2, [pc, #480]	; (8001d9c <HAL_I2C_Init+0x280>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9b      	lsrs	r3, r3, #18
 8001bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d802      	bhi.n	8001bf0 <HAL_I2C_Init+0xd4>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	e009      	b.n	8001c04 <HAL_I2C_Init+0xe8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a69      	ldr	r2, [pc, #420]	; (8001da0 <HAL_I2C_Init+0x284>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	3301      	adds	r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	495c      	ldr	r1, [pc, #368]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d819      	bhi.n	8001c58 <HAL_I2C_Init+0x13c>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e59      	subs	r1, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c38:	400b      	ands	r3, r1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_I2C_Init+0x138>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e59      	subs	r1, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c52:	e051      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e04f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_I2C_Init+0x168>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e58      	subs	r0, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e012      	b.n	8001caa <HAL_I2C_Init+0x18e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x196>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e022      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_I2C_Init+0x1bc>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1e58      	subs	r0, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	e00f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6911      	ldr	r1, [r2, #16]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	000186a0 	.word	0x000186a0
 8001d94:	001e847f 	.word	0x001e847f
 8001d98:	003d08ff 	.word	0x003d08ff
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	817b      	strh	r3, [r7, #10]
 8001db6:	460b      	mov	r3, r1
 8001db8:	813b      	strh	r3, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dbe:	f7ff fb99 	bl	80014f4 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	f040 80d9 	bne.w	8001f84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2319      	movs	r3, #25
 8001dd8:	2201      	movs	r2, #1
 8001dda:	496d      	ldr	r1, [pc, #436]	; (8001f90 <HAL_I2C_Mem_Write+0x1ec>)
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 fc7f 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0cc      	b.n	8001f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_I2C_Mem_Write+0x56>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e0c5      	b.n	8001f86 <HAL_I2C_Mem_Write+0x1e2>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d007      	beq.n	8001e20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2221      	movs	r2, #33	; 0x21
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a3a      	ldr	r2, [r7, #32]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <HAL_I2C_Mem_Write+0x1f0>)
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e62:	88f8      	ldrh	r0, [r7, #6]
 8001e64:	893a      	ldrh	r2, [r7, #8]
 8001e66:	8979      	ldrh	r1, [r7, #10]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4603      	mov	r3, r0
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fab6 	bl	80023e4 <I2C_RequestMemoryWrite>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d052      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e081      	b.n	8001f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fd00 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00d      	beq.n	8001eae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06b      	b.n	8001f86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d11b      	bne.n	8001f24 <HAL_I2C_Mem_Write+0x180>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1aa      	bne.n	8001e82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fcec 	bl	800290e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d107      	bne.n	8001f54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e016      	b.n	8001f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	00100002 	.word	0x00100002
 8001f94:	ffff0000 	.word	0xffff0000

08001f98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	817b      	strh	r3, [r7, #10]
 8001faa:	460b      	mov	r3, r1
 8001fac:	813b      	strh	r3, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb2:	f7ff fa9f 	bl	80014f4 <HAL_GetTick>
 8001fb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	f040 8208 	bne.w	80023d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2319      	movs	r3, #25
 8001fcc:	2201      	movs	r2, #1
 8001fce:	497b      	ldr	r1, [pc, #492]	; (80021bc <HAL_I2C_Mem_Read+0x224>)
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fb85 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e1fb      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Mem_Read+0x56>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e1f4      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d007      	beq.n	8002014 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2222      	movs	r2, #34	; 0x22
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2240      	movs	r2, #64	; 0x40
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a5b      	ldr	r2, [pc, #364]	; (80021c0 <HAL_I2C_Mem_Read+0x228>)
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002056:	88f8      	ldrh	r0, [r7, #6]
 8002058:	893a      	ldrh	r2, [r7, #8]
 800205a:	8979      	ldrh	r1, [r7, #10]
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4603      	mov	r3, r0
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fa52 	bl	8002510 <I2C_RequestMemoryRead>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1b0      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e184      	b.n	80023b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d11b      	bne.n	80020e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e164      	b.n	80023b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d11b      	bne.n	8002126 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	e144      	b.n	80023b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800213c:	e138      	b.n	80023b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b03      	cmp	r3, #3
 8002144:	f200 80f1 	bhi.w	800232a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	2b01      	cmp	r3, #1
 800214e:	d123      	bne.n	8002198 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fc1b 	bl	8002990 <I2C_WaitOnRXNEFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e139      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002196:	e10b      	b.n	80023b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	2b02      	cmp	r3, #2
 800219e:	d14e      	bne.n	800223e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	2200      	movs	r2, #0
 80021a8:	4906      	ldr	r1, [pc, #24]	; (80021c4 <HAL_I2C_Mem_Read+0x22c>)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fa98 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e10e      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
 80021ba:	bf00      	nop
 80021bc:	00100002 	.word	0x00100002
 80021c0:	ffff0000 	.word	0xffff0000
 80021c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800223c:	e0b8      	b.n	80023b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	2200      	movs	r2, #0
 8002246:	4966      	ldr	r1, [pc, #408]	; (80023e0 <HAL_I2C_Mem_Read+0x448>)
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fa49 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0bf      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	2200      	movs	r2, #0
 80022a2:	494f      	ldr	r1, [pc, #316]	; (80023e0 <HAL_I2C_Mem_Read+0x448>)
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fa1b 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e091      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002328:	e042      	b.n	80023b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fb2e 	bl	8002990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e04c      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d118      	bne.n	80023b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f aec2 	bne.w	800213e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00010004 	.word	0x00010004

080023e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	817b      	strh	r3, [r7, #10]
 80023f6:	460b      	mov	r3, r1
 80023f8:	813b      	strh	r3, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	2200      	movs	r2, #0
 8002416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f960 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002434:	d103      	bne.n	800243e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e05f      	b.n	8002502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	492d      	ldr	r1, [pc, #180]	; (800250c <I2C_RequestMemoryWrite+0x128>)
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f998 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e04c      	b.n	8002502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fa02 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00d      	beq.n	80024aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b04      	cmp	r3, #4
 8002494:	d107      	bne.n	80024a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e02b      	b.n	8002502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024b0:	893b      	ldrh	r3, [r7, #8]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	e021      	b.n	8002500 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024bc:	893b      	ldrh	r3, [r7, #8]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	6a39      	ldr	r1, [r7, #32]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f9dc 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00d      	beq.n	80024f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d107      	bne.n	80024f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e005      	b.n	8002502 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024f6:	893b      	ldrh	r3, [r7, #8]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	00010002 	.word	0x00010002

08002510 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	4608      	mov	r0, r1
 800251a:	4611      	mov	r1, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4603      	mov	r3, r0
 8002520:	817b      	strh	r3, [r7, #10]
 8002522:	460b      	mov	r3, r1
 8002524:	813b      	strh	r3, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002538:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	2200      	movs	r2, #0
 8002552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f8c2 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002570:	d103      	bne.n	800257a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0aa      	b.n	80026d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800258c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	4952      	ldr	r1, [pc, #328]	; (80026dc <I2C_RequestMemoryRead+0x1cc>)
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f8fa 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e097      	b.n	80026d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f964 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d107      	bne.n	80025e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e076      	b.n	80026d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ec:	893b      	ldrh	r3, [r7, #8]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	e021      	b.n	800263c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f93e 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b04      	cmp	r3, #4
 800261c:	d107      	bne.n	800262e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e050      	b.n	80026d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002632:	893b      	ldrh	r3, [r7, #8]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	6a39      	ldr	r1, [r7, #32]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f923 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b04      	cmp	r3, #4
 8002652:	d107      	bne.n	8002664 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e035      	b.n	80026d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002676:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	2200      	movs	r2, #0
 8002680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f82b 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269e:	d103      	bne.n	80026a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e013      	b.n	80026d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026ac:	897b      	ldrh	r3, [r7, #10]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	6a3a      	ldr	r2, [r7, #32]
 80026c0:	4906      	ldr	r1, [pc, #24]	; (80026dc <I2C_RequestMemoryRead+0x1cc>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f863 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	00010002 	.word	0x00010002

080026e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f0:	e025      	b.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d021      	beq.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe fefb 	bl	80014f4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d116      	bne.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e023      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10d      	bne.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	e00c      	b.n	800277e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4013      	ands	r3, r2
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	429a      	cmp	r2, r3
 8002782:	d0b6      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279c:	e051      	b.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ac:	d123      	bne.n	80027f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e046      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d021      	beq.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe fe79 	bl	80014f4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e020      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d10c      	bne.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e00b      	b.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d18d      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002898:	e02d      	b.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f8ce 	bl	8002a3c <I2C_IsAcknowledgeFailed>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02d      	b.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d021      	beq.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7fe fe1f 	bl	80014f4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e007      	b.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d1ca      	bne.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800291a:	e02d      	b.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f88d 	bl	8002a3c <I2C_IsAcknowledgeFailed>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e02d      	b.n	8002988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d021      	beq.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002934:	f7fe fdde 	bl	80014f4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e007      	b.n	8002988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d1ca      	bne.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299c:	e042      	b.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d119      	bne.n	80029e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0210 	mvn.w	r2, #16
 80029b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e029      	b.n	8002a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	f7fe fd88 	bl	80014f4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d302      	bcc.n	80029f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e007      	b.n	8002a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d1b5      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d11b      	bne.n	8002a8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0204 	orr.w	r2, r3, #4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_PWREx_EnableOverDrive+0x94>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac8:	f7fe fd14 	bl	80014f4 <HAL_GetTick>
 8002acc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ace:	e009      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ad0:	f7fe fd10 	bl	80014f4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ade:	d901      	bls.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e01f      	b.n	8002b24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af8:	f7fe fcfc 	bl	80014f4 <HAL_GetTick>
 8002afc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002afe:	e009      	b.n	8002b14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b00:	f7fe fcf8 	bl	80014f4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b0e:	d901      	bls.n	8002b14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e007      	b.n	8002b24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b20:	d1ee      	bne.n	8002b00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	420e0040 	.word	0x420e0040
 8002b34:	40007000 	.word	0x40007000
 8002b38:	420e0044 	.word	0x420e0044

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0cc      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d90c      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b63      	ldr	r3, [pc, #396]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b8      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	494d      	ldr	r1, [pc, #308]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d044      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d119      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e07f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e067      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1a:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4934      	ldr	r1, [pc, #208]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fc62 	bl	80014f4 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7fe fc5e 	bl	80014f4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e04f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 020c 	and.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d20c      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e032      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4916      	ldr	r1, [pc, #88]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cc2:	f000 f855 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	490a      	ldr	r1, [pc, #40]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	5ccb      	ldrb	r3, [r1, r3]
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fbc2 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023c00 	.word	0x40023c00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08003d00 	.word	0x08003d00
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000004 	.word	0x20000004

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	08003d10 	.word	0x08003d10

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffdc 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08003d10 	.word	0x08003d10

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b0ae      	sub	sp, #184	; 0xb8
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d96:	4bcb      	ldr	r3, [pc, #812]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	f200 8206 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x440>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_RCC_GetSysClockFreq+0x3c>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	080031b1 	.word	0x080031b1
 8002db4:	080031b1 	.word	0x080031b1
 8002db8:	080031b1 	.word	0x080031b1
 8002dbc:	08002de9 	.word	0x08002de9
 8002dc0:	080031b1 	.word	0x080031b1
 8002dc4:	080031b1 	.word	0x080031b1
 8002dc8:	080031b1 	.word	0x080031b1
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	080031b1 	.word	0x080031b1
 8002dd4:	080031b1 	.word	0x080031b1
 8002dd8:	080031b1 	.word	0x080031b1
 8002ddc:	08002fe1 	.word	0x08002fe1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4bb9      	ldr	r3, [pc, #740]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002de6:	e1e7      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4bb8      	ldr	r3, [pc, #736]	; (80030cc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dee:	e1e3      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df0:	4bb4      	ldr	r3, [pc, #720]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfc:	4bb1      	ldr	r3, [pc, #708]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d071      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e08:	4bae      	ldr	r3, [pc, #696]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e2e:	4622      	mov	r2, r4
 8002e30:	462b      	mov	r3, r5
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e40:	0150      	lsls	r0, r2, #5
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4621      	mov	r1, r4
 8002e48:	1a51      	subs	r1, r2, r1
 8002e4a:	6439      	str	r1, [r7, #64]	; 0x40
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e52:	647b      	str	r3, [r7, #68]	; 0x44
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e60:	4649      	mov	r1, r9
 8002e62:	018b      	lsls	r3, r1, #6
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	018a      	lsls	r2, r1, #6
 8002e6e:	4641      	mov	r1, r8
 8002e70:	1a51      	subs	r1, r2, r1
 8002e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e74:	4649      	mov	r1, r9
 8002e76:	eb63 0301 	sbc.w	r3, r3, r1
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e88:	4649      	mov	r1, r9
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4641      	mov	r1, r8
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	eb42 0303 	adc.w	r3, r2, r3
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eb8:	4629      	mov	r1, r5
 8002eba:	024b      	lsls	r3, r1, #9
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	024a      	lsls	r2, r1, #9
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ed4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002edc:	f7fd fd62 	bl	80009a4 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eea:	e067      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eec:	4b75      	ldr	r3, [pc, #468]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f06:	2300      	movs	r3, #0
 8002f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	0159      	lsls	r1, r3, #5
 8002f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f20:	0150      	lsls	r0, r2, #5
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4621      	mov	r1, r4
 8002f28:	1a51      	subs	r1, r2, r1
 8002f2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f40:	4649      	mov	r1, r9
 8002f42:	018b      	lsls	r3, r1, #6
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	018a      	lsls	r2, r1, #6
 8002f4e:	4641      	mov	r1, r8
 8002f50:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f54:	4649      	mov	r1, r9
 8002f56:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6e:	4692      	mov	sl, r2
 8002f70:	469b      	mov	fp, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	eb1a 0303 	adds.w	r3, sl, r3
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	462b      	mov	r3, r5
 8002f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f8e:	4629      	mov	r1, r5
 8002f90:	028b      	lsls	r3, r1, #10
 8002f92:	4621      	mov	r1, r4
 8002f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f98:	4621      	mov	r1, r4
 8002f9a:	028a      	lsls	r2, r1, #10
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8002fa8:	677a      	str	r2, [r7, #116]	; 0x74
 8002faa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fae:	f7fd fcf9 	bl	80009a4 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fde:	e0eb      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d06b      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	2200      	movs	r2, #0
 8003000:	66bb      	str	r3, [r7, #104]	; 0x68
 8003002:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300a:	663b      	str	r3, [r7, #96]	; 0x60
 800300c:	2300      	movs	r3, #0
 800300e:	667b      	str	r3, [r7, #100]	; 0x64
 8003010:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003014:	4622      	mov	r2, r4
 8003016:	462b      	mov	r3, r5
 8003018:	f04f 0000 	mov.w	r0, #0
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	0159      	lsls	r1, r3, #5
 8003022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003026:	0150      	lsls	r0, r2, #5
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4621      	mov	r1, r4
 800302e:	1a51      	subs	r1, r2, r1
 8003030:	61b9      	str	r1, [r7, #24]
 8003032:	4629      	mov	r1, r5
 8003034:	eb63 0301 	sbc.w	r3, r3, r1
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003046:	4659      	mov	r1, fp
 8003048:	018b      	lsls	r3, r1, #6
 800304a:	4651      	mov	r1, sl
 800304c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003050:	4651      	mov	r1, sl
 8003052:	018a      	lsls	r2, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ebb2 0801 	subs.w	r8, r2, r1
 800305a:	4659      	mov	r1, fp
 800305c:	eb63 0901 	sbc.w	r9, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003070:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003074:	4690      	mov	r8, r2
 8003076:	4699      	mov	r9, r3
 8003078:	4623      	mov	r3, r4
 800307a:	eb18 0303 	adds.w	r3, r8, r3
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	462b      	mov	r3, r5
 8003082:	eb49 0303 	adc.w	r3, r9, r3
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003094:	4629      	mov	r1, r5
 8003096:	024b      	lsls	r3, r1, #9
 8003098:	4621      	mov	r1, r4
 800309a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800309e:	4621      	mov	r1, r4
 80030a0:	024a      	lsls	r2, r1, #9
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030aa:	2200      	movs	r2, #0
 80030ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030b4:	f7fd fc76 	bl	80009a4 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4613      	mov	r3, r2
 80030be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030c2:	e065      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x420>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	2200      	movs	r2, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	4611      	mov	r1, r2
 80030dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
 80030e2:	2300      	movs	r3, #0
 80030e4:	657b      	str	r3, [r7, #84]	; 0x54
 80030e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030ea:	4642      	mov	r2, r8
 80030ec:	464b      	mov	r3, r9
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0159      	lsls	r1, r3, #5
 80030f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fc:	0150      	lsls	r0, r2, #5
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4641      	mov	r1, r8
 8003104:	1a51      	subs	r1, r2, r1
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	4649      	mov	r1, r9
 800310a:	eb63 0301 	sbc.w	r3, r3, r1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800311c:	4659      	mov	r1, fp
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003126:	4651      	mov	r1, sl
 8003128:	018a      	lsls	r2, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	1a54      	subs	r4, r2, r1
 800312e:	4659      	mov	r1, fp
 8003130:	eb63 0501 	sbc.w	r5, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	00eb      	lsls	r3, r5, #3
 800313e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003142:	00e2      	lsls	r2, r4, #3
 8003144:	4614      	mov	r4, r2
 8003146:	461d      	mov	r5, r3
 8003148:	4643      	mov	r3, r8
 800314a:	18e3      	adds	r3, r4, r3
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	464b      	mov	r3, r9
 8003150:	eb45 0303 	adc.w	r3, r5, r3
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003162:	4629      	mov	r1, r5
 8003164:	028b      	lsls	r3, r1, #10
 8003166:	4621      	mov	r1, r4
 8003168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800316c:	4621      	mov	r1, r4
 800316e:	028a      	lsls	r2, r1, #10
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003178:	2200      	movs	r2, #0
 800317a:	64bb      	str	r3, [r7, #72]	; 0x48
 800317c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800317e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003182:	f7fd fc0f 	bl	80009a4 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4613      	mov	r3, r2
 800318c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0f1b      	lsrs	r3, r3, #28
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800319e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ae:	e003      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80031b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	37b8      	adds	r7, #184	; 0xb8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	00f42400 	.word	0x00f42400

080031d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e28d      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8083 	beq.w	80032f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031f0:	4b94      	ldr	r3, [pc, #592]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d019      	beq.n	8003230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031fc:	4b91      	ldr	r3, [pc, #580]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003204:	2b08      	cmp	r3, #8
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003208:	4b8e      	ldr	r3, [pc, #568]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003214:	d00c      	beq.n	8003230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b8b      	ldr	r3, [pc, #556]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d112      	bne.n	8003248 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322e:	d10b      	bne.n	8003248 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	4b84      	ldr	r3, [pc, #528]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05b      	beq.n	80032f4 <HAL_RCC_OscConfig+0x124>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d157      	bne.n	80032f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e25a      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x90>
 8003252:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7b      	ldr	r2, [pc, #492]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xcc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0xb4>
 800326a:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a72      	ldr	r2, [pc, #456]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xcc>
 8003284:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b6c      	ldr	r3, [pc, #432]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6b      	ldr	r2, [pc, #428]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe f926 	bl	80014f4 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe f922 	bl	80014f4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e21f      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xdc>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe f912 	bl	80014f4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe f90e 	bl	80014f4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e20b      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x104>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06f      	beq.n	80033e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003302:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d017      	beq.n	800333e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800330e:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800331a:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x186>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1d3      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4937      	ldr	r1, [pc, #220]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x278>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe f8bb 	bl	80014f4 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe f8b7 	bl	80014f4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1b4      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4925      	ldr	r1, [pc, #148]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x278>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe f89a 	bl	80014f4 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe f896 	bl	80014f4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e193      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCC_OscConfig+0x27c>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe f87a 	bl	80014f4 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe f876 	bl	80014f4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e173      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x234>
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_OscConfig+0x27c>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe f863 	bl	80014f4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe f85f 	bl	80014f4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d907      	bls.n	8003450 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e15c      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b8a      	ldr	r3, [pc, #552]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ea      	bne.n	8003432 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b83      	ldr	r3, [pc, #524]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b7f      	ldr	r3, [pc, #508]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a7e      	ldr	r2, [pc, #504]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b7c      	ldr	r3, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b79      	ldr	r3, [pc, #484]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a75      	ldr	r2, [pc, #468]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f81f 	bl	80014f4 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe f81b 	bl	80014f4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e118      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x31e>
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x358>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x340>
 80034f6:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b5e      	ldr	r3, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x358>
 8003510:	4b5a      	ldr	r3, [pc, #360]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a59      	ldr	r2, [pc, #356]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	4b57      	ldr	r3, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a56      	ldr	r2, [pc, #344]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fd ffe0 	bl	80014f4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fd ffdc 	bl	80014f4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0d7      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x368>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fd ffca 	bl	80014f4 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fd ffc6 	bl	80014f4 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0c1      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a3a      	ldr	r2, [pc, #232]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ad 	beq.w	80036fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d060      	beq.n	8003670 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d145      	bne.n	8003642 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x4b4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd ff9a 	bl	80014f4 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd ff96 	bl	80014f4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e093      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	491b      	ldr	r1, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4b4>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fd ff6b 	bl	80014f4 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fd ff67 	bl	80014f4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e064      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x452>
 8003640:	e05c      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_OscConfig+0x4b4>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd ff54 	bl	80014f4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd ff50 	bl	80014f4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04d      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x480>
 800366e:	e045      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e040      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_RCC_OscConfig+0x538>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d030      	beq.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d129      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d122      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d119      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10f      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e03f      	b.n	800379e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fdc2 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	; 0x24
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f829 	bl	80037a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b0c0      	sub	sp, #256	; 0x100
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	68d9      	ldr	r1, [r3, #12]
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	ea40 0301 	orr.w	r3, r0, r1
 80037d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003800:	f021 010c 	bic.w	r1, r1, #12
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800380e:	430b      	orrs	r3, r1
 8003810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003822:	6999      	ldr	r1, [r3, #24]
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	ea40 0301 	orr.w	r3, r0, r1
 800382e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <UART_SetConfig+0x2cc>)
 8003838:	429a      	cmp	r2, r3
 800383a:	d005      	beq.n	8003848 <UART_SetConfig+0xa0>
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b8d      	ldr	r3, [pc, #564]	; (8003a78 <UART_SetConfig+0x2d0>)
 8003844:	429a      	cmp	r2, r3
 8003846:	d104      	bne.n	8003852 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003848:	f7ff fa7e 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 800384c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003850:	e003      	b.n	800385a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003852:	f7ff fa65 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8003856:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	f040 810c 	bne.w	8003a80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800386c:	2200      	movs	r2, #0
 800386e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003872:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003876:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800387a:	4622      	mov	r2, r4
 800387c:	462b      	mov	r3, r5
 800387e:	1891      	adds	r1, r2, r2
 8003880:	65b9      	str	r1, [r7, #88]	; 0x58
 8003882:	415b      	adcs	r3, r3
 8003884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003886:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800388a:	4621      	mov	r1, r4
 800388c:	eb12 0801 	adds.w	r8, r2, r1
 8003890:	4629      	mov	r1, r5
 8003892:	eb43 0901 	adc.w	r9, r3, r1
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038aa:	4690      	mov	r8, r2
 80038ac:	4699      	mov	r9, r3
 80038ae:	4623      	mov	r3, r4
 80038b0:	eb18 0303 	adds.w	r3, r8, r3
 80038b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038b8:	462b      	mov	r3, r5
 80038ba:	eb49 0303 	adc.w	r3, r9, r3
 80038be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038d6:	460b      	mov	r3, r1
 80038d8:	18db      	adds	r3, r3, r3
 80038da:	653b      	str	r3, [r7, #80]	; 0x50
 80038dc:	4613      	mov	r3, r2
 80038de:	eb42 0303 	adc.w	r3, r2, r3
 80038e2:	657b      	str	r3, [r7, #84]	; 0x54
 80038e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038ec:	f7fd f85a 	bl	80009a4 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <UART_SetConfig+0x2d4>)
 80038f6:	fba3 2302 	umull	r2, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	011c      	lsls	r4, r3, #4
 80038fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003902:	2200      	movs	r2, #0
 8003904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003908:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800390c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003910:	4642      	mov	r2, r8
 8003912:	464b      	mov	r3, r9
 8003914:	1891      	adds	r1, r2, r2
 8003916:	64b9      	str	r1, [r7, #72]	; 0x48
 8003918:	415b      	adcs	r3, r3
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003920:	4641      	mov	r1, r8
 8003922:	eb12 0a01 	adds.w	sl, r2, r1
 8003926:	4649      	mov	r1, r9
 8003928:	eb43 0b01 	adc.w	fp, r3, r1
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003938:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800393c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003940:	4692      	mov	sl, r2
 8003942:	469b      	mov	fp, r3
 8003944:	4643      	mov	r3, r8
 8003946:	eb1a 0303 	adds.w	r3, sl, r3
 800394a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800394e:	464b      	mov	r3, r9
 8003950:	eb4b 0303 	adc.w	r3, fp, r3
 8003954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003964:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003968:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800396c:	460b      	mov	r3, r1
 800396e:	18db      	adds	r3, r3, r3
 8003970:	643b      	str	r3, [r7, #64]	; 0x40
 8003972:	4613      	mov	r3, r2
 8003974:	eb42 0303 	adc.w	r3, r2, r3
 8003978:	647b      	str	r3, [r7, #68]	; 0x44
 800397a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800397e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003982:	f7fd f80f 	bl	80009a4 <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4611      	mov	r1, r2
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <UART_SetConfig+0x2d4>)
 800398e:	fba3 2301 	umull	r2, r3, r3, r1
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2264      	movs	r2, #100	; 0x64
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	1acb      	subs	r3, r1, r3
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <UART_SetConfig+0x2d4>)
 80039a4:	fba3 2302 	umull	r2, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b0:	441c      	add	r4, r3
 80039b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039c4:	4642      	mov	r2, r8
 80039c6:	464b      	mov	r3, r9
 80039c8:	1891      	adds	r1, r2, r2
 80039ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80039cc:	415b      	adcs	r3, r3
 80039ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d4:	4641      	mov	r1, r8
 80039d6:	1851      	adds	r1, r2, r1
 80039d8:	6339      	str	r1, [r7, #48]	; 0x30
 80039da:	4649      	mov	r1, r9
 80039dc:	414b      	adcs	r3, r1
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039ec:	4659      	mov	r1, fp
 80039ee:	00cb      	lsls	r3, r1, #3
 80039f0:	4651      	mov	r1, sl
 80039f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f6:	4651      	mov	r1, sl
 80039f8:	00ca      	lsls	r2, r1, #3
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	4642      	mov	r2, r8
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a08:	464b      	mov	r3, r9
 8003a0a:	460a      	mov	r2, r1
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a28:	460b      	mov	r3, r1
 8003a2a:	18db      	adds	r3, r3, r3
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	4613      	mov	r3, r2
 8003a30:	eb42 0303 	adc.w	r3, r2, r3
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a3e:	f7fc ffb1 	bl	80009a4 <__aeabi_uldivmod>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <UART_SetConfig+0x2d4>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	2164      	movs	r1, #100	; 0x64
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	3332      	adds	r3, #50	; 0x32
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <UART_SetConfig+0x2d4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 0207 	and.w	r2, r3, #7
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4422      	add	r2, r4
 8003a6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a70:	e105      	b.n	8003c7e <UART_SetConfig+0x4d6>
 8003a72:	bf00      	nop
 8003a74:	40011000 	.word	0x40011000
 8003a78:	40011400 	.word	0x40011400
 8003a7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a92:	4642      	mov	r2, r8
 8003a94:	464b      	mov	r3, r9
 8003a96:	1891      	adds	r1, r2, r2
 8003a98:	6239      	str	r1, [r7, #32]
 8003a9a:	415b      	adcs	r3, r3
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	1854      	adds	r4, r2, r1
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	eb43 0501 	adc.w	r5, r3, r1
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	00eb      	lsls	r3, r5, #3
 8003ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aba:	00e2      	lsls	r2, r4, #3
 8003abc:	4614      	mov	r4, r2
 8003abe:	461d      	mov	r5, r3
 8003ac0:	4643      	mov	r3, r8
 8003ac2:	18e3      	adds	r3, r4, r3
 8003ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ac8:	464b      	mov	r3, r9
 8003aca:	eb45 0303 	adc.w	r3, r5, r3
 8003ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aee:	4629      	mov	r1, r5
 8003af0:	008b      	lsls	r3, r1, #2
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af8:	4621      	mov	r1, r4
 8003afa:	008a      	lsls	r2, r1, #2
 8003afc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b00:	f7fc ff50 	bl	80009a4 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4b60      	ldr	r3, [pc, #384]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	011c      	lsls	r4, r3, #4
 8003b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	61b9      	str	r1, [r7, #24]
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b34:	4641      	mov	r1, r8
 8003b36:	1851      	adds	r1, r2, r1
 8003b38:	6139      	str	r1, [r7, #16]
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	00cb      	lsls	r3, r1, #3
 8003b50:	4651      	mov	r1, sl
 8003b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b56:	4651      	mov	r1, sl
 8003b58:	00ca      	lsls	r2, r1, #3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4642      	mov	r2, r8
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b68:	464b      	mov	r3, r9
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	008b      	lsls	r3, r1, #2
 8003b90:	4641      	mov	r1, r8
 8003b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b96:	4641      	mov	r1, r8
 8003b98:	008a      	lsls	r2, r1, #2
 8003b9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b9e:	f7fc ff01 	bl	80009a4 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	3332      	adds	r3, #50	; 0x32
 8003bba:	4a34      	ldr	r2, [pc, #208]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc6:	441c      	add	r4, r3
 8003bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bcc:	2200      	movs	r2, #0
 8003bce:	673b      	str	r3, [r7, #112]	; 0x70
 8003bd0:	677a      	str	r2, [r7, #116]	; 0x74
 8003bd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	464b      	mov	r3, r9
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	415b      	adcs	r3, r3
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be6:	4641      	mov	r1, r8
 8003be8:	1851      	adds	r1, r2, r1
 8003bea:	6039      	str	r1, [r7, #0]
 8003bec:	4649      	mov	r1, r9
 8003bee:	414b      	adcs	r3, r1
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bfe:	4659      	mov	r1, fp
 8003c00:	00cb      	lsls	r3, r1, #3
 8003c02:	4651      	mov	r1, sl
 8003c04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c08:	4651      	mov	r1, sl
 8003c0a:	00ca      	lsls	r2, r1, #3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4603      	mov	r3, r0
 8003c12:	4642      	mov	r2, r8
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c18:	464b      	mov	r3, r9
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c2c:	667a      	str	r2, [r7, #100]	; 0x64
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	008b      	lsls	r3, r1, #2
 8003c3e:	4641      	mov	r1, r8
 8003c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c44:	4641      	mov	r1, r8
 8003c46:	008a      	lsls	r2, r1, #2
 8003c48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c4c:	f7fc feaa 	bl	80009a4 <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003c56:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2164      	movs	r1, #100	; 0x64
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	3332      	adds	r3, #50	; 0x32
 8003c68:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <UART_SetConfig+0x4e4>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4422      	add	r2, r4
 8003c7c:	609a      	str	r2, [r3, #8]
}
 8003c7e:	bf00      	nop
 8003c80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	51eb851f 	.word	0x51eb851f

08003c90 <__libc_init_array>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	4d0d      	ldr	r5, [pc, #52]	; (8003cc8 <__libc_init_array+0x38>)
 8003c94:	4c0d      	ldr	r4, [pc, #52]	; (8003ccc <__libc_init_array+0x3c>)
 8003c96:	1b64      	subs	r4, r4, r5
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	2600      	movs	r6, #0
 8003c9c:	42a6      	cmp	r6, r4
 8003c9e:	d109      	bne.n	8003cb4 <__libc_init_array+0x24>
 8003ca0:	4d0b      	ldr	r5, [pc, #44]	; (8003cd0 <__libc_init_array+0x40>)
 8003ca2:	4c0c      	ldr	r4, [pc, #48]	; (8003cd4 <__libc_init_array+0x44>)
 8003ca4:	f000 f820 	bl	8003ce8 <_init>
 8003ca8:	1b64      	subs	r4, r4, r5
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	2600      	movs	r6, #0
 8003cae:	42a6      	cmp	r6, r4
 8003cb0:	d105      	bne.n	8003cbe <__libc_init_array+0x2e>
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb8:	4798      	blx	r3
 8003cba:	3601      	adds	r6, #1
 8003cbc:	e7ee      	b.n	8003c9c <__libc_init_array+0xc>
 8003cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc2:	4798      	blx	r3
 8003cc4:	3601      	adds	r6, #1
 8003cc6:	e7f2      	b.n	8003cae <__libc_init_array+0x1e>
 8003cc8:	08003d20 	.word	0x08003d20
 8003ccc:	08003d20 	.word	0x08003d20
 8003cd0:	08003d20 	.word	0x08003d20
 8003cd4:	08003d24 	.word	0x08003d24

08003cd8 <memset>:
 8003cd8:	4402      	add	r2, r0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d100      	bne.n	8003ce2 <memset+0xa>
 8003ce0:	4770      	bx	lr
 8003ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce6:	e7f9      	b.n	8003cdc <memset+0x4>

08003ce8 <_init>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr

08003cf4 <_fini>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr
