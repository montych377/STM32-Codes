
Timer_L412KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002078  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002244  08002244  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002244  08002244  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002244  08002244  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800224c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002258  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002258  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a245  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173d  00000000  00000000  0002a281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b2a  00000000  00000000  0002cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeea  00000000  00000000  000459f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb37  00000000  00000000  000508dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce4  00000000  00000000  000f0464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080021ec 	.word	0x080021ec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080021ec 	.word	0x080021ec

080001cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80001d4:	2108      	movs	r1, #8
 80001d6:	4803      	ldr	r0, [pc, #12]	; (80001e4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80001d8:	f000 fcd2 	bl	8000b80 <HAL_GPIO_TogglePin>
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	48000400 	.word	0x48000400

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f000 f9b7 	bl	800055e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f0:	f000 f805 	bl	80001fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f4:	f000 f8aa 	bl	800034c <MX_GPIO_Init>
  MX_TIM1_Init();
 80001f8:	f000 f850 	bl	800029c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x14>

080001fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b096      	sub	sp, #88	; 0x58
 8000202:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2244      	movs	r2, #68	; 0x44
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f001 ffe5 	bl	80021dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000212:	463b      	mov	r3, r7
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000224:	f000 fcd4 	bl	8000bd0 <HAL_PWREx_ControlVoltageScaling>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800022e:	f000 f8d7 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800023a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800023c:	2310      	movs	r3, #16
 800023e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000244:	2302      	movs	r3, #2
 8000246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000248:	2301      	movs	r3, #1
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 800024c:	230a      	movs	r3, #10
 800024e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000250:	2302      	movs	r3, #2
 8000252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000254:	2302      	movs	r3, #2
 8000256:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fd0d 	bl	8000c7c <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000268:	f000 f8ba 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2303      	movs	r3, #3
 8000272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	2104      	movs	r1, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f95b 	bl	8001540 <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000290:	f000 f8a6 	bl	80003e0 <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3758      	adds	r7, #88	; 0x58
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002bc:	4a22      	ldr	r2, [pc, #136]	; (8000348 <MX_TIM1_Init+0xac>)
 80002be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80002d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d6:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002e8:	4816      	ldr	r0, [pc, #88]	; (8000344 <MX_TIM1_Init+0xa8>)
 80002ea:	f001 fb15 	bl	8001918 <HAL_TIM_Base_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80002f4:	f000 f874 	bl	80003e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	4619      	mov	r1, r3
 8000304:	480f      	ldr	r0, [pc, #60]	; (8000344 <MX_TIM1_Init+0xa8>)
 8000306:	f001 fcd2 	bl	8001cae <HAL_TIM_ConfigClockSource>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000310:	f000 f866 	bl	80003e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000314:	2300      	movs	r3, #0
 8000316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000318:	2300      	movs	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4619      	mov	r1, r3
 8000324:	4807      	ldr	r0, [pc, #28]	; (8000344 <MX_TIM1_Init+0xa8>)
 8000326:	f001 feb1 	bl	800208c <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000330:	f000 f856 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <MX_TIM1_Init+0xa8>)
 8000336:	f001 fb47 	bl	80019c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000028 	.word	0x20000028
 8000348:	40012c00 	.word	0x40012c00

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
 8000360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0304 	and.w	r3, r3, #4
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_GPIO_Init+0x8c>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	4a16      	ldr	r2, [pc, #88]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000398:	f043 0302 	orr.w	r3, r3, #2
 800039c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_GPIO_Init+0x8c>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2108      	movs	r1, #8
 80003ae:	480b      	ldr	r0, [pc, #44]	; (80003dc <MX_GPIO_Init+0x90>)
 80003b0:	f000 fbce 	bl	8000b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80003b4:	2308      	movs	r3, #8
 80003b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 030c 	add.w	r3, r7, #12
 80003c8:	4619      	mov	r1, r3
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x90>)
 80003cc:	f000 fa4e 	bl	800086c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000400 	.word	0x48000400

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	; 0x60
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	; 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <HAL_TIM_Base_MspInit+0x44>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d113      	bne.n	800046e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 8000448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044a:	4a0c      	ldr	r2, [pc, #48]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 800044c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000450:	6613      	str	r3, [r2, #96]	; 0x60
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 8000454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2019      	movs	r0, #25
 8000464:	f000 f9cb 	bl	80007fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000468:	2019      	movs	r0, #25
 800046a:	f000 f9e4 	bl	8000836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40012c00 	.word	0x40012c00
 800047c:	40021000 	.word	0x40021000

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <NMI_Handler+0x4>

08000486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <MemManage_Handler+0x4>

08000492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <UsageFault_Handler+0x4>

0800049e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004cc:	f000 f89c 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80004da:	f001 fac9 	bl	8001a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000028 	.word	0x20000028

080004e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <SystemInit+0x20>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <SystemInit+0x20>)
 80004f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800050c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000544 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000510:	f7ff ffea 	bl	80004e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	; (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	; (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800053a:	f001 fe2b 	bl	8002194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053e:	f7ff fe53 	bl	80001e8 <main>

08000542 <LoopForever>:

LoopForever:
    b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000544:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000550:	0800224c 	.word	0x0800224c
  ldr r2, =_sbss
 8000554:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000558:	20000078 	.word	0x20000078

0800055c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_2_IRQHandler>

0800055e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000564:	2300      	movs	r3, #0
 8000566:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f93d 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800056e:	2000      	movs	r0, #0
 8000570:	f000 f80e 	bl	8000590 <HAL_InitTick>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	e001      	b.n	8000584 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000580:	f7ff ff34 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000584:	79fb      	ldrb	r3, [r7, #7]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_InitTick+0x6c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d023      	beq.n	80005ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_InitTick+0x70>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_InitTick+0x6c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f949 	bl	8000852 <HAL_SYSTICK_Config>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10f      	bne.n	80005e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d809      	bhi.n	80005e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005cc:	2200      	movs	r2, #0
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295
 80005d4:	f000 f913 	bl	80007fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <HAL_InitTick+0x74>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	e007      	b.n	80005f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e004      	b.n	80005f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e001      	b.n	80005f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x20>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_IncTick+0x24>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_IncTick+0x24>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000008 	.word	0x20000008
 800062c:	20000074 	.word	0x20000074

08000630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_GetTick+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000074 	.word	0x20000074

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f7ff ff8e 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff29 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff3e 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff8e 	bl	800073c <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5d 	bl	80006e8 <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff31 	bl	80006ac <__NVIC_EnableIRQ>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffa2 	bl	80007a4 <SysTick_Config>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087a:	e14e      	b.n	8000b1a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	2101      	movs	r1, #1
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 8140 	beq.w	8000b14 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	2b01      	cmp	r3, #1
 800089e:	d005      	beq.n	80008ac <HAL_GPIO_Init+0x40>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 0303 	and.w	r3, r3, #3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d130      	bne.n	800090e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e2:	2201      	movs	r2, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	f003 0201 	and.w	r2, r3, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b03      	cmp	r3, #3
 8000918:	d017      	beq.n	800094a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d123      	bne.n	800099e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	08da      	lsrs	r2, r3, #3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3208      	adds	r2, #8
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	220f      	movs	r2, #15
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	691a      	ldr	r2, [r3, #16]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	6939      	ldr	r1, [r7, #16]
 800099a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0203 	and.w	r2, r3, #3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 809a 	beq.w	8000b14 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e0:	4b55      	ldr	r3, [pc, #340]	; (8000b38 <HAL_GPIO_Init+0x2cc>)
 80009e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e4:	4a54      	ldr	r2, [pc, #336]	; (8000b38 <HAL_GPIO_Init+0x2cc>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6613      	str	r3, [r2, #96]	; 0x60
 80009ec:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <HAL_GPIO_Init+0x2cc>)
 80009ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f8:	4a50      	ldr	r2, [pc, #320]	; (8000b3c <HAL_GPIO_Init+0x2d0>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a22:	d013      	beq.n	8000a4c <HAL_GPIO_Init+0x1e0>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a46      	ldr	r2, [pc, #280]	; (8000b40 <HAL_GPIO_Init+0x2d4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d00d      	beq.n	8000a48 <HAL_GPIO_Init+0x1dc>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a45      	ldr	r2, [pc, #276]	; (8000b44 <HAL_GPIO_Init+0x2d8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d007      	beq.n	8000a44 <HAL_GPIO_Init+0x1d8>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a44      	ldr	r2, [pc, #272]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d101      	bne.n	8000a40 <HAL_GPIO_Init+0x1d4>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e006      	b.n	8000a4e <HAL_GPIO_Init+0x1e2>
 8000a40:	2307      	movs	r3, #7
 8000a42:	e004      	b.n	8000a4e <HAL_GPIO_Init+0x1e2>
 8000a44:	2302      	movs	r3, #2
 8000a46:	e002      	b.n	8000a4e <HAL_GPIO_Init+0x1e2>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <HAL_GPIO_Init+0x1e2>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	f002 0203 	and.w	r2, r2, #3
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	4093      	lsls	r3, r2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a5e:	4937      	ldr	r1, [pc, #220]	; (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a6c:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a90:	4a2e      	ldr	r2, [pc, #184]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aba:	4a24      	ldr	r2, [pc, #144]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_GPIO_Init+0x2e0>)
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3301      	adds	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa22 f303 	lsr.w	r3, r2, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f47f aea9 	bne.w	800087c <HAL_GPIO_Init+0x10>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	371c      	adds	r7, #28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800
 8000b48:	48000c00 	.word	0x48000c00
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b60:	787b      	ldrb	r3, [r7, #1]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b6c:	e002      	b.n	8000b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4013      	ands	r3, r2
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43d9      	mvns	r1, r3
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_PWREx_GetVoltageRange+0x18>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d130      	bne.n	8000c42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bec:	d038      	beq.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2232      	movs	r2, #50	; 0x32
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c14:	e002      	b.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c28:	d102      	bne.n	8000c30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f2      	bne.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3c:	d110      	bne.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e00f      	b.n	8000c62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4e:	d007      	beq.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40007000 	.word	0x40007000
 8000c74:	20000000 	.word	0x20000000
 8000c78:	431bde83 	.word	0x431bde83

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f000 bc4f 	b.w	800152e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c90:	4b97      	ldr	r3, [pc, #604]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c9a:	4b95      	ldr	r3, [pc, #596]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 80e6 	beq.w	8000e7e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d007      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x4c>
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	2b0c      	cmp	r3, #12
 8000cbc:	f040 808d 	bne.w	8000dda <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	f040 8089 	bne.w	8000dda <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cc8:	4b89      	ldr	r3, [pc, #548]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x66>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f000 bc26 	b.w	800152e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce6:	4b82      	ldr	r3, [pc, #520]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d004      	beq.n	8000cfc <HAL_RCC_OscConfig+0x80>
 8000cf2:	4b7f      	ldr	r3, [pc, #508]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cfa:	e005      	b.n	8000d08 <HAL_RCC_OscConfig+0x8c>
 8000cfc:	4b7c      	ldr	r3, [pc, #496]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d02:	091b      	lsrs	r3, r3, #4
 8000d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d224      	bcs.n	8000d56 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fda1 	bl	8001858 <RCC_SetFlashLatencyFromMSIRange>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f000 bc06 	b.w	800152e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d22:	4b73      	ldr	r3, [pc, #460]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a72      	ldr	r2, [pc, #456]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b70      	ldr	r3, [pc, #448]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	496d      	ldr	r1, [pc, #436]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d40:	4b6b      	ldr	r3, [pc, #428]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4968      	ldr	r1, [pc, #416]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e025      	b.n	8000da2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d56:	4b66      	ldr	r3, [pc, #408]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a65      	ldr	r2, [pc, #404]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b63      	ldr	r3, [pc, #396]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	4960      	ldr	r1, [pc, #384]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d74:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	495b      	ldr	r1, [pc, #364]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d109      	bne.n	8000da2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fd60 	bl	8001858 <RCC_SetFlashLatencyFromMSIRange>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e3c5      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000da2:	f000 fccd 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 8000da6:	4602      	mov	r2, r0
 8000da8:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4950      	ldr	r1, [pc, #320]	; (8000ef4 <HAL_RCC_OscConfig+0x278>)
 8000db4:	5ccb      	ldrb	r3, [r1, r3]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbe:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dc2:	4b4e      	ldr	r3, [pc, #312]	; (8000efc <HAL_RCC_OscConfig+0x280>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fbe2 	bl	8000590 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d052      	beq.n	8000e7c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	e3a9      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d032      	beq.n	8000e48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000de2:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fc1f 	bl	8000630 <HAL_GetTick>
 8000df2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df6:	f7ff fc1b 	bl	8000630 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e392      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	4930      	ldr	r1, [pc, #192]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	492b      	ldr	r1, [pc, #172]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	604b      	str	r3, [r1, #4]
 8000e46:	e01a      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fbec 	bl	8000630 <HAL_GetTick>
 8000e58:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fbe8 	bl	8000630 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e35f      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x1e0>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d073      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d005      	beq.n	8000e9c <HAL_RCC_OscConfig+0x220>
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	2b0c      	cmp	r3, #12
 8000e94:	d10e      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d063      	beq.n	8000f70 <HAL_RCC_OscConfig+0x2f4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d15f      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e33c      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d106      	bne.n	8000ecc <HAL_RCC_OscConfig+0x250>
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e025      	b.n	8000f18 <HAL_RCC_OscConfig+0x29c>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	d114      	bne.n	8000f00 <HAL_RCC_OscConfig+0x284>
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a02      	ldr	r2, [pc, #8]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e013      	b.n	8000f18 <HAL_RCC_OscConfig+0x29c>
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	08002204 	.word	0x08002204
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004
 8000f00:	4b8f      	ldr	r3, [pc, #572]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a8e      	ldr	r2, [pc, #568]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b8c      	ldr	r3, [pc, #560]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a8b      	ldr	r2, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f20:	f7ff fb86 	bl	8000630 <HAL_GetTick>
 8000f24:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fb82 	bl	8000630 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e2f9      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2ac>
 8000f46:	e014      	b.n	8000f72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fb72 	bl	8000630 <HAL_GetTick>
 8000f4c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fb6e 	bl	8000630 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	; 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e2e5      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f62:	4b77      	ldr	r3, [pc, #476]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2d4>
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d060      	beq.n	8001040 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_OscConfig+0x314>
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b0c      	cmp	r3, #12
 8000f88:	d119      	bne.n	8000fbe <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d116      	bne.n	8000fbe <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f90:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x32c>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e2c2      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b65      	ldr	r3, [pc, #404]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	061b      	lsls	r3, r3, #24
 8000fb6:	4962      	ldr	r1, [pc, #392]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fbc:	e040      	b.n	8001040 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d023      	beq.n	800100e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc6:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb2d 	bl	8000630 <HAL_GetTick>
 8000fd6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fb29 	bl	8000630 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e2a0      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fec:	4b54      	ldr	r3, [pc, #336]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff8:	4b51      	ldr	r3, [pc, #324]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	061b      	lsls	r3, r3, #24
 8001006:	494e      	ldr	r1, [pc, #312]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	4313      	orrs	r3, r2
 800100a:	604b      	str	r3, [r1, #4]
 800100c:	e018      	b.n	8001040 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100e:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101a:	f7ff fb09 	bl	8000630 <HAL_GetTick>
 800101e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff fb05 	bl	8000630 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e27c      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001034:	4b42      	ldr	r3, [pc, #264]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f0      	bne.n	8001022 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 8082 	beq.w	8001152 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d05f      	beq.n	8001116 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699a      	ldr	r2, [r3, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	429a      	cmp	r2, r3
 800106a:	d037      	beq.n	80010dc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e254      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d01b      	beq.n	80010c6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001094:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800109e:	f7ff fac7 	bl	8000630 <HAL_GetTick>
 80010a2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a6:	f7ff fac3 	bl	8000630 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b11      	cmp	r3, #17
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e23a      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ef      	bne.n	80010a6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010cc:	f023 0210 	bic.w	r2, r3, #16
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	491a      	ldr	r1, [pc, #104]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ec:	f7ff faa0 	bl	8000630 <HAL_GetTick>
 80010f0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f4:	f7ff fa9c 	bl	8000630 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b11      	cmp	r3, #17
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e213      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0ef      	beq.n	80010f4 <HAL_RCC_OscConfig+0x478>
 8001114:	e01d      	b.n	8001152 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001126:	f7ff fa83 	bl	8000630 <HAL_GetTick>
 800112a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800112c:	e00a      	b.n	8001144 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fa7f 	bl	8000630 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b11      	cmp	r3, #17
 800113a:	d903      	bls.n	8001144 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1f6      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
 8001140:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001144:	4ba9      	ldr	r3, [pc, #676]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1ed      	bne.n	800112e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80bd 	beq.w	80012da <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001166:	4ba1      	ldr	r3, [pc, #644]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10e      	bne.n	8001190 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b9e      	ldr	r3, [pc, #632]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	4a9d      	ldr	r2, [pc, #628]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6593      	str	r3, [r2, #88]	; 0x58
 800117e:	4b9b      	ldr	r3, [pc, #620]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800118a:	2301      	movs	r3, #1
 800118c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001190:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <HAL_RCC_OscConfig+0x774>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d118      	bne.n	80011ce <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800119c:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_RCC_OscConfig+0x774>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a93      	ldr	r2, [pc, #588]	; (80013f0 <HAL_RCC_OscConfig+0x774>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fa42 	bl	8000630 <HAL_GetTick>
 80011ac:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b0:	f7ff fa3e 	bl	8000630 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1b5      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c2:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <HAL_RCC_OscConfig+0x774>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d02c      	beq.n	8001234 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80011da:	4b84      	ldr	r3, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80011dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ec:	497f      	ldr	r1, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d010      	beq.n	8001222 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001200:	4b7a      	ldr	r3, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001206:	4a79      	ldr	r2, [pc, #484]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001216:	4a75      	ldr	r2, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001220:	e018      	b.n	8001254 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001228:	4a70      	ldr	r2, [pc, #448]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001232:	e00f      	b.n	8001254 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001234:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a6c      	ldr	r2, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001244:	4b69      	ldr	r3, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	4a68      	ldr	r2, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d016      	beq.n	800128a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff f9e8 	bl	8000630 <HAL_GetTick>
 8001260:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff f9e4 	bl	8000630 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e159      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 800127c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0ed      	beq.n	8001264 <HAL_RCC_OscConfig+0x5e8>
 8001288:	e01d      	b.n	80012c6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128a:	f7ff f9d1 	bl	8000630 <HAL_GetTick>
 800128e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff f9cd 	bl	8000630 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e142      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ed      	bne.n	8001292 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80012b6:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80012b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80012be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	4a46      	ldr	r2, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0320 	and.w	r3, r3, #32
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d03c      	beq.n	8001360 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01c      	beq.n	8001328 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80012f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012f4:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff f997 	bl	8000630 <HAL_GetTick>
 8001302:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001306:	f7ff f993 	bl	8000630 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e10a      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 800131a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ef      	beq.n	8001306 <HAL_RCC_OscConfig+0x68a>
 8001326:	e01b      	b.n	8001360 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 800132a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff f97a 	bl	8000630 <HAL_GetTick>
 800133c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001340:	f7ff f976 	bl	8000630 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0ed      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001354:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1ef      	bne.n	8001340 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80e1 	beq.w	800152c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	2b02      	cmp	r3, #2
 8001370:	f040 80b5 	bne.w	80014de <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0203 	and.w	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	429a      	cmp	r2, r3
 8001386:	d124      	bne.n	80013d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	3b01      	subs	r3, #1
 8001394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d11b      	bne.n	80013d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d113      	bne.n	80013d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	3b01      	subs	r3, #1
 80013b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d109      	bne.n	80013d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	085b      	lsrs	r3, r3, #1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d05f      	beq.n	8001492 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d05a      	beq.n	800148e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_OscConfig+0x770>)
 80013de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e4:	f7ff f924 	bl	8000630 <HAL_GetTick>
 80013e8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ea:	e00c      	b.n	8001406 <HAL_RCC_OscConfig+0x78a>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff f91c 	bl	8000630 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e093      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001406:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_RCC_OscConfig+0x8c0>)
 8001418:	4013      	ands	r3, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001422:	3a01      	subs	r2, #1
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800142c:	0212      	lsls	r2, r2, #8
 800142e:	4311      	orrs	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001434:	0852      	lsrs	r2, r2, #1
 8001436:	3a01      	subs	r2, #1
 8001438:	0552      	lsls	r2, r2, #21
 800143a:	4311      	orrs	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001440:	0852      	lsrs	r2, r2, #1
 8001442:	3a01      	subs	r2, #1
 8001444:	0652      	lsls	r2, r2, #25
 8001446:	430a      	orrs	r2, r1
 8001448:	493b      	ldr	r1, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 800144a:	4313      	orrs	r3, r2
 800144c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a39      	ldr	r2, [pc, #228]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001458:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4a36      	ldr	r2, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001464:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001466:	f7ff f8e3 	bl	8000630 <HAL_GetTick>
 800146a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff f8df 	bl	8000630 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e056      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800148c:	e04e      	b.n	800152c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e04d      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d146      	bne.n	800152c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 80014a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 80014b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014b6:	f7ff f8bb 	bl	8000630 <HAL_GetTick>
 80014ba:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff f8b7 	bl	8000630 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e02e      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x842>
 80014dc:	e026      	b.n	800152c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d021      	beq.n	8001528 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 80014ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff f89e 	bl	8000630 <HAL_GetTick>
 80014f4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff f89a 	bl	8000630 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e011      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_RCC_OscConfig+0x8bc>)
 800151c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001520:	f023 0303 	bic.w	r3, r3, #3
 8001524:	60d3      	str	r3, [r2, #12]
 8001526:	e001      	b.n	800152c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	f99f808c 	.word	0xf99f808c

08001540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0e7      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d910      	bls.n	8001584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b72      	ldr	r3, [pc, #456]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4970      	ldr	r1, [pc, #448]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b6e      	ldr	r3, [pc, #440]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0cf      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d010      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b66      	ldr	r3, [pc, #408]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800159c:	429a      	cmp	r2, r3
 800159e:	d908      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4960      	ldr	r1, [pc, #384]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d04c      	beq.n	8001658 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c6:	4b5a      	ldr	r3, [pc, #360]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d121      	bne.n	8001616 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0a6      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015de:	4b54      	ldr	r3, [pc, #336]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d115      	bne.n	8001616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e09a      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f6:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e08e      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001606:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e086      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 0203 	bic.w	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4943      	ldr	r1, [pc, #268]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001628:	f7ff f802 	bl	8000630 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	e00a      	b.n	8001646 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7fe fffe 	bl	8000630 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e06e      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 020c 	and.w	r2, r3, #12
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	429a      	cmp	r2, r3
 8001656:	d1eb      	bne.n	8001630 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d010      	beq.n	8001686 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001670:	429a      	cmp	r2, r3
 8001672:	d208      	bcs.n	8001686 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	492b      	ldr	r1, [pc, #172]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d210      	bcs.n	80016b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 0207 	bic.w	r2, r3, #7
 800169c:	4923      	ldr	r1, [pc, #140]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_ClockConfig+0x1ec>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e036      	b.n	8001724 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d008      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	4918      	ldr	r1, [pc, #96]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4910      	ldr	r1, [pc, #64]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016f4:	f000 f824 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016f8:	4602      	mov	r2, r0
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	490b      	ldr	r1, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x1f4>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1f8>)
 8001712:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1fc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff39 	bl	8000590 <HAL_InitTick>
 800171e:	4603      	mov	r3, r0
 8001720:	72fb      	strb	r3, [r7, #11]

  return status;
 8001722:	7afb      	ldrb	r3, [r7, #11]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40022000 	.word	0x40022000
 8001730:	40021000 	.word	0x40021000
 8001734:	08002204 	.word	0x08002204
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174e:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001758:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x34>
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d121      	bne.n	80017b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d11e      	bne.n	80017b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001774:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e005      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800179c:	4a2b      	ldr	r2, [pc, #172]	; (800184c <HAL_RCC_GetSysClockFreq+0x10c>)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10d      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d102      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <HAL_RCC_GetSysClockFreq+0x110>)
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	e004      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_RCC_GetSysClockFreq+0x114>)
 80017c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d134      	bne.n	8001838 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d003      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0xac>
 80017e4:	e005      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_RCC_GetSysClockFreq+0x110>)
 80017e8:	617b      	str	r3, [r7, #20]
      break;
 80017ea:	e005      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ee:	617b      	str	r3, [r7, #20]
      break;
 80017f0:	e002      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	617b      	str	r3, [r7, #20]
      break;
 80017f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	3301      	adds	r3, #1
 8001804:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	fb03 f202 	mul.w	r2, r3, r2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_RCC_GetSysClockFreq+0x108>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	0e5b      	lsrs	r3, r3, #25
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	3301      	adds	r3, #1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001838:	69bb      	ldr	r3, [r7, #24]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	08002214 	.word	0x08002214
 8001850:	00f42400 	.word	0x00f42400
 8001854:	007a1200 	.word	0x007a1200

08001858 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001870:	f7ff f9a0 	bl	8000bb4 <HAL_PWREx_GetVoltageRange>
 8001874:	6178      	str	r0, [r7, #20]
 8001876:	e014      	b.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a24      	ldr	r2, [pc, #144]	; (8001910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001890:	f7ff f990 	bl	8000bb4 <HAL_PWREx_GetVoltageRange>
 8001894:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800189c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a8:	d10b      	bne.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b80      	cmp	r3, #128	; 0x80
 80018ae:	d919      	bls.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2ba0      	cmp	r3, #160	; 0xa0
 80018b4:	d902      	bls.n	80018bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b6:	2302      	movs	r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e013      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018bc:	2301      	movs	r3, #1
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e010      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b80      	cmp	r3, #128	; 0x80
 80018c6:	d902      	bls.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018c8:	2303      	movs	r3, #3
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	e00a      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d102      	bne.n	80018da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018d4:	2302      	movs	r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	e004      	b.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b70      	cmp	r3, #112	; 0x70
 80018de:	d101      	bne.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018e0:	2301      	movs	r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 0207 	bic.w	r2, r3, #7
 80018ec:	4909      	ldr	r1, [pc, #36]	; (8001914 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e049      	b.n	80019be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fd78 	bl	8000434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3304      	adds	r3, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f000 fa9a 	bl	8001e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d001      	beq.n	80019e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e03b      	b.n	8001a58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <HAL_TIM_Base_Start_IT+0x9c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_TIM_Base_Start_IT+0x4e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0a:	d004      	beq.n	8001a16 <HAL_TIM_Base_Start_IT+0x4e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d115      	bne.n	8001a42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_TIM_Base_Start_IT+0xa4>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d015      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x8c>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2e:	d011      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a40:	e008      	b.n	8001a54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e000      	b.n	8001a56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40014000 	.word	0x40014000
 8001a6c:	00010007 	.word	0x00010007

08001a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d122      	bne.n	8001acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d11b      	bne.n	8001acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0202 	mvn.w	r2, #2
 8001a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f9ce 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f9c0 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f9d1 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d122      	bne.n	8001b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d11b      	bne.n	8001b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0204 	mvn.w	r2, #4
 8001af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f9a4 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001b0c:	e005      	b.n	8001b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f996 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f9a7 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d122      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d11b      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0208 	mvn.w	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f97a 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f96c 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f97d 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0210 	mvn.w	r2, #16
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f950 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f942 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f953 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0201 	mvn.w	r2, #1
 8001bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe faec 	bl	80001cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	2b80      	cmp	r3, #128	; 0x80
 8001c00:	d10e      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	2b80      	cmp	r3, #128	; 0x80
 8001c0e:	d107      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 faa6 	bl	800216c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2e:	d10e      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d107      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fa99 	bl	8002180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c58:	2b40      	cmp	r3, #64	; 0x40
 8001c5a:	d10e      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d107      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f901 	bl	8001e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d10e      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d107      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0220 	mvn.w	r2, #32
 8001c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fa59 	bl	8002158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_ConfigClockSource+0x1c>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0b6      	b.n	8001e38 <HAL_TIM_ConfigClockSource+0x18a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cf4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d06:	d03e      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0xd8>
 8001d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0c:	f200 8087 	bhi.w	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d14:	f000 8086 	beq.w	8001e24 <HAL_TIM_ConfigClockSource+0x176>
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1c:	d87f      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d1e:	2b70      	cmp	r3, #112	; 0x70
 8001d20:	d01a      	beq.n	8001d58 <HAL_TIM_ConfigClockSource+0xaa>
 8001d22:	2b70      	cmp	r3, #112	; 0x70
 8001d24:	d87b      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d26:	2b60      	cmp	r3, #96	; 0x60
 8001d28:	d050      	beq.n	8001dcc <HAL_TIM_ConfigClockSource+0x11e>
 8001d2a:	2b60      	cmp	r3, #96	; 0x60
 8001d2c:	d877      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d2e:	2b50      	cmp	r3, #80	; 0x50
 8001d30:	d03c      	beq.n	8001dac <HAL_TIM_ConfigClockSource+0xfe>
 8001d32:	2b50      	cmp	r3, #80	; 0x50
 8001d34:	d873      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d058      	beq.n	8001dec <HAL_TIM_ConfigClockSource+0x13e>
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d86f      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d3e:	2b30      	cmp	r3, #48	; 0x30
 8001d40:	d064      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0x15e>
 8001d42:	2b30      	cmp	r3, #48	; 0x30
 8001d44:	d86b      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d060      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0x15e>
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d867      	bhi.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d05c      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0x15e>
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d05a      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0x15e>
 8001d56:	e062      	b.n	8001e1e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f000 f970 	bl	800204c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	609a      	str	r2, [r3, #8]
      break;
 8001d84:	e04f      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f000 f959 	bl	800204c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da8:	609a      	str	r2, [r3, #8]
      break;
 8001daa:	e03c      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	461a      	mov	r2, r3
 8001dba:	f000 f8cd 	bl	8001f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2150      	movs	r1, #80	; 0x50
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f926 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001dca:	e02c      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f000 f8ec 	bl	8001fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2160      	movs	r1, #96	; 0x60
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f916 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001dea:	e01c      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f000 f8ad 	bl	8001f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f906 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001e0a:	e00c      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f000 f8fd 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001e1c:	e003      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
      break;
 8001e22:	e000      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001e24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	; (8001f4c <TIM_Base_SetConfig+0xbc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d003      	beq.n	8001eb0 <TIM_Base_SetConfig+0x20>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d108      	bne.n	8001ec2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <TIM_Base_SetConfig+0xbc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00b      	beq.n	8001ee2 <TIM_Base_SetConfig+0x52>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed0:	d007      	beq.n	8001ee2 <TIM_Base_SetConfig+0x52>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <TIM_Base_SetConfig+0xc0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <TIM_Base_SetConfig+0x52>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <TIM_Base_SetConfig+0xc4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d108      	bne.n	8001ef4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <TIM_Base_SetConfig+0xbc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <TIM_Base_SetConfig+0xa0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <TIM_Base_SetConfig+0xc0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d003      	beq.n	8001f30 <TIM_Base_SetConfig+0xa0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <TIM_Base_SetConfig+0xc4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d103      	bne.n	8001f38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	615a      	str	r2, [r3, #20]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40014400 	.word	0x40014400

08001f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f023 0201 	bic.w	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f023 030a 	bic.w	r3, r3, #10
 8001f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	621a      	str	r2, [r3, #32]
}
 8001faa:	bf00      	nop
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	f023 0210 	bic.w	r2, r3, #16
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	031b      	lsls	r3, r3, #12
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	621a      	str	r2, [r3, #32]
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	f043 0307 	orr.w	r3, r3, #7
 8002038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	021a      	lsls	r2, r3, #8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	431a      	orrs	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e04f      	b.n	8002144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80020d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d009      	beq.n	8002118 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d004      	beq.n	8002118 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10c      	bne.n	8002132 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800211e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	4313      	orrs	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40014000 	.word	0x40014000

08002158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <__libc_init_array>:
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	4d0d      	ldr	r5, [pc, #52]	; (80021cc <__libc_init_array+0x38>)
 8002198:	4c0d      	ldr	r4, [pc, #52]	; (80021d0 <__libc_init_array+0x3c>)
 800219a:	1b64      	subs	r4, r4, r5
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	2600      	movs	r6, #0
 80021a0:	42a6      	cmp	r6, r4
 80021a2:	d109      	bne.n	80021b8 <__libc_init_array+0x24>
 80021a4:	4d0b      	ldr	r5, [pc, #44]	; (80021d4 <__libc_init_array+0x40>)
 80021a6:	4c0c      	ldr	r4, [pc, #48]	; (80021d8 <__libc_init_array+0x44>)
 80021a8:	f000 f820 	bl	80021ec <_init>
 80021ac:	1b64      	subs	r4, r4, r5
 80021ae:	10a4      	asrs	r4, r4, #2
 80021b0:	2600      	movs	r6, #0
 80021b2:	42a6      	cmp	r6, r4
 80021b4:	d105      	bne.n	80021c2 <__libc_init_array+0x2e>
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021bc:	4798      	blx	r3
 80021be:	3601      	adds	r6, #1
 80021c0:	e7ee      	b.n	80021a0 <__libc_init_array+0xc>
 80021c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c6:	4798      	blx	r3
 80021c8:	3601      	adds	r6, #1
 80021ca:	e7f2      	b.n	80021b2 <__libc_init_array+0x1e>
 80021cc:	08002244 	.word	0x08002244
 80021d0:	08002244 	.word	0x08002244
 80021d4:	08002244 	.word	0x08002244
 80021d8:	08002248 	.word	0x08002248

080021dc <memset>:
 80021dc:	4402      	add	r2, r0
 80021de:	4603      	mov	r3, r0
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d100      	bne.n	80021e6 <memset+0xa>
 80021e4:	4770      	bx	lr
 80021e6:	f803 1b01 	strb.w	r1, [r3], #1
 80021ea:	e7f9      	b.n	80021e0 <memset+0x4>

080021ec <_init>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	bf00      	nop
 80021f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f2:	bc08      	pop	{r3}
 80021f4:	469e      	mov	lr, r3
 80021f6:	4770      	bx	lr

080021f8 <_fini>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr
