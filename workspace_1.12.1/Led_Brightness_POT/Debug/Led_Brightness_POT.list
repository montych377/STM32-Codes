
Led_Brightness_POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f78  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800314c  0800314c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003154  08003154  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800315c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003168  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003168  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a812  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001873  00000000  00000000  0002a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e8e  00000000  00000000  0002d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5b9  00000000  00000000  0004f40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c83  00000000  00000000  0005b9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013264a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  0013269c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003124 	.word	0x08003124

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003124 	.word	0x08003124

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t adc_data = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fab3 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f825 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f957 	bl	80007d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000522:	f000 f88d 	bl	8000640 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000526:	f000 f8dd 	bl	80006e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x58>)
 800052e:	f001 ffef 	bl	8002510 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000532:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x5c>)
 8000534:	f000 fb7e 	bl	8000c34 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000538:	2101      	movs	r1, #1
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <main+0x5c>)
 800053c:	f000 fc4c 	bl	8000dd8 <HAL_ADC_PollForConversion>
	  adc_data = HAL_ADC_GetValue(&hadc1);
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <main+0x5c>)
 8000542:	f000 fcd4 	bl	8000eee <HAL_ADC_GetValue>
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
	  pwm = (adc_data<<3);
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	80bb      	strh	r3, [r7, #4]
	  TIM2->CCR1 = pwm;
 8000550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 fb03 	bl	8000b64 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800055e:	e7e8      	b.n	8000532 <main+0x2a>
 8000560:	20000070 	.word	0x20000070
 8000564:	20000028 	.word	0x20000028

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fdcc 	bl	8003114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd4>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005e0:	2348      	movs	r3, #72	; 0x48
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fc45 	bl	8001e84 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000600:	f000 f90e 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f919 	bl	8001858 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800062c:	f000 f8f8 	bl	8000820 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <MX_ADC1_Init+0x9c>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <MX_ADC1_Init+0xa0>)
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ADC1_Init+0x98>)
 800068c:	2201      	movs	r2, #1
 800068e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_ADC1_Init+0x98>)
 800069a:	2201      	movs	r2, #1
 800069c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <MX_ADC1_Init+0x98>)
 80006a0:	f000 fa84 	bl	8000bac <HAL_ADC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f8b9 	bl	8000820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80006b6:	2301      	movs	r3, #1
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_ADC1_Init+0x98>)
 80006c0:	f000 fc22 	bl	8000f08 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ca:	f000 f8a9 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000028 	.word	0x20000028
 80006dc:	40012000 	.word	0x40012000
 80006e0:	0f000001 	.word	0x0f000001

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]
 8000712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_TIM2_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_TIM2_Init+0xe8>)
 800072a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800072e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <MX_TIM2_Init+0xe8>)
 800073e:	f001 fe3f 	bl	80023c0 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000748:	f000 f86a 	bl	8000820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000756:	4619      	mov	r1, r3
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <MX_TIM2_Init+0xe8>)
 800075a:	f002 f863 	bl	8002824 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000764:	f000 f85c 	bl	8000820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <MX_TIM2_Init+0xe8>)
 800076a:	f001 fe78 	bl	800245e <HAL_TIM_PWM_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000774:	f000 f854 	bl	8000820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000788:	f002 fc24 	bl	8002fd4 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000792:	f000 f845 	bl	8000820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000796:	2360      	movs	r3, #96	; 0x60
 8000798:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM2_Init+0xe8>)
 80007ae:	f001 ff77 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007b8:	f000 f832 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM2_Init+0xe8>)
 80007be:	f000 f8c1 	bl	8000944 <HAL_TIM_MspPostInit>

}
 80007c2:	bf00      	nop
 80007c4:	3738      	adds	r7, #56	; 0x38
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000070 	.word	0x20000070

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_GPIO_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <MX_GPIO_Init+0x4c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_GPIO_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_GPIO_Init+0x4c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <MX_GPIO_Init+0x4c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_GPIO_Init+0x4c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	2007      	movs	r0, #7
 800086c:	f000 fe2c 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_ADC_MspInit+0x7c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d127      	bne.n	80008ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_ADC_MspInit+0x80>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <HAL_ADC_MspInit+0x80>)
 80008a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <HAL_ADC_MspInit+0x80>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_ADC_MspInit+0x80>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_ADC_MspInit+0x80>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_ADC_MspInit+0x80>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_ADC_MspInit+0x84>)
 80008ea:	f000 fe21 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012000 	.word	0x40012000
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000

08000904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000914:	d10d      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_TIM_Base_MspInit+0x3c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000964:	d11d      	bne.n	80009a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_TIM_MspPostInit+0x68>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <HAL_TIM_MspPostInit+0x68>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_TIM_MspPostInit+0x68>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <HAL_TIM_MspPostInit+0x6c>)
 800099e:	f000 fdc7 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f890 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ffd7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 fb37 	bl	80030cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fd53 	bl	8000508 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	0800315c 	.word	0x0800315c
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	200000bc 	.word	0x200000bc

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 fd0d 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff feba 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fd17 	bl	8001516 <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 fced 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200000b8 	.word	0x200000b8

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200000b8 	.word	0x200000b8

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e033      	b.n	8000c2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d109      	bne.n	8000bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fe56 	bl	800087c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d118      	bne.n	8000c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf2:	f023 0302 	bic.w	r3, r3, #2
 8000bf6:	f043 0202 	orr.w	r2, r3, #2
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f000 fab4 	bl	800116c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f023 0303 	bic.w	r3, r3, #3
 8000c12:	f043 0201 	orr.w	r2, r3, #1
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1a:	e001      	b.n	8000c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Start+0x1a>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	e0b2      	b.n	8000db4 <HAL_ADC_Start+0x180>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d018      	beq.n	8000c96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0201 	orr.w	r2, r2, #1
 8000c72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c74:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <HAL_ADC_Start+0x18c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a52      	ldr	r2, [pc, #328]	; (8000dc4 <HAL_ADC_Start+0x190>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c9a      	lsrs	r2, r3, #18
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c88:	e002      	b.n	8000c90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f9      	bne.n	8000c8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d17a      	bne.n	8000d9a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ce2:	d106      	bne.n	8000cf2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	f023 0206 	bic.w	r2, r3, #6
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	645a      	str	r2, [r3, #68]	; 0x44
 8000cf0:	e002      	b.n	8000cf8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d00:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <HAL_ADC_Start+0x194>)
 8000d02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d12a      	bne.n	8000d70 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a2b      	ldr	r2, [pc, #172]	; (8000dcc <HAL_ADC_Start+0x198>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d015      	beq.n	8000d50 <HAL_ADC_Start+0x11c>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <HAL_ADC_Start+0x19c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d105      	bne.n	8000d3a <HAL_ADC_Start+0x106>
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_ADC_Start+0x194>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00a      	beq.n	8000d50 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a25      	ldr	r2, [pc, #148]	; (8000dd4 <HAL_ADC_Start+0x1a0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d136      	bne.n	8000db2 <HAL_ADC_Start+0x17e>
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_ADC_Start+0x194>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d130      	bne.n	8000db2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d129      	bne.n	8000db2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	e020      	b.n	8000db2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_ADC_Start+0x198>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d11b      	bne.n	8000db2 <HAL_ADC_Start+0x17e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d114      	bne.n	8000db2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	e00b      	b.n	8000db2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f043 0210 	orr.w	r2, r3, #16
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	431bde83 	.word	0x431bde83
 8000dc8:	40012300 	.word	0x40012300
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	40012100 	.word	0x40012100
 8000dd4:	40012200 	.word	0x40012200

08000dd8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df4:	d113      	bne.n	8000e1e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e04:	d10b      	bne.n	8000e1e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f043 0220 	orr.w	r2, r3, #32
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e063      	b.n	8000ee6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e1e:	f7ff fe95 	bl	8000b4c <HAL_GetTick>
 8000e22:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e24:	e021      	b.n	8000e6a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d01d      	beq.n	8000e6a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d007      	beq.n	8000e44 <HAL_ADC_PollForConversion+0x6c>
 8000e34:	f7ff fe8a 	bl	8000b4c <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d212      	bcs.n	8000e6a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d00b      	beq.n	8000e6a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f043 0204 	orr.w	r2, r3, #4
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e03d      	b.n	8000ee6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d1d6      	bne.n	8000e26 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f06f 0212 	mvn.w	r2, #18
 8000e80:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d123      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11f      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d111      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x1c>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e113      	b.n	800114c <HAL_ADC_ConfigChannel+0x244>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b09      	cmp	r3, #9
 8000f32:	d925      	bls.n	8000f80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68d9      	ldr	r1, [r3, #12]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	3b1e      	subs	r3, #30
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43da      	mvns	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	400a      	ands	r2, r1
 8000f58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68d9      	ldr	r1, [r3, #12]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4403      	add	r3, r0
 8000f72:	3b1e      	subs	r3, #30
 8000f74:	409a      	lsls	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	e022      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6919      	ldr	r1, [r3, #16]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	2207      	movs	r2, #7
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6919      	ldr	r1, [r3, #16]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4403      	add	r3, r0
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d824      	bhi.n	8001018 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b05      	subs	r3, #5
 8000fe0:	221f      	movs	r2, #31
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	400a      	ands	r2, r1
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	3b05      	subs	r3, #5
 800100a:	fa00 f203 	lsl.w	r2, r0, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
 8001016:	e04c      	b.n	80010b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b0c      	cmp	r3, #12
 800101e:	d824      	bhi.n	800106a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	3b23      	subs	r3, #35	; 0x23
 8001032:	221f      	movs	r2, #31
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43da      	mvns	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	400a      	ands	r2, r1
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	b29b      	uxth	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	3b23      	subs	r3, #35	; 0x23
 800105c:	fa00 f203 	lsl.w	r2, r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
 8001068:	e023      	b.n	80010b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	3b41      	subs	r3, #65	; 0x41
 800107c:	221f      	movs	r2, #31
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	400a      	ands	r2, r1
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	3b41      	subs	r3, #65	; 0x41
 80010a6:	fa00 f203 	lsl.w	r2, r0, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_ADC_ConfigChannel+0x250>)
 80010b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a28      	ldr	r2, [pc, #160]	; (800115c <HAL_ADC_ConfigChannel+0x254>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d10f      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1d8>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b12      	cmp	r3, #18
 80010c6:	d10b      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_ADC_ConfigChannel+0x254>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d12b      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x23a>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_ADC_ConfigChannel+0x258>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d003      	beq.n	80010fc <HAL_ADC_ConfigChannel+0x1f4>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b11      	cmp	r3, #17
 80010fa:	d122      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_ADC_ConfigChannel+0x258>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d111      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_ADC_ConfigChannel+0x25c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <HAL_ADC_ConfigChannel+0x260>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	0c9a      	lsrs	r2, r3, #18
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001134:	e002      	b.n	800113c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3b01      	subs	r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f9      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40012300 	.word	0x40012300
 800115c:	40012000 	.word	0x40012000
 8001160:	10000012 	.word	0x10000012
 8001164:	20000000 	.word	0x20000000
 8001168:	431bde83 	.word	0x431bde83

0800116c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001174:	4b79      	ldr	r3, [pc, #484]	; (800135c <ADC_Init+0x1f0>)
 8001176:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	431a      	orrs	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	021a      	lsls	r2, r3, #8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6899      	ldr	r1, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	4a58      	ldr	r2, [pc, #352]	; (8001360 <ADC_Init+0x1f4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d022      	beq.n	800124a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6899      	ldr	r1, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6899      	ldr	r1, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	e00f      	b.n	800126a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001268:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0202 	bic.w	r2, r2, #2
 8001278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6899      	ldr	r1, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7e1b      	ldrb	r3, [r3, #24]
 8001284:	005a      	lsls	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01b      	beq.n	80012d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	3b01      	subs	r3, #1
 80012c4:	035a      	lsls	r2, r3, #13
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	e007      	b.n	80012e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	051a      	lsls	r2, r3, #20
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6899      	ldr	r1, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001322:	025a      	lsls	r2, r3, #9
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800133a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6899      	ldr	r1, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	029a      	lsls	r2, r3, #10
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40012300 	.word	0x40012300
 8001360:	0f000001 	.word	0x0f000001

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff8e 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff47 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff5c 	bl	80013ac <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff8e 	bl	800141c <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5d 	bl	80013c8 <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffb0 	bl	8001484 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	e165      	b.n	8001818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800154c:	2201      	movs	r2, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	429a      	cmp	r2, r3
 8001566:	f040 8154 	bne.w	8001812 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d005      	beq.n	8001582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157e:	2b02      	cmp	r3, #2
 8001580:	d130      	bne.n	80015e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b8:	2201      	movs	r2, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 0201 	and.w	r2, r3, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d017      	beq.n	8001620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d123      	bne.n	8001674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	08da      	lsrs	r2, r3, #3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3208      	adds	r2, #8
 8001634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	69b9      	ldr	r1, [r7, #24]
 8001670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0203 	and.w	r2, r3, #3
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80ae 	beq.w	8001812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <HAL_GPIO_Init+0x300>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a5c      	ldr	r2, [pc, #368]	; (8001830 <HAL_GPIO_Init+0x300>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_GPIO_Init+0x300>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d2:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_GPIO_Init+0x304>)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4f      	ldr	r2, [pc, #316]	; (8001838 <HAL_GPIO_Init+0x308>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d025      	beq.n	800174a <HAL_GPIO_Init+0x21a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_GPIO_Init+0x30c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01f      	beq.n	8001746 <HAL_GPIO_Init+0x216>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4d      	ldr	r2, [pc, #308]	; (8001840 <HAL_GPIO_Init+0x310>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_GPIO_Init+0x212>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_GPIO_Init+0x314>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <HAL_GPIO_Init+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4b      	ldr	r2, [pc, #300]	; (8001848 <HAL_GPIO_Init+0x318>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00d      	beq.n	800173a <HAL_GPIO_Init+0x20a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4a      	ldr	r2, [pc, #296]	; (800184c <HAL_GPIO_Init+0x31c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <HAL_GPIO_Init+0x206>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a49      	ldr	r2, [pc, #292]	; (8001850 <HAL_GPIO_Init+0x320>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_GPIO_Init+0x202>
 800172e:	2306      	movs	r3, #6
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001732:	2307      	movs	r3, #7
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x21c>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x21c>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x21c>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <HAL_GPIO_Init+0x304>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <HAL_GPIO_Init+0x324>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a31      	ldr	r2, [pc, #196]	; (8001854 <HAL_GPIO_Init+0x324>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <HAL_GPIO_Init+0x324>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <HAL_GPIO_Init+0x324>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_GPIO_Init+0x324>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_GPIO_Init+0x324>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_GPIO_Init+0x324>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_GPIO_Init+0x324>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f ae96 	bls.w	800154c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40013c00 	.word	0x40013c00

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0cc      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d90c      	bls.n	8001894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d044      	beq.n	8001978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d119      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d003      	beq.n	8001916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	2b03      	cmp	r3, #3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e067      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4934      	ldr	r1, [pc, #208]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff f900 	bl	8000b4c <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff f8fc 	bl	8000b4c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e04f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d20c      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f860 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00
 8001a14:	40023800 	.word	0x40023800
 8001a18:	0800313c 	.word	0x0800313c
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a28:	b0ae      	sub	sp, #184	; 0xb8
 8001a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4a:	4bcb      	ldr	r3, [pc, #812]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	f200 8206 	bhi.w	8001e64 <HAL_RCC_GetSysClockFreq+0x440>
 8001a58:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a95 	.word	0x08001a95
 8001a64:	08001e65 	.word	0x08001e65
 8001a68:	08001e65 	.word	0x08001e65
 8001a6c:	08001e65 	.word	0x08001e65
 8001a70:	08001a9d 	.word	0x08001a9d
 8001a74:	08001e65 	.word	0x08001e65
 8001a78:	08001e65 	.word	0x08001e65
 8001a7c:	08001e65 	.word	0x08001e65
 8001a80:	08001aa5 	.word	0x08001aa5
 8001a84:	08001e65 	.word	0x08001e65
 8001a88:	08001e65 	.word	0x08001e65
 8001a8c:	08001e65 	.word	0x08001e65
 8001a90:	08001c95 	.word	0x08001c95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4bb9      	ldr	r3, [pc, #740]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a9a:	e1e7      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9c:	4bb8      	ldr	r3, [pc, #736]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001aa2:	e1e3      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa4:	4bb4      	ldr	r3, [pc, #720]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab0:	4bb1      	ldr	r3, [pc, #708]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d071      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abc:	4bae      	ldr	r3, [pc, #696]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ac8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	0159      	lsls	r1, r3, #5
 8001af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af4:	0150      	lsls	r0, r2, #5
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4621      	mov	r1, r4
 8001afc:	1a51      	subs	r1, r2, r1
 8001afe:	6439      	str	r1, [r7, #64]	; 0x40
 8001b00:	4629      	mov	r1, r5
 8001b02:	eb63 0301 	sbc.w	r3, r3, r1
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001b14:	4649      	mov	r1, r9
 8001b16:	018b      	lsls	r3, r1, #6
 8001b18:	4641      	mov	r1, r8
 8001b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1e:	4641      	mov	r1, r8
 8001b20:	018a      	lsls	r2, r1, #6
 8001b22:	4641      	mov	r1, r8
 8001b24:	1a51      	subs	r1, r2, r1
 8001b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b28:	4649      	mov	r1, r9
 8001b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	00cb      	lsls	r3, r1, #3
 8001b40:	4641      	mov	r1, r8
 8001b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b46:	4641      	mov	r1, r8
 8001b48:	00ca      	lsls	r2, r1, #3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4622      	mov	r2, r4
 8001b52:	189b      	adds	r3, r3, r2
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
 8001b56:	462b      	mov	r3, r5
 8001b58:	460a      	mov	r2, r1
 8001b5a:	eb42 0303 	adc.w	r3, r2, r3
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	024b      	lsls	r3, r1, #9
 8001b70:	4621      	mov	r1, r4
 8001b72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b76:	4621      	mov	r1, r4
 8001b78:	024a      	lsls	r2, r1, #9
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b8c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b90:	f7fe fb38 	bl	8000204 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b9e:	e067      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba0:	4b75      	ldr	r3, [pc, #468]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bba:	2300      	movs	r3, #0
 8001bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bbe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	f04f 0000 	mov.w	r0, #0
 8001bca:	f04f 0100 	mov.w	r1, #0
 8001bce:	0159      	lsls	r1, r3, #5
 8001bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd4:	0150      	lsls	r0, r2, #5
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4621      	mov	r1, r4
 8001bdc:	1a51      	subs	r1, r2, r1
 8001bde:	62b9      	str	r1, [r7, #40]	; 0x28
 8001be0:	4629      	mov	r1, r5
 8001be2:	eb63 0301 	sbc.w	r3, r3, r1
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	018b      	lsls	r3, r1, #6
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bfe:	4641      	mov	r1, r8
 8001c00:	018a      	lsls	r2, r1, #6
 8001c02:	4641      	mov	r1, r8
 8001c04:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c08:	4649      	mov	r1, r9
 8001c0a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c22:	4692      	mov	sl, r2
 8001c24:	469b      	mov	fp, r3
 8001c26:	4623      	mov	r3, r4
 8001c28:	eb1a 0303 	adds.w	r3, sl, r3
 8001c2c:	623b      	str	r3, [r7, #32]
 8001c2e:	462b      	mov	r3, r5
 8001c30:	eb4b 0303 	adc.w	r3, fp, r3
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c42:	4629      	mov	r1, r5
 8001c44:	028b      	lsls	r3, r1, #10
 8001c46:	4621      	mov	r1, r4
 8001c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	028a      	lsls	r2, r1, #10
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c58:	2200      	movs	r2, #0
 8001c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8001c5c:	677a      	str	r2, [r7, #116]	; 0x74
 8001c5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c62:	f7fe facf 	bl	8000204 <__aeabi_uldivmod>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c70:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c92:	e0eb      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d06b      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	667b      	str	r3, [r7, #100]	; 0x64
 8001cc4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cc8:	4622      	mov	r2, r4
 8001cca:	462b      	mov	r3, r5
 8001ccc:	f04f 0000 	mov.w	r0, #0
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	0159      	lsls	r1, r3, #5
 8001cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cda:	0150      	lsls	r0, r2, #5
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	1a51      	subs	r1, r2, r1
 8001ce4:	61b9      	str	r1, [r7, #24]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001cfa:	4659      	mov	r1, fp
 8001cfc:	018b      	lsls	r3, r1, #6
 8001cfe:	4651      	mov	r1, sl
 8001d00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d04:	4651      	mov	r1, sl
 8001d06:	018a      	lsls	r2, r1, #6
 8001d08:	4651      	mov	r1, sl
 8001d0a:	ebb2 0801 	subs.w	r8, r2, r1
 8001d0e:	4659      	mov	r1, fp
 8001d10:	eb63 0901 	sbc.w	r9, r3, r1
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d28:	4690      	mov	r8, r2
 8001d2a:	4699      	mov	r9, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	eb18 0303 	adds.w	r3, r8, r3
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	462b      	mov	r3, r5
 8001d36:	eb49 0303 	adc.w	r3, r9, r3
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d48:	4629      	mov	r1, r5
 8001d4a:	024b      	lsls	r3, r1, #9
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d52:	4621      	mov	r1, r4
 8001d54:	024a      	lsls	r2, r1, #9
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d5e:	2200      	movs	r2, #0
 8001d60:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d62:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d68:	f7fe fa4c 	bl	8000204 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d76:	e065      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x420>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x458>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	4611      	mov	r1, r2
 8001d90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d94:	653b      	str	r3, [r7, #80]	; 0x50
 8001d96:	2300      	movs	r3, #0
 8001d98:	657b      	str	r3, [r7, #84]	; 0x54
 8001d9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d9e:	4642      	mov	r2, r8
 8001da0:	464b      	mov	r3, r9
 8001da2:	f04f 0000 	mov.w	r0, #0
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	0159      	lsls	r1, r3, #5
 8001dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db0:	0150      	lsls	r0, r2, #5
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4641      	mov	r1, r8
 8001db8:	1a51      	subs	r1, r2, r1
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001dd0:	4659      	mov	r1, fp
 8001dd2:	018b      	lsls	r3, r1, #6
 8001dd4:	4651      	mov	r1, sl
 8001dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dda:	4651      	mov	r1, sl
 8001ddc:	018a      	lsls	r2, r1, #6
 8001dde:	4651      	mov	r1, sl
 8001de0:	1a54      	subs	r4, r2, r1
 8001de2:	4659      	mov	r1, fp
 8001de4:	eb63 0501 	sbc.w	r5, r3, r1
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	00eb      	lsls	r3, r5, #3
 8001df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df6:	00e2      	lsls	r2, r4, #3
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	18e3      	adds	r3, r4, r3
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	464b      	mov	r3, r9
 8001e04:	eb45 0303 	adc.w	r3, r5, r3
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e16:	4629      	mov	r1, r5
 8001e18:	028b      	lsls	r3, r1, #10
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e20:	4621      	mov	r1, r4
 8001e22:	028a      	lsls	r2, r1, #10
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e30:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e36:	f7fe f9e5 	bl	8000204 <__aeabi_uldivmod>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4613      	mov	r3, r2
 8001e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x458>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	0f1b      	lsrs	r3, r3, #28
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e62:	e003      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	37b8      	adds	r7, #184	; 0xb8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	00f42400 	.word	0x00f42400

08001e84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e28d      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8083 	beq.w	8001faa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ea4:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d019      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eb0:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ebc:	4b8e      	ldr	r3, [pc, #568]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b84      	ldr	r3, [pc, #528]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x124>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d157      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e25a      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x90>
 8001f06:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7b      	ldr	r2, [pc, #492]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xcc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0xb4>
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a75      	ldr	r2, [pc, #468]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xcc>
 8001f38:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a6b      	ldr	r2, [pc, #428]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fdf8 	bl	8000b4c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7fe fdf4 	bl	8000b4c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e21f      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xdc>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7fe fde4 	bl	8000b4c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7fe fde0 	bl	8000b4c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e20b      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x104>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d06f      	beq.n	8002096 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fb6:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d017      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fc2:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fce:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x186>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1d3      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4937      	ldr	r1, [pc, #220]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_RCC_OscConfig+0x278>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7fe fd8d 	bl	8000b4c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7fe fd89 	bl	8000b4c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1b4      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4925      	ldr	r1, [pc, #148]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x278>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fd6c 	bl	8000b4c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002078:	f7fe fd68 	bl	8000b4c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e193      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d036      	beq.n	8002110 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fd4c 	bl	8000b4c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b8:	f7fe fd48 	bl	8000b4c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e173      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x234>
 80020d6:	e01b      	b.n	8002110 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_OscConfig+0x27c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe fd35 	bl	8000b4c <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	e00e      	b.n	8002104 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e6:	f7fe fd31 	bl	8000b4c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d907      	bls.n	8002104 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e15c      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ea      	bne.n	80020e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8097 	beq.w	800224c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b7f      	ldr	r3, [pc, #508]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a7e      	ldr	r2, [pc, #504]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b79      	ldr	r3, [pc, #484]	; (8002334 <HAL_RCC_OscConfig+0x4b0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d118      	bne.n	800218c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215a:	4b76      	ldr	r3, [pc, #472]	; (8002334 <HAL_RCC_OscConfig+0x4b0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a75      	ldr	r2, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0x4b0>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7fe fcf1 	bl	8000b4c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7fe fced 	bl	8000b4c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e118      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCC_OscConfig+0x4b0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x31e>
 8002194:	4b66      	ldr	r3, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	e01c      	b.n	80021dc <HAL_RCC_OscConfig+0x358>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x340>
 80021aa:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a60      	ldr	r2, [pc, #384]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a5d      	ldr	r2, [pc, #372]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0x358>
 80021c4:	4b5a      	ldr	r3, [pc, #360]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a59      	ldr	r2, [pc, #356]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a56      	ldr	r2, [pc, #344]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fcb2 	bl	8000b4c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fcae 	bl	8000b4c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0d7      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ee      	beq.n	80021ec <HAL_RCC_OscConfig+0x368>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe fc9c 	bl	8000b4c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe fc98 	bl	8000b4c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0c1      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ee      	bne.n	8002218 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a3a      	ldr	r2, [pc, #232]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80ad 	beq.w	80023b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b08      	cmp	r3, #8
 8002260:	d060      	beq.n	8002324 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d145      	bne.n	80022f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_RCC_OscConfig+0x4b4>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fc6c 	bl	8000b4c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fc68 	bl	8000b4c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e093      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	071b      	lsls	r3, r3, #28
 80022c2:	491b      	ldr	r1, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x4b4>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7fe fc3d 	bl	8000b4c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fc39 	bl	8000b4c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e064      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x452>
 80022f4:	e05c      	b.n	80023b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_RCC_OscConfig+0x4b4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fc26 	bl	8000b4c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fc22 	bl	8000b4c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e04d      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_OscConfig+0x4ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x480>
 8002322:	e045      	b.n	80023b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e040      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000
 8002338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x538>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d030      	beq.n	80023ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d129      	bne.n	80023ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d122      	bne.n	80023ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	4293      	cmp	r3, r2
 8002376:	d119      	bne.n	80023ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d10f      	bne.n	80023ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800

080023c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e041      	b.n	8002456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fa8c 	bl	8000904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f000 fad8 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e041      	b.n	80024f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f839 	bl	80024fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f000 fa89 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_TIM_PWM_Start+0x24>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e022      	b.n	800257a <HAL_TIM_PWM_Start+0x6a>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b04      	cmp	r3, #4
 8002538:	d109      	bne.n	800254e <HAL_TIM_PWM_Start+0x3e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e015      	b.n	800257a <HAL_TIM_PWM_Start+0x6a>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d109      	bne.n	8002568 <HAL_TIM_PWM_Start+0x58>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e008      	b.n	800257a <HAL_TIM_PWM_Start+0x6a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07c      	b.n	800267c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <HAL_TIM_PWM_Start+0x82>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002590:	e013      	b.n	80025ba <HAL_TIM_PWM_Start+0xaa>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x92>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a0:	e00b      	b.n	80025ba <HAL_TIM_PWM_Start+0xaa>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b0:	e003      	b.n	80025ba <HAL_TIM_PWM_Start+0xaa>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fce0 	bl	8002f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_TIM_PWM_Start+0x174>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_TIM_PWM_Start+0xcc>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <HAL_TIM_PWM_Start+0x178>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_TIM_PWM_Start+0xd0>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_TIM_PWM_Start+0xd2>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_TIM_PWM_Start+0x174>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <HAL_TIM_PWM_Start+0x136>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d01d      	beq.n	8002646 <HAL_TIM_PWM_Start+0x136>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_TIM_PWM_Start+0x17c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d018      	beq.n	8002646 <HAL_TIM_PWM_Start+0x136>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_TIM_PWM_Start+0x180>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_TIM_PWM_Start+0x136>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <HAL_TIM_PWM_Start+0x184>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_TIM_PWM_Start+0x136>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_TIM_PWM_Start+0x178>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_TIM_PWM_Start+0x136>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <HAL_TIM_PWM_Start+0x188>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_TIM_PWM_Start+0x136>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_TIM_PWM_Start+0x18c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d111      	bne.n	800266a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d010      	beq.n	800267a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002668:	e007      	b.n	800267a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010000 	.word	0x40010000
 8002688:	40010400 	.word	0x40010400
 800268c:	40000400 	.word	0x40000400
 8002690:	40000800 	.word	0x40000800
 8002694:	40000c00 	.word	0x40000c00
 8002698:	40014000 	.word	0x40014000
 800269c:	40001800 	.word	0x40001800

080026a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0ae      	b.n	800281c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	f200 809f 	bhi.w	800280c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	08002709 	.word	0x08002709
 80026d8:	0800280d 	.word	0x0800280d
 80026dc:	0800280d 	.word	0x0800280d
 80026e0:	0800280d 	.word	0x0800280d
 80026e4:	08002749 	.word	0x08002749
 80026e8:	0800280d 	.word	0x0800280d
 80026ec:	0800280d 	.word	0x0800280d
 80026f0:	0800280d 	.word	0x0800280d
 80026f4:	0800278b 	.word	0x0800278b
 80026f8:	0800280d 	.word	0x0800280d
 80026fc:	0800280d 	.word	0x0800280d
 8002700:	0800280d 	.word	0x0800280d
 8002704:	080027cb 	.word	0x080027cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f9f0 	bl	8002af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0208 	orr.w	r2, r2, #8
 8002722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0204 	bic.w	r2, r2, #4
 8002732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6999      	ldr	r1, [r3, #24]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	619a      	str	r2, [r3, #24]
      break;
 8002746:	e064      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fa40 	bl	8002bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6999      	ldr	r1, [r3, #24]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	021a      	lsls	r2, r3, #8
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	619a      	str	r2, [r3, #24]
      break;
 8002788:	e043      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fa95 	bl	8002cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0208 	orr.w	r2, r2, #8
 80027a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0204 	bic.w	r2, r2, #4
 80027b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69d9      	ldr	r1, [r3, #28]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	61da      	str	r2, [r3, #28]
      break;
 80027c8:	e023      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fae9 	bl	8002da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69d9      	ldr	r1, [r3, #28]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	021a      	lsls	r2, r3, #8
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	61da      	str	r2, [r3, #28]
      break;
 800280a:	e002      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
      break;
 8002810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIM_ConfigClockSource+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e0b4      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x186>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002878:	d03e      	beq.n	80028f8 <HAL_TIM_ConfigClockSource+0xd4>
 800287a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287e:	f200 8087 	bhi.w	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	f000 8086 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x172>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	d87f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b70      	cmp	r3, #112	; 0x70
 8002892:	d01a      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xa6>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d87b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b60      	cmp	r3, #96	; 0x60
 800289a:	d050      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x11a>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d877      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b50      	cmp	r3, #80	; 0x50
 80028a2:	d03c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xfa>
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d873      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d058      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x13a>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d86f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b30      	cmp	r3, #48	; 0x30
 80028b2:	d064      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	2b30      	cmp	r3, #48	; 0x30
 80028b6:	d86b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d060      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d867      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d05a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	e062      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f000 fb35 	bl	8002f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]
      break;
 80028f6:	e04f      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f000 fb1e 	bl	8002f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e03c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	461a      	mov	r2, r3
 800292c:	f000 fa92 	bl	8002e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2150      	movs	r1, #80	; 0x50
 8002936:	4618      	mov	r0, r3
 8002938:	f000 faeb 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 800293c:	e02c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f000 fab1 	bl	8002eb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2160      	movs	r1, #96	; 0x60
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fadb 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 800295c:	e01c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 fa72 	bl	8002e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	4618      	mov	r0, r3
 8002978:	f000 facb 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 800297c:	e00c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 fac2 	bl	8002f12 <TIM_ITRx_SetConfig>
      break;
 800298e:	e003      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e000      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d00f      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3d      	ldr	r2, [pc, #244]	; (8002acc <TIM_Base_SetConfig+0x118>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3c      	ldr	r2, [pc, #240]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <TIM_Base_SetConfig+0x120>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a3a      	ldr	r2, [pc, #232]	; (8002ad8 <TIM_Base_SetConfig+0x124>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a2f      	ldr	r2, [pc, #188]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02b      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d027      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <TIM_Base_SetConfig+0x118>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d023      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <TIM_Base_SetConfig+0x11c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <TIM_Base_SetConfig+0x120>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01b      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <TIM_Base_SetConfig+0x124>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d017      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a28      	ldr	r2, [pc, #160]	; (8002adc <TIM_Base_SetConfig+0x128>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <TIM_Base_SetConfig+0x12c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00f      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <TIM_Base_SetConfig+0x130>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <TIM_Base_SetConfig+0x134>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a24      	ldr	r2, [pc, #144]	; (8002aec <TIM_Base_SetConfig+0x138>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <TIM_Base_SetConfig+0x13c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d108      	bne.n	8002a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0xf8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <TIM_Base_SetConfig+0x124>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40010400 	.word	0x40010400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40014400 	.word	0x40014400
 8002ae4:	40014800 	.word	0x40014800
 8002ae8:	40001800 	.word	0x40001800
 8002aec:	40001c00 	.word	0x40001c00
 8002af0:	40002000 	.word	0x40002000

08002af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f023 0302 	bic.w	r3, r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <TIM_OC1_SetConfig+0xd8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_OC1_SetConfig+0x64>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	; (8002bd0 <TIM_OC1_SetConfig+0xdc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10c      	bne.n	8002b72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0308 	bic.w	r3, r3, #8
 8002b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <TIM_OC1_SetConfig+0xd8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_OC1_SetConfig+0x8e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <TIM_OC1_SetConfig+0xdc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d111      	bne.n	8002ba6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	621a      	str	r2, [r3, #32]
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40010400 	.word	0x40010400

08002bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0210 	bic.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0320 	bic.w	r3, r3, #32
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <TIM_OC2_SetConfig+0xe4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_OC2_SetConfig+0x68>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <TIM_OC2_SetConfig+0xe8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10d      	bne.n	8002c58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <TIM_OC2_SetConfig+0xe4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_OC2_SetConfig+0x94>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <TIM_OC2_SetConfig+0xe8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d113      	bne.n	8002c90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40010400 	.word	0x40010400

08002cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <TIM_OC3_SetConfig+0xe0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_OC3_SetConfig+0x66>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <TIM_OC3_SetConfig+0xe4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10d      	bne.n	8002d42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <TIM_OC3_SetConfig+0xe0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <TIM_OC3_SetConfig+0x92>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <TIM_OC3_SetConfig+0xe4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d113      	bne.n	8002d7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40010400 	.word	0x40010400

08002da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	031b      	lsls	r3, r3, #12
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <TIM_OC4_SetConfig+0xa4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_OC4_SetConfig+0x68>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <TIM_OC4_SetConfig+0xa8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d109      	bne.n	8002e24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40010400 	.word	0x40010400

08002e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f023 0201 	bic.w	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 030a 	bic.w	r3, r3, #10
 8002e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f023 0210 	bic.w	r2, r3, #16
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	031b      	lsls	r3, r3, #12
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f043 0307 	orr.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	609a      	str	r2, [r3, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e05a      	b.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d01d      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10c      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40010400 	.word	0x40010400
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40001800 	.word	0x40001800

080030cc <__libc_init_array>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	4d0d      	ldr	r5, [pc, #52]	; (8003104 <__libc_init_array+0x38>)
 80030d0:	4c0d      	ldr	r4, [pc, #52]	; (8003108 <__libc_init_array+0x3c>)
 80030d2:	1b64      	subs	r4, r4, r5
 80030d4:	10a4      	asrs	r4, r4, #2
 80030d6:	2600      	movs	r6, #0
 80030d8:	42a6      	cmp	r6, r4
 80030da:	d109      	bne.n	80030f0 <__libc_init_array+0x24>
 80030dc:	4d0b      	ldr	r5, [pc, #44]	; (800310c <__libc_init_array+0x40>)
 80030de:	4c0c      	ldr	r4, [pc, #48]	; (8003110 <__libc_init_array+0x44>)
 80030e0:	f000 f820 	bl	8003124 <_init>
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	2600      	movs	r6, #0
 80030ea:	42a6      	cmp	r6, r4
 80030ec:	d105      	bne.n	80030fa <__libc_init_array+0x2e>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f4:	4798      	blx	r3
 80030f6:	3601      	adds	r6, #1
 80030f8:	e7ee      	b.n	80030d8 <__libc_init_array+0xc>
 80030fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fe:	4798      	blx	r3
 8003100:	3601      	adds	r6, #1
 8003102:	e7f2      	b.n	80030ea <__libc_init_array+0x1e>
 8003104:	08003154 	.word	0x08003154
 8003108:	08003154 	.word	0x08003154
 800310c:	08003154 	.word	0x08003154
 8003110:	08003158 	.word	0x08003158

08003114 <memset>:
 8003114:	4402      	add	r2, r0
 8003116:	4603      	mov	r3, r0
 8003118:	4293      	cmp	r3, r2
 800311a:	d100      	bne.n	800311e <memset+0xa>
 800311c:	4770      	bx	lr
 800311e:	f803 1b01 	strb.w	r1, [r3], #1
 8003122:	e7f9      	b.n	8003118 <memset+0x4>

08003124 <_init>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	bf00      	nop
 8003128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312a:	bc08      	pop	{r3}
 800312c:	469e      	mov	lr, r3
 800312e:	4770      	bx	lr

08003130 <_fini>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	bf00      	nop
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr
