
TEST_I2C_Master_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e4c  08002e4c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e54  08002e54  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000001c  08002e78  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002e78  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb77  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001958  00000000  00000000  0002bbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a80  00000000  00000000  0002e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf10  00000000  00000000  0004f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7013  00000000  00000000  0005c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001232d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  00123324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e14 	.word	0x08002e14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08002e14 	.word	0x08002e14

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000512:	4a38      	ldr	r2, [pc, #224]	; (80005f4 <HD44780_Init+0xec>)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000518:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <HD44780_Init+0xf0>)
 800051a:	2208      	movs	r2, #8
 800051c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <HD44780_Init+0xf4>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <HD44780_Init+0xec>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d907      	bls.n	800053c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HD44780_Init+0xf4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0308 	orr.w	r3, r3, #8
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <HD44780_Init+0xf4>)
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	e006      	b.n	800054a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800053c:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <HD44780_Init+0xf4>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <HD44780_Init+0xf4>)
 8000548:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800054a:	f000 f953 	bl	80007f4 <DelayInit>
  HAL_Delay(50);
 800054e:	2032      	movs	r0, #50	; 0x32
 8000550:	f000 fc86 	bl	8000e60 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <HD44780_Init+0xf0>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f911 	bl	8000780 <ExpanderWrite>
  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 fc7d 	bl	8000e60 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000566:	2030      	movs	r0, #48	; 0x30
 8000568:	f000 f8f9 	bl	800075e <Write4Bits>
  DelayUS(4500);
 800056c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000570:	f000 f96a 	bl	8000848 <DelayUS>

  Write4Bits(0x03 << 4);
 8000574:	2030      	movs	r0, #48	; 0x30
 8000576:	f000 f8f2 	bl	800075e <Write4Bits>
  DelayUS(4500);
 800057a:	f241 1094 	movw	r0, #4500	; 0x1194
 800057e:	f000 f963 	bl	8000848 <DelayUS>

  Write4Bits(0x03 << 4);
 8000582:	2030      	movs	r0, #48	; 0x30
 8000584:	f000 f8eb 	bl	800075e <Write4Bits>
  DelayUS(4500);
 8000588:	f241 1094 	movw	r0, #4500	; 0x1194
 800058c:	f000 f95c 	bl	8000848 <DelayUS>

  Write4Bits(0x02 << 4);
 8000590:	2020      	movs	r0, #32
 8000592:	f000 f8e4 	bl	800075e <Write4Bits>
  DelayUS(100);
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 f956 	bl	8000848 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HD44780_Init+0xf4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f89c 	bl	80006e4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HD44780_Init+0xf8>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005b2:	f000 f843 	bl	800063c <HD44780_Display>
  HD44780_Clear();
 80005b6:	f000 f82b 	bl	8000610 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HD44780_Init+0xfc>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HD44780_Init+0xfc>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f88a 	bl	80006e4 <SendCommand>
  DelayUS(4500);
 80005d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005d4:	f000 f938 	bl	8000848 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005d8:	490b      	ldr	r1, [pc, #44]	; (8000608 <HD44780_Init+0x100>)
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f844 	bl	8000668 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005e0:	490a      	ldr	r1, [pc, #40]	; (800060c <HD44780_Init+0x104>)
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f840 	bl	8000668 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005e8:	f000 f81d 	bl	8000626 <HD44780_Home>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000003b 	.word	0x2000003b
 80005f8:	2000003c 	.word	0x2000003c
 80005fc:	20000038 	.word	0x20000038
 8000600:	20000039 	.word	0x20000039
 8000604:	2000003a 	.word	0x2000003a
 8000608:	20000000 	.word	0x20000000
 800060c:	20000008 	.word	0x20000008

08000610 <HD44780_Clear>:

void HD44780_Clear()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 f865 	bl	80006e4 <SendCommand>
  DelayUS(2000);
 800061a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061e:	f000 f913 	bl	8000848 <DelayUS>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}

08000626 <HD44780_Home>:

void HD44780_Home()
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800062a:	2002      	movs	r0, #2
 800062c:	f000 f85a 	bl	80006e4 <SendCommand>
  DelayUS(2000);
 8000630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000634:	f000 f908 	bl	8000848 <DelayUS>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HD44780_Display+0x28>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HD44780_Display+0x28>)
 800064c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HD44780_Display+0x28>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f843 	bl	80006e4 <SendCommand>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000039 	.word	0x20000039

08000668 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	b25b      	sxtb	r3, r3
 8000682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000686:	b25b      	sxtb	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f82a 	bl	80006e4 <SendCommand>
  for (int i=0; i<8; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e009      	b.n	80006aa <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f82e 	bl	8000700 <SendChar>
  for (int i=0; i<8; i++)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b07      	cmp	r3, #7
 80006ae:	ddf2      	ble.n	8000696 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80006c2:	e006      	b.n	80006d2 <HD44780_PrintStr+0x18>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	607a      	str	r2, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f817 	bl	8000700 <SendChar>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f4      	bne.n	80006c4 <HD44780_PrintStr+0xa>
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f812 	bl	800071c <Send>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f804 	bl	800071c <Send>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f023 030f 	bic.w	r3, r3, #15
 8000732:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800073a:	7bfa      	ldrb	r2, [r7, #15]
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	4313      	orrs	r3, r2
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f80b 	bl	800075e <Write4Bits>
  Write4Bits((lownib)|mode);
 8000748:	7bba      	ldrb	r2, [r7, #14]
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	4313      	orrs	r3, r2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f804 	bl	800075e <Write4Bits>
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f808 	bl	8000780 <ExpanderWrite>
  PulseEnable(value);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f820 	bl	80007b8 <PulseEnable>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <ExpanderWrite+0x30>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4313      	orrs	r3, r2
 8000792:	b2db      	uxtb	r3, r3
 8000794:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000796:	f107 020f 	add.w	r2, r7, #15
 800079a:	230a      	movs	r3, #10
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	217e      	movs	r1, #126	; 0x7e
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <ExpanderWrite+0x34>)
 80007a4:	f000 ff58 	bl	8001658 <HAL_I2C_Master_Transmit>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000003c 	.word	0x2000003c
 80007b4:	20000040 	.word	0x20000040

080007b8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ffd8 	bl	8000780 <ExpanderWrite>
  DelayUS(20);
 80007d0:	2014      	movs	r0, #20
 80007d2:	f000 f839 	bl	8000848 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f023 0304 	bic.w	r3, r3, #4
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffce 	bl	8000780 <ExpanderWrite>
  DelayUS(20);
 80007e4:	2014      	movs	r0, #20
 80007e6:	f000 f82f 	bl	8000848 <DelayUS>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <DelayInit>:

static void DelayInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <DelayInit+0x4c>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <DelayInit+0x4c>)
 80007fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000802:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <DelayInit+0x4c>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <DelayInit+0x4c>)
 800080a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800080e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <DelayInit+0x50>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <DelayInit+0x50>)
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <DelayInit+0x50>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <DelayInit+0x50>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <DelayInit+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800082e:	bf00      	nop
  __ASM volatile ("NOP");
 8000830:	bf00      	nop
  __ASM volatile ("NOP");
 8000832:	bf00      	nop
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000edf0 	.word	0xe000edf0
 8000844:	e0001000 	.word	0xe0001000

08000848 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000848:	b480      	push	{r7}
 800084a:	b087      	sub	sp, #28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <DelayUS+0x44>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <DelayUS+0x48>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	0c9a      	lsrs	r2, r3, #18
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	fb02 f303 	mul.w	r3, r2, r3
 8000862:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <DelayUS+0x4c>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <DelayUS+0x4c>)
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	429a      	cmp	r2, r3
 800087a:	d8f6      	bhi.n	800086a <DelayUS+0x22>
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000010 	.word	0x20000010
 8000890:	431bde83 	.word	0x431bde83
 8000894:	e0001000 	.word	0xe0001000

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f000 fa6e 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f814 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f000 f8d8 	bl	8000a58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a8:	f000 f8ac 	bl	8000a04 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008ac:	f000 f87c 	bl	80009a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <main+0x2c>)
 80008b2:	f000 fd8d 	bl	80013d0 <HAL_I2C_Init>
  HD44780_Init(2);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fe26 	bl	8000508 <HD44780_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HD44780_PrintStr("HELLO");
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <main+0x30>)
 80008be:	f7ff fefc 	bl	80006ba <HD44780_PrintStr>
 80008c2:	e7fb      	b.n	80008bc <main+0x24>
 80008c4:	20000040 	.word	0x20000040
 80008c8:	08002e2c 	.word	0x08002e2c

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fa92 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <SystemClock_Config+0xd4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <SystemClock_Config+0xd4>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <SystemClock_Config+0xd4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <SystemClock_Config+0xd8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000918:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <SystemClock_Config+0xd8>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <SystemClock_Config+0xd8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000940:	2310      	movs	r3, #16
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000944:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800094a:	2304      	movs	r3, #4
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fcce 	bl	80022fc <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000966:	f000 f8e5 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2302      	movs	r3, #2
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 f96e 	bl	8001c68 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000992:	f000 f8cf 	bl	8000b34 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3750      	adds	r7, #80	; 0x50
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40007000 	.word	0x40007000

080009a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009ae:	4a13      	ldr	r2, [pc, #76]	; (80009fc <MX_I2C1_Init+0x54>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_I2C1_Init+0x58>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009e6:	f000 fcf3 	bl	80013d0 <HAL_I2C_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f8a0 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000040 	.word	0x20000040
 80009fc:	40005400 	.word	0x40005400
 8000a00:	000186a0 	.word	0x000186a0

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f001 fefc 	bl	8002838 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f000 f875 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000094 	.word	0x20000094
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a2c      	ldr	r2, [pc, #176]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000ae4:	f000 fc5a 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_GPIO_Init+0xd8>)
 8000b00:	f000 fab8 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b04:	2320      	movs	r3, #32
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000b1c:	f000 faaa 	bl	8001074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020800 	.word	0x40020800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 fa44 	bl	800100c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_I2C_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12c      	bne.n	8000c0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be0:	2304      	movs	r3, #4
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	480c      	ldr	r0, [pc, #48]	; (8000c1c <HAL_I2C_MspInit+0x8c>)
 8000bec:	f000 fa42 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40005400 	.word	0x40005400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_UART_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12b      	bne.n	8000c9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c96:	f000 f9ed 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f890 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 f831 	bl	8002dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fd9d 	bl	8000898 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d6c:	08002e5c 	.word	0x08002e5c
  ldr r2, =_sbss
 8000d70:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d74:	200000dc 	.word	0x200000dc

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f931 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fec6 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f911 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000010 	.word	0x20000010
 8000e18:	20000018 	.word	0x20000018
 8000e1c:	20000014 	.word	0x20000014

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000018 	.word	0x20000018
 8000e44:	200000d8 	.word	0x200000d8

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000d8 	.word	0x200000d8

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000018 	.word	0x20000018

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5c 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e165      	b.n	800135c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8154 	bne.w	8001356 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80ae 	beq.w	8001356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_GPIO_Init+0x300>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a5c      	ldr	r2, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x300>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b5a      	ldr	r3, [pc, #360]	; (8001374 <HAL_GPIO_Init+0x300>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x304>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x308>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x21a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x216>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x310>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x212>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x314>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x20e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x318>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x20a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x31c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x206>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x320>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x202>
 8001272:	2306      	movs	r3, #6
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 8001276:	2307      	movs	r3, #7
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x304>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_GPIO_Init+0x324>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x324>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x324>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_GPIO_Init+0x324>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f ae96 	bls.w	8001090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e12b      	b.n	800163a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fbca 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001434:	f000 fd0a 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a81      	ldr	r2, [pc, #516]	; (8001644 <HAL_I2C_Init+0x274>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d807      	bhi.n	8001454 <HAL_I2C_Init+0x84>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a80      	ldr	r2, [pc, #512]	; (8001648 <HAL_I2C_Init+0x278>)
 8001448:	4293      	cmp	r3, r2
 800144a:	bf94      	ite	ls
 800144c:	2301      	movls	r3, #1
 800144e:	2300      	movhi	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e006      	b.n	8001462 <HAL_I2C_Init+0x92>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a7d      	ldr	r2, [pc, #500]	; (800164c <HAL_I2C_Init+0x27c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0e7      	b.n	800163a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a78      	ldr	r2, [pc, #480]	; (8001650 <HAL_I2C_Init+0x280>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a6a      	ldr	r2, [pc, #424]	; (8001644 <HAL_I2C_Init+0x274>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d802      	bhi.n	80014a4 <HAL_I2C_Init+0xd4>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	e009      	b.n	80014b8 <HAL_I2C_Init+0xe8>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	4a69      	ldr	r2, [pc, #420]	; (8001654 <HAL_I2C_Init+0x284>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	495c      	ldr	r1, [pc, #368]	; (8001644 <HAL_I2C_Init+0x274>)
 80014d4:	428b      	cmp	r3, r1
 80014d6:	d819      	bhi.n	800150c <HAL_I2C_Init+0x13c>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e6:	1c59      	adds	r1, r3, #1
 80014e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014ec:	400b      	ands	r3, r1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00a      	beq.n	8001508 <HAL_I2C_Init+0x138>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e59      	subs	r1, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001500:	3301      	adds	r3, #1
 8001502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001506:	e051      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 8001508:	2304      	movs	r3, #4
 800150a:	e04f      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d111      	bne.n	8001538 <HAL_I2C_Init+0x168>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e012      	b.n	800155e <HAL_I2C_Init+0x18e>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	0099      	lsls	r1, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	fbb0 f3f3 	udiv	r3, r0, r3
 800154e:	3301      	adds	r3, #1
 8001550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Init+0x196>
 8001562:	2301      	movs	r3, #1
 8001564:	e022      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10e      	bne.n	800158c <HAL_I2C_Init+0x1bc>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e58      	subs	r0, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	440b      	add	r3, r1
 800157c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001580:	3301      	adds	r3, #1
 8001582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158a:	e00f      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	0099      	lsls	r1, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	6809      	ldr	r1, [r1, #0]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6911      	ldr	r1, [r2, #16]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68d2      	ldr	r2, [r2, #12]
 80015e6:	4311      	orrs	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	000186a0 	.word	0x000186a0
 8001648:	001e847f 	.word	0x001e847f
 800164c:	003d08ff 	.word	0x003d08ff
 8001650:	431bde83 	.word	0x431bde83
 8001654:	10624dd3 	.word	0x10624dd3

08001658 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	817b      	strh	r3, [r7, #10]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fbec 	bl	8000e48 <HAL_GetTick>
 8001670:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b20      	cmp	r3, #32
 800167c:	f040 80e0 	bne.w	8001840 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2319      	movs	r3, #25
 8001686:	2201      	movs	r2, #1
 8001688:	4970      	ldr	r1, [pc, #448]	; (800184c <HAL_I2C_Master_Transmit+0x1f4>)
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f964 	bl	8001958 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	e0d3      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_I2C_Master_Transmit+0x50>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0cc      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d007      	beq.n	80016ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2221      	movs	r2, #33	; 0x21
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2210      	movs	r2, #16
 80016ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	893a      	ldrh	r2, [r7, #8]
 80016fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <HAL_I2C_Master_Transmit+0x1f8>)
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001710:	8979      	ldrh	r1, [r7, #10]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f89c 	bl	8001854 <I2C_MasterRequestWrite>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e08d      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800173c:	e066      	b.n	800180c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f9de 	bl	8001b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00d      	beq.n	800176a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b04      	cmp	r3, #4
 8001754:	d107      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d11b      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x188>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d017      	beq.n	80017e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	6a39      	ldr	r1, [r7, #32]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f9ce 	bl	8001b86 <I2C_WaitOnBTFFlagUntilTimeout>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d107      	bne.n	8001808 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001806:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e01a      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d194      	bne.n	800173e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001840:	2302      	movs	r3, #2
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	00100002 	.word	0x00100002
 8001850:	ffff0000 	.word	0xffff0000

08001854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	460b      	mov	r3, r1
 8001862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d006      	beq.n	800187e <I2C_MasterRequestWrite+0x2a>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d003      	beq.n	800187e <I2C_MasterRequestWrite+0x2a>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800187c:	d108      	bne.n	8001890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e00b      	b.n	80018a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	2b12      	cmp	r3, #18
 8001896:	d107      	bne.n	80018a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f84f 	bl	8001958 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00d      	beq.n	80018dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ce:	d103      	bne.n	80018d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e035      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018e4:	d108      	bne.n	80018f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018e6:	897b      	ldrh	r3, [r7, #10]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	e01b      	b.n	8001930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	11db      	asrs	r3, r3, #7
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 0306 	and.w	r3, r3, #6
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f063 030f 	orn	r3, r3, #15
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <I2C_MasterRequestWrite+0xfc>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f875 	bl	8001a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e010      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001926:	897b      	ldrh	r3, [r7, #10]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <I2C_MasterRequestWrite+0x100>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f865 	bl	8001a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	00010008 	.word	0x00010008
 8001954:	00010002 	.word	0x00010002

08001958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001968:	e025      	b.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d021      	beq.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001972:	f7ff fa69 	bl	8000e48 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d302      	bcc.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d116      	bne.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e023      	b.n	80019fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10d      	bne.n	80019dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4013      	ands	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	e00c      	b.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4013      	ands	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d0b6      	beq.n	800196a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a14:	e051      	b.n	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a24:	d123      	bne.n	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e046      	b.n	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d021      	beq.n	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a76:	f7ff f9e7 	bl	8000e48 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d302      	bcc.n	8001a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d116      	bne.n	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e020      	b.n	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d10c      	bne.n	8001ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e00b      	b.n	8001af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d18d      	bne.n	8001a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b10:	e02d      	b.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f878 	bl	8001c08 <I2C_IsAcknowledgeFailed>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e02d      	b.n	8001b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d021      	beq.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2a:	f7ff f98d 	bl	8000e48 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d116      	bne.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f043 0220 	orr.w	r2, r3, #32
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e007      	b.n	8001b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b78:	2b80      	cmp	r3, #128	; 0x80
 8001b7a:	d1ca      	bne.n	8001b12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b92:	e02d      	b.n	8001bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f837 	bl	8001c08 <I2C_IsAcknowledgeFailed>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e02d      	b.n	8001c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001baa:	d021      	beq.n	8001bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bac:	f7ff f94c 	bl	8000e48 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d302      	bcc.n	8001bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e007      	b.n	8001c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d1ca      	bne.n	8001b94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1e:	d11b      	bne.n	8001c58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f043 0204 	orr.w	r2, r3, #4
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0cc      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d90c      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b65      	ldr	r3, [pc, #404]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0b8      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a58      	ldr	r2, [pc, #352]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	494d      	ldr	r1, [pc, #308]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d044      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d119      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e07f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e067      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4934      	ldr	r1, [pc, #208]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7ff f876 	bl	8000e48 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff f872 	bl	8000e48 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e04f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d20c      	bcs.n	8001db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e032      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4916      	ldr	r1, [pc, #88]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	490e      	ldr	r1, [pc, #56]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dee:	f000 f855 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	490a      	ldr	r1, [pc, #40]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	5ccb      	ldrb	r3, [r1, r3]
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ffd6 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00
 8001e24:	40023800 	.word	0x40023800
 8001e28:	08002e34 	.word	0x08002e34
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000014 	.word	0x20000014

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000010 	.word	0x20000010

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e50:	f7ff fff0 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0a9b      	lsrs	r3, r3, #10
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	08002e44 	.word	0x08002e44

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e78:	f7ff ffdc 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0b5b      	lsrs	r3, r3, #13
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	08002e44 	.word	0x08002e44

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b0ae      	sub	sp, #184	; 0xb8
 8001ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec2:	4bcb      	ldr	r3, [pc, #812]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	f200 8206 	bhi.w	80022dc <HAL_RCC_GetSysClockFreq+0x440>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001f0d 	.word	0x08001f0d
 8001edc:	080022dd 	.word	0x080022dd
 8001ee0:	080022dd 	.word	0x080022dd
 8001ee4:	080022dd 	.word	0x080022dd
 8001ee8:	08001f15 	.word	0x08001f15
 8001eec:	080022dd 	.word	0x080022dd
 8001ef0:	080022dd 	.word	0x080022dd
 8001ef4:	080022dd 	.word	0x080022dd
 8001ef8:	08001f1d 	.word	0x08001f1d
 8001efc:	080022dd 	.word	0x080022dd
 8001f00:	080022dd 	.word	0x080022dd
 8001f04:	080022dd 	.word	0x080022dd
 8001f08:	0800210d 	.word	0x0800210d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4bb9      	ldr	r3, [pc, #740]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001f12:	e1e7      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4bb8      	ldr	r3, [pc, #736]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f1a:	e1e3      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f1c:	4bb4      	ldr	r3, [pc, #720]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f28:	4bb1      	ldr	r3, [pc, #708]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d071      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f34:	4bae      	ldr	r3, [pc, #696]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	462b      	mov	r3, r5
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	0159      	lsls	r1, r3, #5
 8001f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f6c:	0150      	lsls	r0, r2, #5
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4621      	mov	r1, r4
 8001f74:	1a51      	subs	r1, r2, r1
 8001f76:	6439      	str	r1, [r7, #64]	; 0x40
 8001f78:	4629      	mov	r1, r5
 8001f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	018b      	lsls	r3, r1, #6
 8001f90:	4641      	mov	r1, r8
 8001f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f96:	4641      	mov	r1, r8
 8001f98:	018a      	lsls	r2, r1, #6
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	1a51      	subs	r1, r2, r1
 8001f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	00cb      	lsls	r3, r1, #3
 8001fb8:	4641      	mov	r1, r8
 8001fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	00ca      	lsls	r2, r1, #3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4622      	mov	r2, r4
 8001fca:	189b      	adds	r3, r3, r2
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fce:	462b      	mov	r3, r5
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	eb42 0303 	adc.w	r3, r2, r3
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	024b      	lsls	r3, r1, #9
 8001fe8:	4621      	mov	r1, r4
 8001fea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fee:	4621      	mov	r1, r4
 8001ff0:	024a      	lsls	r2, r1, #9
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002000:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002004:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002008:	f7fe f8fc 	bl	8000204 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4613      	mov	r3, r2
 8002012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002016:	e067      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002018:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	2200      	movs	r2, #0
 8002020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002024:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800202c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002030:	67bb      	str	r3, [r7, #120]	; 0x78
 8002032:	2300      	movs	r3, #0
 8002034:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002036:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800203a:	4622      	mov	r2, r4
 800203c:	462b      	mov	r3, r5
 800203e:	f04f 0000 	mov.w	r0, #0
 8002042:	f04f 0100 	mov.w	r1, #0
 8002046:	0159      	lsls	r1, r3, #5
 8002048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800204c:	0150      	lsls	r0, r2, #5
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4621      	mov	r1, r4
 8002054:	1a51      	subs	r1, r2, r1
 8002056:	62b9      	str	r1, [r7, #40]	; 0x28
 8002058:	4629      	mov	r1, r5
 800205a:	eb63 0301 	sbc.w	r3, r3, r1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800206c:	4649      	mov	r1, r9
 800206e:	018b      	lsls	r3, r1, #6
 8002070:	4641      	mov	r1, r8
 8002072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002076:	4641      	mov	r1, r8
 8002078:	018a      	lsls	r2, r1, #6
 800207a:	4641      	mov	r1, r8
 800207c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002080:	4649      	mov	r1, r9
 8002082:	eb63 0b01 	sbc.w	fp, r3, r1
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002092:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002096:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800209a:	4692      	mov	sl, r2
 800209c:	469b      	mov	fp, r3
 800209e:	4623      	mov	r3, r4
 80020a0:	eb1a 0303 	adds.w	r3, sl, r3
 80020a4:	623b      	str	r3, [r7, #32]
 80020a6:	462b      	mov	r3, r5
 80020a8:	eb4b 0303 	adc.w	r3, fp, r3
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020ba:	4629      	mov	r1, r5
 80020bc:	028b      	lsls	r3, r1, #10
 80020be:	4621      	mov	r1, r4
 80020c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020c4:	4621      	mov	r1, r4
 80020c6:	028a      	lsls	r2, r1, #10
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020d0:	2200      	movs	r2, #0
 80020d2:	673b      	str	r3, [r7, #112]	; 0x70
 80020d4:	677a      	str	r2, [r7, #116]	; 0x74
 80020d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020da:	f7fe f893 	bl	8000204 <__aeabi_uldivmod>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4613      	mov	r3, r2
 80020e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e8:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	0c1b      	lsrs	r3, r3, #16
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80020fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800210a:	e0eb      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d06b      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	2200      	movs	r2, #0
 800212c:	66bb      	str	r3, [r7, #104]	; 0x68
 800212e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002136:	663b      	str	r3, [r7, #96]	; 0x60
 8002138:	2300      	movs	r3, #0
 800213a:	667b      	str	r3, [r7, #100]	; 0x64
 800213c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002140:	4622      	mov	r2, r4
 8002142:	462b      	mov	r3, r5
 8002144:	f04f 0000 	mov.w	r0, #0
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	0159      	lsls	r1, r3, #5
 800214e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002152:	0150      	lsls	r0, r2, #5
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4621      	mov	r1, r4
 800215a:	1a51      	subs	r1, r2, r1
 800215c:	61b9      	str	r1, [r7, #24]
 800215e:	4629      	mov	r1, r5
 8002160:	eb63 0301 	sbc.w	r3, r3, r1
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002172:	4659      	mov	r1, fp
 8002174:	018b      	lsls	r3, r1, #6
 8002176:	4651      	mov	r1, sl
 8002178:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800217c:	4651      	mov	r1, sl
 800217e:	018a      	lsls	r2, r1, #6
 8002180:	4651      	mov	r1, sl
 8002182:	ebb2 0801 	subs.w	r8, r2, r1
 8002186:	4659      	mov	r1, fp
 8002188:	eb63 0901 	sbc.w	r9, r3, r1
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002198:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800219c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4623      	mov	r3, r4
 80021a6:	eb18 0303 	adds.w	r3, r8, r3
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	462b      	mov	r3, r5
 80021ae:	eb49 0303 	adc.w	r3, r9, r3
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021c0:	4629      	mov	r1, r5
 80021c2:	024b      	lsls	r3, r1, #9
 80021c4:	4621      	mov	r1, r4
 80021c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021ca:	4621      	mov	r1, r4
 80021cc:	024a      	lsls	r2, r1, #9
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021d6:	2200      	movs	r2, #0
 80021d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80021da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021e0:	f7fe f810 	bl	8000204 <__aeabi_uldivmod>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4613      	mov	r3, r2
 80021ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021ee:	e065      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x420>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	2200      	movs	r2, #0
 8002204:	4618      	mov	r0, r3
 8002206:	4611      	mov	r1, r2
 8002208:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800220c:	653b      	str	r3, [r7, #80]	; 0x50
 800220e:	2300      	movs	r3, #0
 8002210:	657b      	str	r3, [r7, #84]	; 0x54
 8002212:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002216:	4642      	mov	r2, r8
 8002218:	464b      	mov	r3, r9
 800221a:	f04f 0000 	mov.w	r0, #0
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	0159      	lsls	r1, r3, #5
 8002224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002228:	0150      	lsls	r0, r2, #5
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4641      	mov	r1, r8
 8002230:	1a51      	subs	r1, r2, r1
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	4649      	mov	r1, r9
 8002236:	eb63 0301 	sbc.w	r3, r3, r1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002248:	4659      	mov	r1, fp
 800224a:	018b      	lsls	r3, r1, #6
 800224c:	4651      	mov	r1, sl
 800224e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002252:	4651      	mov	r1, sl
 8002254:	018a      	lsls	r2, r1, #6
 8002256:	4651      	mov	r1, sl
 8002258:	1a54      	subs	r4, r2, r1
 800225a:	4659      	mov	r1, fp
 800225c:	eb63 0501 	sbc.w	r5, r3, r1
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	00eb      	lsls	r3, r5, #3
 800226a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226e:	00e2      	lsls	r2, r4, #3
 8002270:	4614      	mov	r4, r2
 8002272:	461d      	mov	r5, r3
 8002274:	4643      	mov	r3, r8
 8002276:	18e3      	adds	r3, r4, r3
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	464b      	mov	r3, r9
 800227c:	eb45 0303 	adc.w	r3, r5, r3
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228e:	4629      	mov	r1, r5
 8002290:	028b      	lsls	r3, r1, #10
 8002292:	4621      	mov	r1, r4
 8002294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002298:	4621      	mov	r1, r4
 800229a:	028a      	lsls	r2, r1, #10
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022a4:	2200      	movs	r2, #0
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80022a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80022aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022ae:	f7fd ffa9 	bl	8000204 <__aeabi_uldivmod>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4613      	mov	r3, r2
 80022b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0f1b      	lsrs	r3, r3, #28
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80022ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022da:	e003      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80022de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	37b8      	adds	r7, #184	; 0xb8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400

080022fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e28d      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8083 	beq.w	8002422 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800231c:	4b94      	ldr	r3, [pc, #592]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b04      	cmp	r3, #4
 8002326:	d019      	beq.n	800235c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002328:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002330:	2b08      	cmp	r3, #8
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002334:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002340:	d00c      	beq.n	800235c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002342:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d112      	bne.n	8002374 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235a:	d10b      	bne.n	8002374 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	4b84      	ldr	r3, [pc, #528]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d05b      	beq.n	8002420 <HAL_RCC_OscConfig+0x124>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d157      	bne.n	8002420 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e25a      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d106      	bne.n	800238c <HAL_RCC_OscConfig+0x90>
 800237e:	4b7c      	ldr	r3, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7b      	ldr	r2, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01d      	b.n	80023c8 <HAL_RCC_OscConfig+0xcc>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0xb4>
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a75      	ldr	r2, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b73      	ldr	r3, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a72      	ldr	r2, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0xcc>
 80023b0:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6b      	ldr	r2, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fd3a 	bl	8000e48 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fd36 	bl	8000e48 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e21f      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0xdc>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fd26 	bl	8000e48 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe fd22 	bl	8000e48 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e20b      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x104>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06f      	beq.n	800250e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800242e:	4b50      	ldr	r3, [pc, #320]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d017      	beq.n	800246a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800243a:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002442:	2b08      	cmp	r3, #8
 8002444:	d105      	bne.n	8002452 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d11c      	bne.n	8002498 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d116      	bne.n	8002498 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x186>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e1d3      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4937      	ldr	r1, [pc, #220]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	e03a      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <HAL_RCC_OscConfig+0x278>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fccf 	bl	8000e48 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fccb 	bl	8000e48 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1b4      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4925      	ldr	r1, [pc, #148]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_OscConfig+0x278>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fcae 	bl	8000e48 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe fcaa 	bl	8000e48 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e193      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d036      	beq.n	8002588 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_RCC_OscConfig+0x27c>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fc8e 	bl	8000e48 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe fc8a 	bl	8000e48 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e173      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x274>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x234>
 800254e:	e01b      	b.n	8002588 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_OscConfig+0x27c>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7fe fc77 	bl	8000e48 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	e00e      	b.n	800257c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255e:	f7fe fc73 	bl	8000e48 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d907      	bls.n	800257c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e15c      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
 8002570:	40023800 	.word	0x40023800
 8002574:	42470000 	.word	0x42470000
 8002578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b8a      	ldr	r3, [pc, #552]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800257e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ea      	bne.n	800255e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8097 	beq.w	80026c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b83      	ldr	r3, [pc, #524]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	4b7f      	ldr	r3, [pc, #508]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a7e      	ldr	r2, [pc, #504]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b7c      	ldr	r3, [pc, #496]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b79      	ldr	r3, [pc, #484]	; (80027ac <HAL_RCC_OscConfig+0x4b0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCC_OscConfig+0x4b0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a75      	ldr	r2, [pc, #468]	; (80027ac <HAL_RCC_OscConfig+0x4b0>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe fc33 	bl	8000e48 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fc2f 	bl	8000e48 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e118      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b6c      	ldr	r3, [pc, #432]	; (80027ac <HAL_RCC_OscConfig+0x4b0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x31e>
 800260c:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a65      	ldr	r2, [pc, #404]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x358>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b05      	cmp	r3, #5
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x340>
 8002622:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a60      	ldr	r2, [pc, #384]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a5d      	ldr	r2, [pc, #372]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0x358>
 800263c:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a59      	ldr	r2, [pc, #356]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe fbf4 	bl	8000e48 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe fbf0 	bl	8000e48 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0d7      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ee      	beq.n	8002664 <HAL_RCC_OscConfig+0x368>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe fbde 	bl	8000e48 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe fbda 	bl	8000e48 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0c1      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ee      	bne.n	8002690 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b8:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 80026be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80ad 	beq.w	8002828 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d060      	beq.n	800279c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d145      	bne.n	800276e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_RCC_OscConfig+0x4b4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fbae 	bl	8000e48 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fbaa 	bl	8000e48 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e093      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	3b01      	subs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	071b      	lsls	r3, r3, #28
 800273a:	491b      	ldr	r1, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x4b4>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe fb7f 	bl	8000e48 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274e:	f7fe fb7b 	bl	8000e48 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e064      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x452>
 800276c:	e05c      	b.n	8002828 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCC_OscConfig+0x4b4>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fb68 	bl	8000e48 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fb64 	bl	8000e48 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e04d      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x480>
 800279a:	e045      	b.n	8002828 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e040      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40007000 	.word	0x40007000
 80027b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <HAL_RCC_OscConfig+0x538>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d030      	beq.n	8002824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d129      	bne.n	8002824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d122      	bne.n	8002824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027e4:	4013      	ands	r3, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d119      	bne.n	8002824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d10f      	bne.n	8002824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e03f      	b.n	80028ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f9de 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f829 	bl	80028d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d8:	b0c0      	sub	sp, #256	; 0x100
 80028da:	af00      	add	r7, sp, #0
 80028dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	ea40 0301 	orr.w	r3, r0, r1
 80028fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800292c:	f021 010c 	bic.w	r1, r1, #12
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800293a:	430b      	orrs	r3, r1
 800293c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	6999      	ldr	r1, [r3, #24]
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	ea40 0301 	orr.w	r3, r0, r1
 800295a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <UART_SetConfig+0x2cc>)
 8002964:	429a      	cmp	r2, r3
 8002966:	d005      	beq.n	8002974 <UART_SetConfig+0xa0>
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b8d      	ldr	r3, [pc, #564]	; (8002ba4 <UART_SetConfig+0x2d0>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d104      	bne.n	800297e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7ff fa7e 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8002978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800297c:	e003      	b.n	8002986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800297e:	f7ff fa65 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8002982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	f040 810c 	bne.w	8002bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002998:	2200      	movs	r2, #0
 800299a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800299e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029a6:	4622      	mov	r2, r4
 80029a8:	462b      	mov	r3, r5
 80029aa:	1891      	adds	r1, r2, r2
 80029ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80029ae:	415b      	adcs	r3, r3
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029b6:	4621      	mov	r1, r4
 80029b8:	eb12 0801 	adds.w	r8, r2, r1
 80029bc:	4629      	mov	r1, r5
 80029be:	eb43 0901 	adc.w	r9, r3, r1
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d6:	4690      	mov	r8, r2
 80029d8:	4699      	mov	r9, r3
 80029da:	4623      	mov	r3, r4
 80029dc:	eb18 0303 	adds.w	r3, r8, r3
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029e4:	462b      	mov	r3, r5
 80029e6:	eb49 0303 	adc.w	r3, r9, r3
 80029ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a02:	460b      	mov	r3, r1
 8002a04:	18db      	adds	r3, r3, r3
 8002a06:	653b      	str	r3, [r7, #80]	; 0x50
 8002a08:	4613      	mov	r3, r2
 8002a0a:	eb42 0303 	adc.w	r3, r2, r3
 8002a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a18:	f7fd fbf4 	bl	8000204 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002a22:	fba3 2302 	umull	r2, r3, r3, r2
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	011c      	lsls	r4, r3, #4
 8002a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	1891      	adds	r1, r2, r2
 8002a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a44:	415b      	adcs	r3, r3
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a52:	4649      	mov	r1, r9
 8002a54:	eb43 0b01 	adc.w	fp, r3, r1
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a6c:	4692      	mov	sl, r2
 8002a6e:	469b      	mov	fp, r3
 8002a70:	4643      	mov	r3, r8
 8002a72:	eb1a 0303 	adds.w	r3, sl, r3
 8002a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	18db      	adds	r3, r3, r3
 8002a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aae:	f7fd fba9 	bl	8000204 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002aba:	fba3 2301 	umull	r2, r3, r3, r1
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2264      	movs	r2, #100	; 0x64
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	1acb      	subs	r3, r1, r3
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002adc:	441c      	add	r4, r3
 8002ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002af0:	4642      	mov	r2, r8
 8002af2:	464b      	mov	r3, r9
 8002af4:	1891      	adds	r1, r2, r2
 8002af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002af8:	415b      	adcs	r3, r3
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b00:	4641      	mov	r1, r8
 8002b02:	1851      	adds	r1, r2, r1
 8002b04:	6339      	str	r1, [r7, #48]	; 0x30
 8002b06:	4649      	mov	r1, r9
 8002b08:	414b      	adcs	r3, r1
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b18:	4659      	mov	r1, fp
 8002b1a:	00cb      	lsls	r3, r1, #3
 8002b1c:	4651      	mov	r1, sl
 8002b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b22:	4651      	mov	r1, sl
 8002b24:	00ca      	lsls	r2, r1, #3
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	189b      	adds	r3, r3, r2
 8002b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b34:	464b      	mov	r3, r9
 8002b36:	460a      	mov	r2, r1
 8002b38:	eb42 0303 	adc.w	r3, r2, r3
 8002b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b54:	460b      	mov	r3, r1
 8002b56:	18db      	adds	r3, r3, r3
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	eb42 0303 	adc.w	r3, r2, r3
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b6a:	f7fd fb4b 	bl	8000204 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <UART_SetConfig+0x2d4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 0207 	and.w	r2, r3, #7
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4422      	add	r2, r4
 8002b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b9c:	e105      	b.n	8002daa <UART_SetConfig+0x4d6>
 8002b9e:	bf00      	nop
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	40011400 	.word	0x40011400
 8002ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	1891      	adds	r1, r2, r2
 8002bc4:	6239      	str	r1, [r7, #32]
 8002bc6:	415b      	adcs	r3, r3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bce:	4641      	mov	r1, r8
 8002bd0:	1854      	adds	r4, r2, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	eb43 0501 	adc.w	r5, r3, r1
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	00eb      	lsls	r3, r5, #3
 8002be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be6:	00e2      	lsls	r2, r4, #3
 8002be8:	4614      	mov	r4, r2
 8002bea:	461d      	mov	r5, r3
 8002bec:	4643      	mov	r3, r8
 8002bee:	18e3      	adds	r3, r4, r3
 8002bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	eb45 0303 	adc.w	r3, r5, r3
 8002bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	008b      	lsls	r3, r1, #2
 8002c1e:	4621      	mov	r1, r4
 8002c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c24:	4621      	mov	r1, r4
 8002c26:	008a      	lsls	r2, r1, #2
 8002c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c2c:	f7fd faea 	bl	8000204 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002c36:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	011c      	lsls	r4, r3, #4
 8002c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c50:	4642      	mov	r2, r8
 8002c52:	464b      	mov	r3, r9
 8002c54:	1891      	adds	r1, r2, r2
 8002c56:	61b9      	str	r1, [r7, #24]
 8002c58:	415b      	adcs	r3, r3
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c60:	4641      	mov	r1, r8
 8002c62:	1851      	adds	r1, r2, r1
 8002c64:	6139      	str	r1, [r7, #16]
 8002c66:	4649      	mov	r1, r9
 8002c68:	414b      	adcs	r3, r1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c78:	4659      	mov	r1, fp
 8002c7a:	00cb      	lsls	r3, r1, #3
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c82:	4651      	mov	r1, sl
 8002c84:	00ca      	lsls	r2, r1, #3
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c94:	464b      	mov	r3, r9
 8002c96:	460a      	mov	r2, r1
 8002c98:	eb42 0303 	adc.w	r3, r2, r3
 8002c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cb8:	4649      	mov	r1, r9
 8002cba:	008b      	lsls	r3, r1, #2
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	008a      	lsls	r2, r1, #2
 8002cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cca:	f7fd fa9b 	bl	8000204 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	2164      	movs	r1, #100	; 0x64
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	3332      	adds	r3, #50	; 0x32
 8002ce6:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf2:	441c      	add	r4, r3
 8002cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8002cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8002cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d12:	4641      	mov	r1, r8
 8002d14:	1851      	adds	r1, r2, r1
 8002d16:	6039      	str	r1, [r7, #0]
 8002d18:	4649      	mov	r1, r9
 8002d1a:	414b      	adcs	r3, r1
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d2a:	4659      	mov	r1, fp
 8002d2c:	00cb      	lsls	r3, r1, #3
 8002d2e:	4651      	mov	r1, sl
 8002d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d34:	4651      	mov	r1, sl
 8002d36:	00ca      	lsls	r2, r1, #3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4642      	mov	r2, r8
 8002d40:	189b      	adds	r3, r3, r2
 8002d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d44:	464b      	mov	r3, r9
 8002d46:	460a      	mov	r2, r1
 8002d48:	eb42 0303 	adc.w	r3, r2, r3
 8002d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	663b      	str	r3, [r7, #96]	; 0x60
 8002d58:	667a      	str	r2, [r7, #100]	; 0x64
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d66:	4649      	mov	r1, r9
 8002d68:	008b      	lsls	r3, r1, #2
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d70:	4641      	mov	r1, r8
 8002d72:	008a      	lsls	r2, r1, #2
 8002d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d78:	f7fd fa44 	bl	8000204 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002d82:	fba3 1302 	umull	r1, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2164      	movs	r1, #100	; 0x64
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	3332      	adds	r3, #50	; 0x32
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <UART_SetConfig+0x4e4>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4422      	add	r2, r4
 8002da8:	609a      	str	r2, [r3, #8]
}
 8002daa:	bf00      	nop
 8002dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db6:	bf00      	nop
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <__libc_init_array>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	4d0d      	ldr	r5, [pc, #52]	; (8002df4 <__libc_init_array+0x38>)
 8002dc0:	4c0d      	ldr	r4, [pc, #52]	; (8002df8 <__libc_init_array+0x3c>)
 8002dc2:	1b64      	subs	r4, r4, r5
 8002dc4:	10a4      	asrs	r4, r4, #2
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	42a6      	cmp	r6, r4
 8002dca:	d109      	bne.n	8002de0 <__libc_init_array+0x24>
 8002dcc:	4d0b      	ldr	r5, [pc, #44]	; (8002dfc <__libc_init_array+0x40>)
 8002dce:	4c0c      	ldr	r4, [pc, #48]	; (8002e00 <__libc_init_array+0x44>)
 8002dd0:	f000 f820 	bl	8002e14 <_init>
 8002dd4:	1b64      	subs	r4, r4, r5
 8002dd6:	10a4      	asrs	r4, r4, #2
 8002dd8:	2600      	movs	r6, #0
 8002dda:	42a6      	cmp	r6, r4
 8002ddc:	d105      	bne.n	8002dea <__libc_init_array+0x2e>
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
 8002de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de4:	4798      	blx	r3
 8002de6:	3601      	adds	r6, #1
 8002de8:	e7ee      	b.n	8002dc8 <__libc_init_array+0xc>
 8002dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dee:	4798      	blx	r3
 8002df0:	3601      	adds	r6, #1
 8002df2:	e7f2      	b.n	8002dda <__libc_init_array+0x1e>
 8002df4:	08002e54 	.word	0x08002e54
 8002df8:	08002e54 	.word	0x08002e54
 8002dfc:	08002e54 	.word	0x08002e54
 8002e00:	08002e58 	.word	0x08002e58

08002e04 <memset>:
 8002e04:	4402      	add	r2, r0
 8002e06:	4603      	mov	r3, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <_init>:
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	bf00      	nop
 8002e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1a:	bc08      	pop	{r3}
 8002e1c:	469e      	mov	lr, r3
 8002e1e:	4770      	bx	lr

08002e20 <_fini>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	bf00      	nop
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr
