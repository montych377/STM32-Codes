
STM32F401_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a24  08002a24  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a28  08002a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000080  08002aac  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002aac  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c2c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f9f  00000000  00000000  00023cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  00024c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  000250c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152eb  00000000  00000000  00025478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053f1  00000000  00000000  0003a763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829c9  00000000  00000000  0003fb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c251d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e4  00000000  00000000  000c2570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002868 	.word	0x08002868

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08002868 	.word	0x08002868

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fce8 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f808 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f866 	bl	8000660 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000594:	f000 fa7c 	bl	8000a90 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Calculator();
 8000598:	f000 f8d6 	bl	8000748 <Calculator>
 800059c:	e7fc      	b.n	8000598 <main+0x14>
	...

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fc58 	bl	8001e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <SystemClock_Config+0xb8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <SystemClock_Config+0xb8>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <SystemClock_Config+0xb8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <SystemClock_Config+0xbc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <SystemClock_Config+0xbc>)
 80005ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <SystemClock_Config+0xbc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f000 ffd3 	bl	80015c0 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000620:	f000 fbd2 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fa36 	bl	8001ab0 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800064a:	f000 fbbd 	bl	8000dc8 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <MX_GPIO_Init+0xdc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a2f      	ldr	r2, [pc, #188]	; (800073c <MX_GPIO_Init+0xdc>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_GPIO_Init+0xdc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_GPIO_Init+0xdc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a28      	ldr	r2, [pc, #160]	; (800073c <MX_GPIO_Init+0xdc>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_GPIO_Init+0xdc>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_GPIO_Init+0xdc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_GPIO_Init+0xdc>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_GPIO_Init+0xdc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	210f      	movs	r1, #15
 80006ce:	481c      	ldr	r0, [pc, #112]	; (8000740 <MX_GPIO_Init+0xe0>)
 80006d0:	f000 ff5c 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D0_Pin
 80006d4:	2200      	movs	r2, #0
 80006d6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <MX_GPIO_Init+0xe4>)
 80006dc:	f000 ff56 	bl	800158c <HAL_GPIO_WritePin>
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_GPIO_Init+0xe0>)
 80006f8:	f000 fdac 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D0_Pin
 80006fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000700:	60fb      	str	r3, [r7, #12]
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <MX_GPIO_Init+0xe4>)
 8000716:	f000 fd9d 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 800071a:	23f0      	movs	r3, #240	; 0xf0
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xe0>)
 800072e:	f000 fd91 	bl	8001254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40020800 	.word	0x40020800
 8000744:	40020000 	.word	0x40020000

08000748 <Calculator>:

/* USER CODE BEGIN 4 */


void Calculator( void ) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0

	char num1[10],num2[10],op;
	uint8_t  i=0,j=0;
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint16_t result =0;
 800075a:	2300      	movs	r3, #0
 800075c:	86bb      	strh	r3, [r7, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, C1_Pin, 1);
 800075e:	2201      	movs	r2, #1
 8000760:	2110      	movs	r1, #16
 8000762:	4883      	ldr	r0, [pc, #524]	; (8000970 <Calculator+0x228>)
 8000764:	f000 ff12 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C2_Pin, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	2120      	movs	r1, #32
 800076c:	4880      	ldr	r0, [pc, #512]	; (8000970 <Calculator+0x228>)
 800076e:	f000 ff0d 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C3_Pin, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	487e      	ldr	r0, [pc, #504]	; (8000970 <Calculator+0x228>)
 8000778:	f000 ff08 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, C4_Pin, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	487b      	ldr	r0, [pc, #492]	; (8000970 <Calculator+0x228>)
 8000782:	f000 ff03 	bl	800158c <HAL_GPIO_WritePin>
	LCD_Cmd(0x80);
 8000786:	2080      	movs	r0, #128	; 0x80
 8000788:	f000 f92e 	bl	80009e8 <LCD_Cmd>
	LCD_String("Enter Num1:       ");
 800078c:	4879      	ldr	r0, [pc, #484]	; (8000974 <Calculator+0x22c>)
 800078e:	f000 f992 	bl	8000ab6 <LCD_String>

	while(1) {

		char key = Read_Keypad();
 8000792:	f000 f9a5 	bl	8000ae0 <Read_Keypad>
 8000796:	4603      	mov	r3, r0
 8000798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(key != 0){
 800079c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0f6      	beq.n	8000792 <Calculator+0x4a>
			if(key >= '0' && key <= '9') {
 80007a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007a8:	2b2f      	cmp	r3, #47	; 0x2f
 80007aa:	d919      	bls.n	80007e0 <Calculator+0x98>
 80007ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007b0:	2b39      	cmp	r3, #57	; 0x39
 80007b2:	d815      	bhi.n	80007e0 <Calculator+0x98>

				num1[i] = key;
 80007b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007b8:	3338      	adds	r3, #56	; 0x38
 80007ba:	443b      	add	r3, r7
 80007bc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80007c0:	f803 2c1c 	strb.w	r2, [r3, #-28]
				i++;
 80007c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007c8:	3301      	adds	r3, #1
 80007ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				//num1[i] = '\0';
				LCD_Cmd(0x8b);
 80007ce:	208b      	movs	r0, #139	; 0x8b
 80007d0:	f000 f90a 	bl	80009e8 <LCD_Cmd>
				LCD_String(num1);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f96c 	bl	8000ab6 <LCD_String>
 80007de:	e00e      	b.n	80007fe <Calculator+0xb6>
			}
			else if( key == '=') {
 80007e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007e4:	2b3d      	cmp	r3, #61	; 0x3d
 80007e6:	d1d4      	bne.n	8000792 <Calculator+0x4a>
				 i=0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				 break;
 80007ee:	bf00      	nop
			}
		}
	}

	LCD_Cmd(0x80);
 80007f0:	2080      	movs	r0, #128	; 0x80
 80007f2:	f000 f8f9 	bl	80009e8 <LCD_Cmd>
	LCD_String("Enter Op :       ");
 80007f6:	4860      	ldr	r0, [pc, #384]	; (8000978 <Calculator+0x230>)
 80007f8:	f000 f95d 	bl	8000ab6 <LCD_String>
 80007fc:	e000      	b.n	8000800 <Calculator+0xb8>
	while(1) {
 80007fe:	e7c8      	b.n	8000792 <Calculator+0x4a>
	while(1) {

		char key = Read_Keypad();
 8000800:	f000 f96e 	bl	8000ae0 <Read_Keypad>
 8000804:	4603      	mov	r3, r0
 8000806:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		if(key != 0){
 800080a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f6      	beq.n	8000800 <Calculator+0xb8>
			if(key == '+' || key == '-' || key == '*' || key == '/') {
 8000812:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000816:	2b2b      	cmp	r3, #43	; 0x2b
 8000818:	d00b      	beq.n	8000832 <Calculator+0xea>
 800081a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800081e:	2b2d      	cmp	r3, #45	; 0x2d
 8000820:	d007      	beq.n	8000832 <Calculator+0xea>
 8000822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000826:	2b2a      	cmp	r3, #42	; 0x2a
 8000828:	d003      	beq.n	8000832 <Calculator+0xea>
 800082a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800082e:	2b2f      	cmp	r3, #47	; 0x2f
 8000830:	d1e6      	bne.n	8000800 <Calculator+0xb8>

				op = key;
 8000832:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000836:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				LCD_Cmd(0x80);
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	f000 f8d4 	bl	80009e8 <LCD_Cmd>
				LCD_String("You Want:");
 8000840:	484e      	ldr	r0, [pc, #312]	; (800097c <Calculator+0x234>)
 8000842:	f000 f938 	bl	8000ab6 <LCD_String>
				LCD_Cmd(0x8b);
 8000846:	208b      	movs	r0, #139	; 0x8b
 8000848:	f000 f8ce 	bl	80009e8 <LCD_Cmd>
				LCD_Data(key);
 800084c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f8f3 	bl	8000a3c <LCD_Data>
				HAL_Delay(1000);
 8000856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085a:	f000 fbf1 	bl	8001040 <HAL_Delay>
				break;
 800085e:	bf00      	nop
			}
		}
	}

	LCD_Cmd(0x80);
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	f000 f8c1 	bl	80009e8 <LCD_Cmd>
	LCD_String("Enter Num2 :     ");
 8000866:	4846      	ldr	r0, [pc, #280]	; (8000980 <Calculator+0x238>)
 8000868:	f000 f925 	bl	8000ab6 <LCD_String>

	while(1) {

		char key = Read_Keypad();
 800086c:	f000 f938 	bl	8000ae0 <Read_Keypad>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		if(key >= '0' && key <= '9') {
 8000876:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800087a:	2b2f      	cmp	r3, #47	; 0x2f
 800087c:	d919      	bls.n	80008b2 <Calculator+0x16a>
 800087e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000882:	2b39      	cmp	r3, #57	; 0x39
 8000884:	d815      	bhi.n	80008b2 <Calculator+0x16a>

			num2[j] = key;
 8000886:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800088a:	3338      	adds	r3, #56	; 0x38
 800088c:	443b      	add	r3, r7
 800088e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000892:	f803 2c28 	strb.w	r2, [r3, #-40]
			j++;
 8000896:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800089a:	3301      	adds	r3, #1
 800089c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			//num1[j] = '\0';
			LCD_Cmd(0x8d);
 80008a0:	208d      	movs	r0, #141	; 0x8d
 80008a2:	f000 f8a1 	bl	80009e8 <LCD_Cmd>
			LCD_String(num2);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f903 	bl	8000ab6 <LCD_String>
 80008b0:	e028      	b.n	8000904 <Calculator+0x1bc>
		}
		else if( key == '=') {
 80008b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008b6:	2b3d      	cmp	r3, #61	; 0x3d
 80008b8:	d1d8      	bne.n	800086c <Calculator+0x124>
			 j=0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			 break;
 80008c0:	bf00      	nop
		}
	}

	int n1 = atoi(num1);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fa9e 	bl	8001e08 <atoi>
 80008cc:	62f8      	str	r0, [r7, #44]	; 0x2c
	int n2 = atoi(num2);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fa98 	bl	8001e08 <atoi>
 80008d8:	62b8      	str	r0, [r7, #40]	; 0x28

	switch(op) {
 80008da:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80008de:	3b2a      	subs	r3, #42	; 0x2a
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	d82c      	bhi.n	800093e <Calculator+0x1f6>
 80008e4:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <Calculator+0x1a4>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	08000923 	.word	0x08000923
 80008f0:	08000907 	.word	0x08000907
 80008f4:	0800093f 	.word	0x0800093f
 80008f8:	08000915 	.word	0x08000915
 80008fc:	0800093f 	.word	0x0800093f
 8000900:	08000933 	.word	0x08000933
	while(1) {
 8000904:	e7b2      	b.n	800086c <Calculator+0x124>

	case '+':
		result = n1+n2;
 8000906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000908:	b29a      	uxth	r2, r3
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	86bb      	strh	r3, [r7, #52]	; 0x34
		break;
 8000912:	e015      	b.n	8000940 <Calculator+0x1f8>

	case '-':
		result = n1-n2;
 8000914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000916:	b29a      	uxth	r2, r3
 8000918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091a:	b29b      	uxth	r3, r3
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	86bb      	strh	r3, [r7, #52]	; 0x34
		break;
 8000920:	e00e      	b.n	8000940 <Calculator+0x1f8>
	case '*':
		result = n1*n2;
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	b29a      	uxth	r2, r3
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	b29b      	uxth	r3, r3
 800092a:	fb12 f303 	smulbb	r3, r2, r3
 800092e:	86bb      	strh	r3, [r7, #52]	; 0x34
		break;
 8000930:	e006      	b.n	8000940 <Calculator+0x1f8>
	case '/':
		result = n1/n2;
 8000932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000936:	fb92 f3f3 	sdiv	r3, r2, r3
 800093a:	86bb      	strh	r3, [r7, #52]	; 0x34
		break;
 800093c:	e000      	b.n	8000940 <Calculator+0x1f8>
	default:
		break;
 800093e:	bf00      	nop
	}
	LCD_Cmd(0x01);
 8000940:	2001      	movs	r0, #1
 8000942:	f000 f851 	bl	80009e8 <LCD_Cmd>
	char str[16];
	sprintf(str, "Result : %02d",result);
 8000946:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000948:	463b      	mov	r3, r7
 800094a:	490e      	ldr	r1, [pc, #56]	; (8000984 <Calculator+0x23c>)
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fa91 	bl	8001e74 <siprintf>
	LCD_Cmd(0x80);
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	f000 f848 	bl	80009e8 <LCD_Cmd>
	LCD_String(str);
 8000958:	463b      	mov	r3, r7
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f8ab 	bl	8000ab6 <LCD_String>
	HAL_Delay(5000);
 8000960:	f241 3088 	movw	r0, #5000	; 0x1388
 8000964:	f000 fb6c 	bl	8001040 <HAL_Delay>

}
 8000968:	bf00      	nop
 800096a:	3738      	adds	r7, #56	; 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40020800 	.word	0x40020800
 8000974:	08002880 	.word	0x08002880
 8000978:	08002894 	.word	0x08002894
 800097c:	080028a8 	.word	0x080028a8
 8000980:	080028b4 	.word	0x080028b4
 8000984:	080028c8 	.word	0x080028c8

08000988 <DataByte_Write>:
void DataByte_Write(char data) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]

	for( i=0;i<8;i++) {
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <DataByte_Write+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e017      	b.n	80009ca <DataByte_Write+0x42>

		HAL_GPIO_WritePin(GPIOA, pin[i], ((data>>i)&0x01) ? GPIO_PIN_SET:GPIO_PIN_RESET);
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <DataByte_Write+0x54>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <DataByte_Write+0x58>)
 80009a2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <DataByte_Write+0x54>)
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	4113      	asrs	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	480a      	ldr	r0, [pc, #40]	; (80009e4 <DataByte_Write+0x5c>)
 80009ba:	f000 fde7 	bl	800158c <HAL_GPIO_WritePin>
	for( i=0;i<8;i++) {
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <DataByte_Write+0x54>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <DataByte_Write+0x54>)
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <DataByte_Write+0x54>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d9e3      	bls.n	800099a <DataByte_Write+0x12>
	}
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000009c 	.word	0x2000009c
 80009e0:	20000000 	.word	0x20000000
 80009e4:	40020000 	.word	0x40020000

080009e8 <LCD_Cmd>:

void LCD_Cmd(char cmd) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]

	DataByte_Write(cmd);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffc7 	bl	8000988 <DataByte_Write>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <LCD_Cmd+0x50>)
 8000a00:	f000 fdc4 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2102      	movs	r1, #2
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <LCD_Cmd+0x50>)
 8000a0a:	f000 fdbf 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2104      	movs	r1, #4
 8000a12:	4809      	ldr	r0, [pc, #36]	; (8000a38 <LCD_Cmd+0x50>)
 8000a14:	f000 fdba 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f000 fb11 	bl	8001040 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2104      	movs	r1, #4
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <LCD_Cmd+0x50>)
 8000a24:	f000 fdb2 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f000 fb09 	bl	8001040 <HAL_Delay>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40020000 	.word	0x40020000

08000a3c <LCD_Data>:

void LCD_Data(char data) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]

	DataByte_Write(data);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff9d 	bl	8000988 <DataByte_Write>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2101      	movs	r1, #1
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <LCD_Data+0x50>)
 8000a54:	f000 fd9a 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <LCD_Data+0x50>)
 8000a5e:	f000 fd95 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <LCD_Data+0x50>)
 8000a68:	f000 fd90 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f000 fae7 	bl	8001040 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2104      	movs	r1, #4
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <LCD_Data+0x50>)
 8000a78:	f000 fd88 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f000 fadf 	bl	8001040 <HAL_Delay>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020000 	.word	0x40020000

08000a90 <LCD_Init>:

void LCD_Init() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

	LCD_Cmd(0x01);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff ffa7 	bl	80009e8 <LCD_Cmd>
	LCD_Cmd(0x02);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff ffa4 	bl	80009e8 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000aa0:	2006      	movs	r0, #6
 8000aa2:	f7ff ffa1 	bl	80009e8 <LCD_Cmd>
	LCD_Cmd(0x38);
 8000aa6:	2038      	movs	r0, #56	; 0x38
 8000aa8:	f7ff ff9e 	bl	80009e8 <LCD_Cmd>
	LCD_Cmd(0x0C);
 8000aac:	200c      	movs	r0, #12
 8000aae:	f7ff ff9b 	bl	80009e8 <LCD_Cmd>

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <LCD_String>:

void LCD_String(char *ptr) {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]

	while(*ptr) {
 8000abe:	e006      	b.n	8000ace <LCD_String+0x18>
		LCD_Data(*ptr++);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffb7 	bl	8000a3c <LCD_Data>
	while(*ptr) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1f4      	bne.n	8000ac0 <LCD_String+0xa>
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <Read_Keypad>:

uint8_t Read_Keypad( void ) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, R1_Pin, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	48b6      	ldr	r0, [pc, #728]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000aea:	f000 fd4f 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R2_Pin, 1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2102      	movs	r1, #2
 8000af2:	48b4      	ldr	r0, [pc, #720]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000af4:	f000 fd4a 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R3_Pin, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2104      	movs	r1, #4
 8000afc:	48b1      	ldr	r0, [pc, #708]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000afe:	f000 fd45 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R4_Pin, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2108      	movs	r1, #8
 8000b06:	48af      	ldr	r0, [pc, #700]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b08:	f000 fd40 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000b0c:	2014      	movs	r0, #20
 8000b0e:	f000 fa97 	bl	8001040 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, C1_Pin) == 0) {
 8000b12:	2110      	movs	r1, #16
 8000b14:	48ab      	ldr	r0, [pc, #684]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b16:	f000 fd21 	bl	800155c <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d109      	bne.n	8000b34 <Read_Keypad+0x54>

		while(HAL_GPIO_ReadPin(GPIOC, C1_Pin) == 0);
 8000b20:	bf00      	nop
 8000b22:	2110      	movs	r1, #16
 8000b24:	48a7      	ldr	r0, [pc, #668]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b26:	f000 fd19 	bl	800155c <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d0f8      	beq.n	8000b22 <Read_Keypad+0x42>
		return '7';
 8000b30:	2337      	movs	r3, #55	; 0x37
 8000b32:	e144      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0) {
 8000b34:	2120      	movs	r1, #32
 8000b36:	48a3      	ldr	r0, [pc, #652]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b38:	f000 fd10 	bl	800155c <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d109      	bne.n	8000b56 <Read_Keypad+0x76>


		while(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0);
 8000b42:	bf00      	nop
 8000b44:	2120      	movs	r1, #32
 8000b46:	489f      	ldr	r0, [pc, #636]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b48:	f000 fd08 	bl	800155c <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f8      	beq.n	8000b44 <Read_Keypad+0x64>
		return '8';
 8000b52:	2338      	movs	r3, #56	; 0x38
 8000b54:	e133      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0) {
 8000b56:	2140      	movs	r1, #64	; 0x40
 8000b58:	489a      	ldr	r0, [pc, #616]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b5a:	f000 fcff 	bl	800155c <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d109      	bne.n	8000b78 <Read_Keypad+0x98>


		while(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0);
 8000b64:	bf00      	nop
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	4896      	ldr	r0, [pc, #600]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b6a:	f000 fcf7 	bl	800155c <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0f8      	beq.n	8000b66 <Read_Keypad+0x86>
		return '9';
 8000b74:	2339      	movs	r3, #57	; 0x39
 8000b76:	e122      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0) {
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	4892      	ldr	r0, [pc, #584]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b7c:	f000 fcee 	bl	800155c <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d109      	bne.n	8000b9a <Read_Keypad+0xba>


		while(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0);
 8000b86:	bf00      	nop
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	488e      	ldr	r0, [pc, #568]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000b8c:	f000 fce6 	bl	800155c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f8      	beq.n	8000b88 <Read_Keypad+0xa8>
		return '/';
 8000b96:	232f      	movs	r3, #47	; 0x2f
 8000b98:	e111      	b.n	8000dbe <Read_Keypad+0x2de>
	}




	HAL_GPIO_WritePin(GPIOC, R1_Pin, 1);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4889      	ldr	r0, [pc, #548]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000ba0:	f000 fcf4 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R2_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4886      	ldr	r0, [pc, #536]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000baa:	f000 fcef 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R3_Pin, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4884      	ldr	r0, [pc, #528]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000bb4:	f000 fcea 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R4_Pin, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4881      	ldr	r0, [pc, #516]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000bbe:	f000 fce5 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000bc2:	2014      	movs	r0, #20
 8000bc4:	f000 fa3c 	bl	8001040 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, C1_Pin) ==0) {
 8000bc8:	2110      	movs	r1, #16
 8000bca:	487e      	ldr	r0, [pc, #504]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000bcc:	f000 fcc6 	bl	800155c <HAL_GPIO_ReadPin>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <Read_Keypad+0x10a>

		while(HAL_GPIO_ReadPin(GPIOC, C1_Pin) == 0);
 8000bd6:	bf00      	nop
 8000bd8:	2110      	movs	r1, #16
 8000bda:	487a      	ldr	r0, [pc, #488]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000bdc:	f000 fcbe 	bl	800155c <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f8      	beq.n	8000bd8 <Read_Keypad+0xf8>
		return '4';
 8000be6:	2334      	movs	r3, #52	; 0x34
 8000be8:	e0e9      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0) {
 8000bea:	2120      	movs	r1, #32
 8000bec:	4875      	ldr	r0, [pc, #468]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000bee:	f000 fcb5 	bl	800155c <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <Read_Keypad+0x12c>

		while(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0);
 8000bf8:	bf00      	nop
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	4871      	ldr	r0, [pc, #452]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000bfe:	f000 fcad 	bl	800155c <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f8      	beq.n	8000bfa <Read_Keypad+0x11a>
		return '5';
 8000c08:	2335      	movs	r3, #53	; 0x35
 8000c0a:	e0d8      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0) {
 8000c0c:	2140      	movs	r1, #64	; 0x40
 8000c0e:	486d      	ldr	r0, [pc, #436]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c10:	f000 fca4 	bl	800155c <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <Read_Keypad+0x14e>

		while(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0);
 8000c1a:	bf00      	nop
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	4869      	ldr	r0, [pc, #420]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c20:	f000 fc9c 	bl	800155c <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f8      	beq.n	8000c1c <Read_Keypad+0x13c>
		return '6';
 8000c2a:	2336      	movs	r3, #54	; 0x36
 8000c2c:	e0c7      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0) {
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	4864      	ldr	r0, [pc, #400]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c32:	f000 fc93 	bl	800155c <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d109      	bne.n	8000c50 <Read_Keypad+0x170>

		while(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0);
 8000c3c:	bf00      	nop
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	4860      	ldr	r0, [pc, #384]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c42:	f000 fc8b 	bl	800155c <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f8      	beq.n	8000c3e <Read_Keypad+0x15e>
		return '*';
 8000c4c:	232a      	movs	r3, #42	; 0x2a
 8000c4e:	e0b6      	b.n	8000dbe <Read_Keypad+0x2de>





	HAL_GPIO_WritePin(GPIOC, R1_Pin, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	485b      	ldr	r0, [pc, #364]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c56:	f000 fc99 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R2_Pin, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4859      	ldr	r0, [pc, #356]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c60:	f000 fc94 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R3_Pin, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2104      	movs	r1, #4
 8000c68:	4856      	ldr	r0, [pc, #344]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c6a:	f000 fc8f 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R4_Pin, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2108      	movs	r1, #8
 8000c72:	4854      	ldr	r0, [pc, #336]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c74:	f000 fc8a 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000c78:	2014      	movs	r0, #20
 8000c7a:	f000 f9e1 	bl	8001040 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, C1_Pin) == 0) {
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4850      	ldr	r0, [pc, #320]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c82:	f000 fc6b 	bl	800155c <HAL_GPIO_ReadPin>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d109      	bne.n	8000ca0 <Read_Keypad+0x1c0>

		while(HAL_GPIO_ReadPin(GPIOC, C1_Pin) == 0);
 8000c8c:	bf00      	nop
 8000c8e:	2110      	movs	r1, #16
 8000c90:	484c      	ldr	r0, [pc, #304]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000c92:	f000 fc63 	bl	800155c <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f8      	beq.n	8000c8e <Read_Keypad+0x1ae>
		return '1';
 8000c9c:	2331      	movs	r3, #49	; 0x31
 8000c9e:	e08e      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0) {
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4848      	ldr	r0, [pc, #288]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000ca4:	f000 fc5a 	bl	800155c <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d109      	bne.n	8000cc2 <Read_Keypad+0x1e2>

		while(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0);
 8000cae:	bf00      	nop
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4844      	ldr	r0, [pc, #272]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000cb4:	f000 fc52 	bl	800155c <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f8      	beq.n	8000cb0 <Read_Keypad+0x1d0>
		return '2';
 8000cbe:	2332      	movs	r3, #50	; 0x32
 8000cc0:	e07d      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0) {
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	483f      	ldr	r0, [pc, #252]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000cc6:	f000 fc49 	bl	800155c <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <Read_Keypad+0x204>

		while(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0);
 8000cd0:	bf00      	nop
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	483b      	ldr	r0, [pc, #236]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000cd6:	f000 fc41 	bl	800155c <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f8      	beq.n	8000cd2 <Read_Keypad+0x1f2>
		return '3';
 8000ce0:	2333      	movs	r3, #51	; 0x33
 8000ce2:	e06c      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0) {
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	4837      	ldr	r0, [pc, #220]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000ce8:	f000 fc38 	bl	800155c <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <Read_Keypad+0x226>

		while(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0);
 8000cf2:	bf00      	nop
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4833      	ldr	r0, [pc, #204]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000cf8:	f000 fc30 	bl	800155c <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f8      	beq.n	8000cf4 <Read_Keypad+0x214>
		return '-';
 8000d02:	232d      	movs	r3, #45	; 0x2d
 8000d04:	e05b      	b.n	8000dbe <Read_Keypad+0x2de>





	HAL_GPIO_WritePin(GPIOC, R1_Pin, 1);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2101      	movs	r1, #1
 8000d0a:	482e      	ldr	r0, [pc, #184]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d0c:	f000 fc3e 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R2_Pin, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2102      	movs	r1, #2
 8000d14:	482b      	ldr	r0, [pc, #172]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d16:	f000 fc39 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R3_Pin, 1);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d20:	f000 fc34 	bl	800158c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R4_Pin, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2108      	movs	r1, #8
 8000d28:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d2a:	f000 fc2f 	bl	800158c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000d2e:	2014      	movs	r0, #20
 8000d30:	f000 f986 	bl	8001040 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOC, C1_Pin) == 0) {
 8000d34:	2110      	movs	r1, #16
 8000d36:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d38:	f000 fc10 	bl	800155c <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <Read_Keypad+0x276>

		while(HAL_GPIO_ReadPin(GPIOC, C1_Pin) == 0);
 8000d42:	bf00      	nop
 8000d44:	2110      	movs	r1, #16
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d48:	f000 fc08 	bl	800155c <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f8      	beq.n	8000d44 <Read_Keypad+0x264>
		return 'C';
 8000d52:	2343      	movs	r3, #67	; 0x43
 8000d54:	e033      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0) {
 8000d56:	2120      	movs	r1, #32
 8000d58:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d5a:	f000 fbff 	bl	800155c <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d109      	bne.n	8000d78 <Read_Keypad+0x298>

		while(HAL_GPIO_ReadPin(GPIOC, C2_Pin) == 0);
 8000d64:	bf00      	nop
 8000d66:	2120      	movs	r1, #32
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d6a:	f000 fbf7 	bl	800155c <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f8      	beq.n	8000d66 <Read_Keypad+0x286>
		return '0';
 8000d74:	2330      	movs	r3, #48	; 0x30
 8000d76:	e022      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0) {
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d7c:	f000 fbee 	bl	800155c <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <Read_Keypad+0x2ba>

		while(HAL_GPIO_ReadPin(GPIOC, C3_Pin) == 0);
 8000d86:	bf00      	nop
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d8c:	f000 fbe6 	bl	800155c <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f8      	beq.n	8000d88 <Read_Keypad+0x2a8>
		return '=';
 8000d96:	233d      	movs	r3, #61	; 0x3d
 8000d98:	e011      	b.n	8000dbe <Read_Keypad+0x2de>
	}

	if(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0) {
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000d9e:	f000 fbdd 	bl	800155c <HAL_GPIO_ReadPin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d109      	bne.n	8000dbc <Read_Keypad+0x2dc>

		while(HAL_GPIO_ReadPin(GPIOC, C4_Pin) == 0);
 8000da8:	bf00      	nop
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <Read_Keypad+0x2e4>)
 8000dae:	f000 fbd5 	bl	800155c <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f8      	beq.n	8000daa <Read_Keypad+0x2ca>
		return '+';
 8000db8:	232b      	movs	r3, #43	; 0x2b
 8000dba:	e000      	b.n	8000dbe <Read_Keypad+0x2de>
	}
	return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f8c6 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f000 ffb2 	bl	8001e10 <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20018000 	.word	0x20018000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	200000a0 	.word	0x200000a0
 8000ee0:	200000b8 	.word	0x200000b8

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f32:	f7ff ffd7 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f000 ff71 	bl	8001e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fb23 	bl	8000584 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f4c:	08002a2c 	.word	0x08002a2c
  ldr r2, =_sbss
 8000f50:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f54:	200000b8 	.word	0x200000b8

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f931 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff ff20 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f93b 	bl	800123a <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f911 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000018 	.word	0x20000018
 8000ffc:	20000014 	.word	0x20000014

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000018 	.word	0x20000018
 8001024:	200000a4 	.word	0x200000a4

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200000a4 	.word	0x200000a4

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000018 	.word	0x20000018

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff47 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff5c 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffb0 	bl	80011a8 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e159      	b.n	8001524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8148 	bne.w	800151e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a2 	beq.w	800151e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b57      	ldr	r3, [pc, #348]	; (800153c <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a56      	ldr	r2, [pc, #344]	; (800153c <HAL_GPIO_Init+0x2e8>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b54      	ldr	r3, [pc, #336]	; (800153c <HAL_GPIO_Init+0x2e8>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_GPIO_Init+0x2ec>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a49      	ldr	r2, [pc, #292]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x202>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <HAL_GPIO_Init+0x2f4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x1fe>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_GPIO_Init+0x2f8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x1fa>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a46      	ldr	r2, [pc, #280]	; (8001550 <HAL_GPIO_Init+0x2fc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x1f6>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a45      	ldr	r2, [pc, #276]	; (8001554 <HAL_GPIO_Init+0x300>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x1f2>
 8001442:	2304      	movs	r3, #4
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001446:	2307      	movs	r3, #7
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x204>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x204>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x2ec>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_GPIO_Init+0x304>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_GPIO_Init+0x304>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a24      	ldr	r2, [pc, #144]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_GPIO_Init+0x304>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f aea2 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e267      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d075      	beq.n	80016ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d00c      	beq.n	8001604 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b85      	ldr	r3, [pc, #532]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d112      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4b82      	ldr	r3, [pc, #520]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b7e      	ldr	r3, [pc, #504]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d157      	bne.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e242      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x74>
 8001626:	4b76      	ldr	r3, [pc, #472]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a75      	ldr	r2, [pc, #468]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b70      	ldr	r3, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6f      	ldr	r2, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6c      	ldr	r2, [pc, #432]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xb0>
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a68      	ldr	r2, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a65      	ldr	r2, [pc, #404]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fcd6 	bl	8001028 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fcd2 	bl	8001028 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e207      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xc0>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fcc2 	bl	8001028 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fcbe 	bl	8001028 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1f3      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b51      	ldr	r3, [pc, #324]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0xe8>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d063      	beq.n	800179e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d11c      	bne.n	8001728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d116      	bne.n	8001728 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_RCC_OscConfig+0x152>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e1c7      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4937      	ldr	r1, [pc, #220]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	e03a      	b.n	800179e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_OscConfig+0x244>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff fc77 	bl	8001028 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff fc73 	bl	8001028 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1a8      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4925      	ldr	r1, [pc, #148]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_OscConfig+0x244>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fc56 	bl	8001028 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fc52 	bl	8001028 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e187      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d036      	beq.n	8001818 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d016      	beq.n	80017e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_RCC_OscConfig+0x248>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fc36 	bl	8001028 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fc32 	bl	8001028 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e167      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x240>)
 80017d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x200>
 80017de:	e01b      	b.n	8001818 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_OscConfig+0x248>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fc1f 	bl	8001028 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	e00e      	b.n	800180c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fc1b 	bl	8001028 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d907      	bls.n	800180c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e150      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
 8001800:	40023800 	.word	0x40023800
 8001804:	42470000 	.word	0x42470000
 8001808:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800180e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ea      	bne.n	80017ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8097 	beq.w	8001954 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a7c      	ldr	r2, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b7a      	ldr	r3, [pc, #488]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b74      	ldr	r3, [pc, #464]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a73      	ldr	r2, [pc, #460]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff fbdb 	bl	8001028 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff fbd7 	bl	8001028 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e10c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x474>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x2ea>
 800189c:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a63      	ldr	r2, [pc, #396]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
 80018a8:	e01c      	b.n	80018e4 <HAL_RCC_OscConfig+0x324>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x30c>
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6713      	str	r3, [r2, #112]	; 0x70
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0x324>
 80018cc:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	4a54      	ldr	r2, [pc, #336]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d015      	beq.n	8001918 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fb9c 	bl	8001028 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fb98 	bl	8001028 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0cb      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0ee      	beq.n	80018f4 <HAL_RCC_OscConfig+0x334>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7ff fb86 	bl	8001028 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fb82 	bl	8001028 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0b5      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001936:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ee      	bne.n	8001920 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 800194e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a1 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800195e:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d05c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d141      	bne.n	80019f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_OscConfig+0x478>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fb56 	bl	8001028 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff fb52 	bl	8001028 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e087      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	019b      	lsls	r3, r3, #6
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	085b      	lsrs	r3, r3, #1
 80019b6:	3b01      	subs	r3, #1
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	491b      	ldr	r1, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x478>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fb2b 	bl	8001028 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff fb27 	bl	8001028 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e05c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x416>
 80019f4:	e054      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_RCC_OscConfig+0x478>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fb14 	bl	8001028 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff fb10 	bl	8001028 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e045      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_OscConfig+0x470>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x444>
 8001a22:	e03d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e038      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000
 8001a38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x4ec>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d028      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d121      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d11a      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d111      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0cc      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d90c      	bls.n	8001aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494d      	ldr	r1, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d044      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d119      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e067      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4934      	ldr	r1, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff fa42 	bl	8001028 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba8:	f7ff fa3e 	bl	8001028 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e04f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 020c 	and.w	r2, r3, #12
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1eb      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20c      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e032      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f821 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490a      	ldr	r1, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f9a2 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	080028d8 	.word	0x080028d8
 8001c74:	20000010 	.word	0x20000010
 8001c78:	20000014 	.word	0x20000014

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c80:	b090      	sub	sp, #64	; 0x40
 8001c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c94:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d00d      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x40>
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	f200 80a1 	bhi.w	8001de8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cae:	e09b      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cb4:	e09b      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cba:	e098      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d028      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	2200      	movs	r2, #0
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce8:	fb03 f201 	mul.w	r2, r3, r1
 8001cec:	2300      	movs	r3, #0
 8001cee:	fb00 f303 	mul.w	r3, r0, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cf6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d02:	4413      	add	r3, r2
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	61fa      	str	r2, [r7, #28]
 8001d0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d16:	f7fe fab3 	bl	8000280 <__aeabi_uldivmod>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4613      	mov	r3, r2
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d22:	e053      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	617a      	str	r2, [r7, #20]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d36:	f04f 0b00 	mov.w	fp, #0
 8001d3a:	4652      	mov	r2, sl
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	0159      	lsls	r1, r3, #5
 8001d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4c:	0150      	lsls	r0, r2, #5
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	ebb2 080a 	subs.w	r8, r2, sl
 8001d56:	eb63 090b 	sbc.w	r9, r3, fp
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d72:	eb63 0509 	sbc.w	r5, r3, r9
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	00eb      	lsls	r3, r5, #3
 8001d80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d84:	00e2      	lsls	r2, r4, #3
 8001d86:	4614      	mov	r4, r2
 8001d88:	461d      	mov	r5, r3
 8001d8a:	eb14 030a 	adds.w	r3, r4, sl
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	eb45 030b 	adc.w	r3, r5, fp
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001da2:	4629      	mov	r1, r5
 8001da4:	028b      	lsls	r3, r1, #10
 8001da6:	4621      	mov	r1, r4
 8001da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dac:	4621      	mov	r1, r4
 8001dae:	028a      	lsls	r2, r1, #10
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	2200      	movs	r2, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dc0:	f7fe fa5e 	bl	8000280 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3740      	adds	r7, #64	; 0x40
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	017d7840 	.word	0x017d7840

08001e08 <atoi>:
 8001e08:	220a      	movs	r2, #10
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f000 b8d4 	b.w	8001fb8 <strtol>

08001e10 <__errno>:
 8001e10:	4b01      	ldr	r3, [pc, #4]	; (8001e18 <__errno+0x8>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000001c 	.word	0x2000001c

08001e1c <__libc_init_array>:
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	4d0d      	ldr	r5, [pc, #52]	; (8001e54 <__libc_init_array+0x38>)
 8001e20:	4c0d      	ldr	r4, [pc, #52]	; (8001e58 <__libc_init_array+0x3c>)
 8001e22:	1b64      	subs	r4, r4, r5
 8001e24:	10a4      	asrs	r4, r4, #2
 8001e26:	2600      	movs	r6, #0
 8001e28:	42a6      	cmp	r6, r4
 8001e2a:	d109      	bne.n	8001e40 <__libc_init_array+0x24>
 8001e2c:	4d0b      	ldr	r5, [pc, #44]	; (8001e5c <__libc_init_array+0x40>)
 8001e2e:	4c0c      	ldr	r4, [pc, #48]	; (8001e60 <__libc_init_array+0x44>)
 8001e30:	f000 fd1a 	bl	8002868 <_init>
 8001e34:	1b64      	subs	r4, r4, r5
 8001e36:	10a4      	asrs	r4, r4, #2
 8001e38:	2600      	movs	r6, #0
 8001e3a:	42a6      	cmp	r6, r4
 8001e3c:	d105      	bne.n	8001e4a <__libc_init_array+0x2e>
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
 8001e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e44:	4798      	blx	r3
 8001e46:	3601      	adds	r6, #1
 8001e48:	e7ee      	b.n	8001e28 <__libc_init_array+0xc>
 8001e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e4e:	4798      	blx	r3
 8001e50:	3601      	adds	r6, #1
 8001e52:	e7f2      	b.n	8001e3a <__libc_init_array+0x1e>
 8001e54:	08002a24 	.word	0x08002a24
 8001e58:	08002a24 	.word	0x08002a24
 8001e5c:	08002a24 	.word	0x08002a24
 8001e60:	08002a28 	.word	0x08002a28

08001e64 <memset>:
 8001e64:	4402      	add	r2, r0
 8001e66:	4603      	mov	r3, r0
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <memset+0xa>
 8001e6c:	4770      	bx	lr
 8001e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e72:	e7f9      	b.n	8001e68 <memset+0x4>

08001e74 <siprintf>:
 8001e74:	b40e      	push	{r1, r2, r3}
 8001e76:	b500      	push	{lr}
 8001e78:	b09c      	sub	sp, #112	; 0x70
 8001e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8001e7c:	9002      	str	r0, [sp, #8]
 8001e7e:	9006      	str	r0, [sp, #24]
 8001e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <siprintf+0x38>)
 8001e86:	9107      	str	r1, [sp, #28]
 8001e88:	9104      	str	r1, [sp, #16]
 8001e8a:	4909      	ldr	r1, [pc, #36]	; (8001eb0 <siprintf+0x3c>)
 8001e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e90:	9105      	str	r1, [sp, #20]
 8001e92:	6800      	ldr	r0, [r0, #0]
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	a902      	add	r1, sp, #8
 8001e98:	f000 f8f4 	bl	8002084 <_svfiprintf_r>
 8001e9c:	9b02      	ldr	r3, [sp, #8]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	b01c      	add	sp, #112	; 0x70
 8001ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ea8:	b003      	add	sp, #12
 8001eaa:	4770      	bx	lr
 8001eac:	2000001c 	.word	0x2000001c
 8001eb0:	ffff0208 	.word	0xffff0208

08001eb4 <_strtol_l.constprop.0>:
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eba:	d001      	beq.n	8001ec0 <_strtol_l.constprop.0+0xc>
 8001ebc:	2b24      	cmp	r3, #36	; 0x24
 8001ebe:	d906      	bls.n	8001ece <_strtol_l.constprop.0+0x1a>
 8001ec0:	f7ff ffa6 	bl	8001e10 <__errno>
 8001ec4:	2316      	movs	r3, #22
 8001ec6:	6003      	str	r3, [r0, #0]
 8001ec8:	2000      	movs	r0, #0
 8001eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ece:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001fb4 <_strtol_l.constprop.0+0x100>
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	462e      	mov	r6, r5
 8001ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001eda:	f814 700c 	ldrb.w	r7, [r4, ip]
 8001ede:	f017 0708 	ands.w	r7, r7, #8
 8001ee2:	d1f7      	bne.n	8001ed4 <_strtol_l.constprop.0+0x20>
 8001ee4:	2c2d      	cmp	r4, #45	; 0x2d
 8001ee6:	d132      	bne.n	8001f4e <_strtol_l.constprop.0+0x9a>
 8001ee8:	782c      	ldrb	r4, [r5, #0]
 8001eea:	2701      	movs	r7, #1
 8001eec:	1cb5      	adds	r5, r6, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d05b      	beq.n	8001faa <_strtol_l.constprop.0+0xf6>
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d109      	bne.n	8001f0a <_strtol_l.constprop.0+0x56>
 8001ef6:	2c30      	cmp	r4, #48	; 0x30
 8001ef8:	d107      	bne.n	8001f0a <_strtol_l.constprop.0+0x56>
 8001efa:	782c      	ldrb	r4, [r5, #0]
 8001efc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001f00:	2c58      	cmp	r4, #88	; 0x58
 8001f02:	d14d      	bne.n	8001fa0 <_strtol_l.constprop.0+0xec>
 8001f04:	786c      	ldrb	r4, [r5, #1]
 8001f06:	2310      	movs	r3, #16
 8001f08:	3502      	adds	r5, #2
 8001f0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8001f0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8001f12:	f04f 0c00 	mov.w	ip, #0
 8001f16:	fbb8 f9f3 	udiv	r9, r8, r3
 8001f1a:	4666      	mov	r6, ip
 8001f1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8001f20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8001f24:	f1be 0f09 	cmp.w	lr, #9
 8001f28:	d816      	bhi.n	8001f58 <_strtol_l.constprop.0+0xa4>
 8001f2a:	4674      	mov	r4, lr
 8001f2c:	42a3      	cmp	r3, r4
 8001f2e:	dd24      	ble.n	8001f7a <_strtol_l.constprop.0+0xc6>
 8001f30:	f1bc 0f00 	cmp.w	ip, #0
 8001f34:	db1e      	blt.n	8001f74 <_strtol_l.constprop.0+0xc0>
 8001f36:	45b1      	cmp	r9, r6
 8001f38:	d31c      	bcc.n	8001f74 <_strtol_l.constprop.0+0xc0>
 8001f3a:	d101      	bne.n	8001f40 <_strtol_l.constprop.0+0x8c>
 8001f3c:	45a2      	cmp	sl, r4
 8001f3e:	db19      	blt.n	8001f74 <_strtol_l.constprop.0+0xc0>
 8001f40:	fb06 4603 	mla	r6, r6, r3, r4
 8001f44:	f04f 0c01 	mov.w	ip, #1
 8001f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001f4c:	e7e8      	b.n	8001f20 <_strtol_l.constprop.0+0x6c>
 8001f4e:	2c2b      	cmp	r4, #43	; 0x2b
 8001f50:	bf04      	itt	eq
 8001f52:	782c      	ldrbeq	r4, [r5, #0]
 8001f54:	1cb5      	addeq	r5, r6, #2
 8001f56:	e7ca      	b.n	8001eee <_strtol_l.constprop.0+0x3a>
 8001f58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8001f5c:	f1be 0f19 	cmp.w	lr, #25
 8001f60:	d801      	bhi.n	8001f66 <_strtol_l.constprop.0+0xb2>
 8001f62:	3c37      	subs	r4, #55	; 0x37
 8001f64:	e7e2      	b.n	8001f2c <_strtol_l.constprop.0+0x78>
 8001f66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8001f6a:	f1be 0f19 	cmp.w	lr, #25
 8001f6e:	d804      	bhi.n	8001f7a <_strtol_l.constprop.0+0xc6>
 8001f70:	3c57      	subs	r4, #87	; 0x57
 8001f72:	e7db      	b.n	8001f2c <_strtol_l.constprop.0+0x78>
 8001f74:	f04f 3cff 	mov.w	ip, #4294967295
 8001f78:	e7e6      	b.n	8001f48 <_strtol_l.constprop.0+0x94>
 8001f7a:	f1bc 0f00 	cmp.w	ip, #0
 8001f7e:	da05      	bge.n	8001f8c <_strtol_l.constprop.0+0xd8>
 8001f80:	2322      	movs	r3, #34	; 0x22
 8001f82:	6003      	str	r3, [r0, #0]
 8001f84:	4646      	mov	r6, r8
 8001f86:	b942      	cbnz	r2, 8001f9a <_strtol_l.constprop.0+0xe6>
 8001f88:	4630      	mov	r0, r6
 8001f8a:	e79e      	b.n	8001eca <_strtol_l.constprop.0+0x16>
 8001f8c:	b107      	cbz	r7, 8001f90 <_strtol_l.constprop.0+0xdc>
 8001f8e:	4276      	negs	r6, r6
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d0f9      	beq.n	8001f88 <_strtol_l.constprop.0+0xd4>
 8001f94:	f1bc 0f00 	cmp.w	ip, #0
 8001f98:	d000      	beq.n	8001f9c <_strtol_l.constprop.0+0xe8>
 8001f9a:	1e69      	subs	r1, r5, #1
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	e7f3      	b.n	8001f88 <_strtol_l.constprop.0+0xd4>
 8001fa0:	2430      	movs	r4, #48	; 0x30
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1b1      	bne.n	8001f0a <_strtol_l.constprop.0+0x56>
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	e7af      	b.n	8001f0a <_strtol_l.constprop.0+0x56>
 8001faa:	2c30      	cmp	r4, #48	; 0x30
 8001fac:	d0a5      	beq.n	8001efa <_strtol_l.constprop.0+0x46>
 8001fae:	230a      	movs	r3, #10
 8001fb0:	e7ab      	b.n	8001f0a <_strtol_l.constprop.0+0x56>
 8001fb2:	bf00      	nop
 8001fb4:	080028e9 	.word	0x080028e9

08001fb8 <strtol>:
 8001fb8:	4613      	mov	r3, r2
 8001fba:	460a      	mov	r2, r1
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <strtol+0x10>)
 8001fc0:	6800      	ldr	r0, [r0, #0]
 8001fc2:	f7ff bf77 	b.w	8001eb4 <_strtol_l.constprop.0>
 8001fc6:	bf00      	nop
 8001fc8:	2000001c 	.word	0x2000001c

08001fcc <__ssputs_r>:
 8001fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd0:	688e      	ldr	r6, [r1, #8]
 8001fd2:	429e      	cmp	r6, r3
 8001fd4:	4682      	mov	sl, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4690      	mov	r8, r2
 8001fda:	461f      	mov	r7, r3
 8001fdc:	d838      	bhi.n	8002050 <__ssputs_r+0x84>
 8001fde:	898a      	ldrh	r2, [r1, #12]
 8001fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fe4:	d032      	beq.n	800204c <__ssputs_r+0x80>
 8001fe6:	6825      	ldr	r5, [r4, #0]
 8001fe8:	6909      	ldr	r1, [r1, #16]
 8001fea:	eba5 0901 	sub.w	r9, r5, r1
 8001fee:	6965      	ldr	r5, [r4, #20]
 8001ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	444b      	add	r3, r9
 8001ffc:	106d      	asrs	r5, r5, #1
 8001ffe:	429d      	cmp	r5, r3
 8002000:	bf38      	it	cc
 8002002:	461d      	movcc	r5, r3
 8002004:	0553      	lsls	r3, r2, #21
 8002006:	d531      	bpl.n	800206c <__ssputs_r+0xa0>
 8002008:	4629      	mov	r1, r5
 800200a:	f000 fb63 	bl	80026d4 <_malloc_r>
 800200e:	4606      	mov	r6, r0
 8002010:	b950      	cbnz	r0, 8002028 <__ssputs_r+0x5c>
 8002012:	230c      	movs	r3, #12
 8002014:	f8ca 3000 	str.w	r3, [sl]
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201e:	81a3      	strh	r3, [r4, #12]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002028:	6921      	ldr	r1, [r4, #16]
 800202a:	464a      	mov	r2, r9
 800202c:	f000 fabe 	bl	80025ac <memcpy>
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203a:	81a3      	strh	r3, [r4, #12]
 800203c:	6126      	str	r6, [r4, #16]
 800203e:	6165      	str	r5, [r4, #20]
 8002040:	444e      	add	r6, r9
 8002042:	eba5 0509 	sub.w	r5, r5, r9
 8002046:	6026      	str	r6, [r4, #0]
 8002048:	60a5      	str	r5, [r4, #8]
 800204a:	463e      	mov	r6, r7
 800204c:	42be      	cmp	r6, r7
 800204e:	d900      	bls.n	8002052 <__ssputs_r+0x86>
 8002050:	463e      	mov	r6, r7
 8002052:	6820      	ldr	r0, [r4, #0]
 8002054:	4632      	mov	r2, r6
 8002056:	4641      	mov	r1, r8
 8002058:	f000 fab6 	bl	80025c8 <memmove>
 800205c:	68a3      	ldr	r3, [r4, #8]
 800205e:	1b9b      	subs	r3, r3, r6
 8002060:	60a3      	str	r3, [r4, #8]
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	4433      	add	r3, r6
 8002066:	6023      	str	r3, [r4, #0]
 8002068:	2000      	movs	r0, #0
 800206a:	e7db      	b.n	8002024 <__ssputs_r+0x58>
 800206c:	462a      	mov	r2, r5
 800206e:	f000 fba5 	bl	80027bc <_realloc_r>
 8002072:	4606      	mov	r6, r0
 8002074:	2800      	cmp	r0, #0
 8002076:	d1e1      	bne.n	800203c <__ssputs_r+0x70>
 8002078:	6921      	ldr	r1, [r4, #16]
 800207a:	4650      	mov	r0, sl
 800207c:	f000 fabe 	bl	80025fc <_free_r>
 8002080:	e7c7      	b.n	8002012 <__ssputs_r+0x46>
	...

08002084 <_svfiprintf_r>:
 8002084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002088:	4698      	mov	r8, r3
 800208a:	898b      	ldrh	r3, [r1, #12]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	b09d      	sub	sp, #116	; 0x74
 8002090:	4607      	mov	r7, r0
 8002092:	460d      	mov	r5, r1
 8002094:	4614      	mov	r4, r2
 8002096:	d50e      	bpl.n	80020b6 <_svfiprintf_r+0x32>
 8002098:	690b      	ldr	r3, [r1, #16]
 800209a:	b963      	cbnz	r3, 80020b6 <_svfiprintf_r+0x32>
 800209c:	2140      	movs	r1, #64	; 0x40
 800209e:	f000 fb19 	bl	80026d4 <_malloc_r>
 80020a2:	6028      	str	r0, [r5, #0]
 80020a4:	6128      	str	r0, [r5, #16]
 80020a6:	b920      	cbnz	r0, 80020b2 <_svfiprintf_r+0x2e>
 80020a8:	230c      	movs	r3, #12
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	e0d1      	b.n	8002256 <_svfiprintf_r+0x1d2>
 80020b2:	2340      	movs	r3, #64	; 0x40
 80020b4:	616b      	str	r3, [r5, #20]
 80020b6:	2300      	movs	r3, #0
 80020b8:	9309      	str	r3, [sp, #36]	; 0x24
 80020ba:	2320      	movs	r3, #32
 80020bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80020c4:	2330      	movs	r3, #48	; 0x30
 80020c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002270 <_svfiprintf_r+0x1ec>
 80020ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020ce:	f04f 0901 	mov.w	r9, #1
 80020d2:	4623      	mov	r3, r4
 80020d4:	469a      	mov	sl, r3
 80020d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020da:	b10a      	cbz	r2, 80020e0 <_svfiprintf_r+0x5c>
 80020dc:	2a25      	cmp	r2, #37	; 0x25
 80020de:	d1f9      	bne.n	80020d4 <_svfiprintf_r+0x50>
 80020e0:	ebba 0b04 	subs.w	fp, sl, r4
 80020e4:	d00b      	beq.n	80020fe <_svfiprintf_r+0x7a>
 80020e6:	465b      	mov	r3, fp
 80020e8:	4622      	mov	r2, r4
 80020ea:	4629      	mov	r1, r5
 80020ec:	4638      	mov	r0, r7
 80020ee:	f7ff ff6d 	bl	8001fcc <__ssputs_r>
 80020f2:	3001      	adds	r0, #1
 80020f4:	f000 80aa 	beq.w	800224c <_svfiprintf_r+0x1c8>
 80020f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020fa:	445a      	add	r2, fp
 80020fc:	9209      	str	r2, [sp, #36]	; 0x24
 80020fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80a2 	beq.w	800224c <_svfiprintf_r+0x1c8>
 8002108:	2300      	movs	r3, #0
 800210a:	f04f 32ff 	mov.w	r2, #4294967295
 800210e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002112:	f10a 0a01 	add.w	sl, sl, #1
 8002116:	9304      	str	r3, [sp, #16]
 8002118:	9307      	str	r3, [sp, #28]
 800211a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800211e:	931a      	str	r3, [sp, #104]	; 0x68
 8002120:	4654      	mov	r4, sl
 8002122:	2205      	movs	r2, #5
 8002124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002128:	4851      	ldr	r0, [pc, #324]	; (8002270 <_svfiprintf_r+0x1ec>)
 800212a:	f7fe f859 	bl	80001e0 <memchr>
 800212e:	9a04      	ldr	r2, [sp, #16]
 8002130:	b9d8      	cbnz	r0, 800216a <_svfiprintf_r+0xe6>
 8002132:	06d0      	lsls	r0, r2, #27
 8002134:	bf44      	itt	mi
 8002136:	2320      	movmi	r3, #32
 8002138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800213c:	0711      	lsls	r1, r2, #28
 800213e:	bf44      	itt	mi
 8002140:	232b      	movmi	r3, #43	; 0x2b
 8002142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002146:	f89a 3000 	ldrb.w	r3, [sl]
 800214a:	2b2a      	cmp	r3, #42	; 0x2a
 800214c:	d015      	beq.n	800217a <_svfiprintf_r+0xf6>
 800214e:	9a07      	ldr	r2, [sp, #28]
 8002150:	4654      	mov	r4, sl
 8002152:	2000      	movs	r0, #0
 8002154:	f04f 0c0a 	mov.w	ip, #10
 8002158:	4621      	mov	r1, r4
 800215a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800215e:	3b30      	subs	r3, #48	; 0x30
 8002160:	2b09      	cmp	r3, #9
 8002162:	d94e      	bls.n	8002202 <_svfiprintf_r+0x17e>
 8002164:	b1b0      	cbz	r0, 8002194 <_svfiprintf_r+0x110>
 8002166:	9207      	str	r2, [sp, #28]
 8002168:	e014      	b.n	8002194 <_svfiprintf_r+0x110>
 800216a:	eba0 0308 	sub.w	r3, r0, r8
 800216e:	fa09 f303 	lsl.w	r3, r9, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	9304      	str	r3, [sp, #16]
 8002176:	46a2      	mov	sl, r4
 8002178:	e7d2      	b.n	8002120 <_svfiprintf_r+0x9c>
 800217a:	9b03      	ldr	r3, [sp, #12]
 800217c:	1d19      	adds	r1, r3, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	9103      	str	r1, [sp, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	bfbb      	ittet	lt
 8002186:	425b      	neglt	r3, r3
 8002188:	f042 0202 	orrlt.w	r2, r2, #2
 800218c:	9307      	strge	r3, [sp, #28]
 800218e:	9307      	strlt	r3, [sp, #28]
 8002190:	bfb8      	it	lt
 8002192:	9204      	strlt	r2, [sp, #16]
 8002194:	7823      	ldrb	r3, [r4, #0]
 8002196:	2b2e      	cmp	r3, #46	; 0x2e
 8002198:	d10c      	bne.n	80021b4 <_svfiprintf_r+0x130>
 800219a:	7863      	ldrb	r3, [r4, #1]
 800219c:	2b2a      	cmp	r3, #42	; 0x2a
 800219e:	d135      	bne.n	800220c <_svfiprintf_r+0x188>
 80021a0:	9b03      	ldr	r3, [sp, #12]
 80021a2:	1d1a      	adds	r2, r3, #4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	9203      	str	r2, [sp, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bfb8      	it	lt
 80021ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80021b0:	3402      	adds	r4, #2
 80021b2:	9305      	str	r3, [sp, #20]
 80021b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002280 <_svfiprintf_r+0x1fc>
 80021b8:	7821      	ldrb	r1, [r4, #0]
 80021ba:	2203      	movs	r2, #3
 80021bc:	4650      	mov	r0, sl
 80021be:	f7fe f80f 	bl	80001e0 <memchr>
 80021c2:	b140      	cbz	r0, 80021d6 <_svfiprintf_r+0x152>
 80021c4:	2340      	movs	r3, #64	; 0x40
 80021c6:	eba0 000a 	sub.w	r0, r0, sl
 80021ca:	fa03 f000 	lsl.w	r0, r3, r0
 80021ce:	9b04      	ldr	r3, [sp, #16]
 80021d0:	4303      	orrs	r3, r0
 80021d2:	3401      	adds	r4, #1
 80021d4:	9304      	str	r3, [sp, #16]
 80021d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021da:	4826      	ldr	r0, [pc, #152]	; (8002274 <_svfiprintf_r+0x1f0>)
 80021dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021e0:	2206      	movs	r2, #6
 80021e2:	f7fd fffd 	bl	80001e0 <memchr>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d038      	beq.n	800225c <_svfiprintf_r+0x1d8>
 80021ea:	4b23      	ldr	r3, [pc, #140]	; (8002278 <_svfiprintf_r+0x1f4>)
 80021ec:	bb1b      	cbnz	r3, 8002236 <_svfiprintf_r+0x1b2>
 80021ee:	9b03      	ldr	r3, [sp, #12]
 80021f0:	3307      	adds	r3, #7
 80021f2:	f023 0307 	bic.w	r3, r3, #7
 80021f6:	3308      	adds	r3, #8
 80021f8:	9303      	str	r3, [sp, #12]
 80021fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021fc:	4433      	add	r3, r6
 80021fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002200:	e767      	b.n	80020d2 <_svfiprintf_r+0x4e>
 8002202:	fb0c 3202 	mla	r2, ip, r2, r3
 8002206:	460c      	mov	r4, r1
 8002208:	2001      	movs	r0, #1
 800220a:	e7a5      	b.n	8002158 <_svfiprintf_r+0xd4>
 800220c:	2300      	movs	r3, #0
 800220e:	3401      	adds	r4, #1
 8002210:	9305      	str	r3, [sp, #20]
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 0c0a 	mov.w	ip, #10
 8002218:	4620      	mov	r0, r4
 800221a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800221e:	3a30      	subs	r2, #48	; 0x30
 8002220:	2a09      	cmp	r2, #9
 8002222:	d903      	bls.n	800222c <_svfiprintf_r+0x1a8>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0c5      	beq.n	80021b4 <_svfiprintf_r+0x130>
 8002228:	9105      	str	r1, [sp, #20]
 800222a:	e7c3      	b.n	80021b4 <_svfiprintf_r+0x130>
 800222c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002230:	4604      	mov	r4, r0
 8002232:	2301      	movs	r3, #1
 8002234:	e7f0      	b.n	8002218 <_svfiprintf_r+0x194>
 8002236:	ab03      	add	r3, sp, #12
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	462a      	mov	r2, r5
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <_svfiprintf_r+0x1f8>)
 800223e:	a904      	add	r1, sp, #16
 8002240:	4638      	mov	r0, r7
 8002242:	f3af 8000 	nop.w
 8002246:	1c42      	adds	r2, r0, #1
 8002248:	4606      	mov	r6, r0
 800224a:	d1d6      	bne.n	80021fa <_svfiprintf_r+0x176>
 800224c:	89ab      	ldrh	r3, [r5, #12]
 800224e:	065b      	lsls	r3, r3, #25
 8002250:	f53f af2c 	bmi.w	80020ac <_svfiprintf_r+0x28>
 8002254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002256:	b01d      	add	sp, #116	; 0x74
 8002258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800225c:	ab03      	add	r3, sp, #12
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	462a      	mov	r2, r5
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <_svfiprintf_r+0x1f8>)
 8002264:	a904      	add	r1, sp, #16
 8002266:	4638      	mov	r0, r7
 8002268:	f000 f87a 	bl	8002360 <_printf_i>
 800226c:	e7eb      	b.n	8002246 <_svfiprintf_r+0x1c2>
 800226e:	bf00      	nop
 8002270:	080029e9 	.word	0x080029e9
 8002274:	080029f3 	.word	0x080029f3
 8002278:	00000000 	.word	0x00000000
 800227c:	08001fcd 	.word	0x08001fcd
 8002280:	080029ef 	.word	0x080029ef

08002284 <_printf_common>:
 8002284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002288:	4616      	mov	r6, r2
 800228a:	4699      	mov	r9, r3
 800228c:	688a      	ldr	r2, [r1, #8]
 800228e:	690b      	ldr	r3, [r1, #16]
 8002290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002294:	4293      	cmp	r3, r2
 8002296:	bfb8      	it	lt
 8002298:	4613      	movlt	r3, r2
 800229a:	6033      	str	r3, [r6, #0]
 800229c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022a0:	4607      	mov	r7, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	b10a      	cbz	r2, 80022aa <_printf_common+0x26>
 80022a6:	3301      	adds	r3, #1
 80022a8:	6033      	str	r3, [r6, #0]
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	0699      	lsls	r1, r3, #26
 80022ae:	bf42      	ittt	mi
 80022b0:	6833      	ldrmi	r3, [r6, #0]
 80022b2:	3302      	addmi	r3, #2
 80022b4:	6033      	strmi	r3, [r6, #0]
 80022b6:	6825      	ldr	r5, [r4, #0]
 80022b8:	f015 0506 	ands.w	r5, r5, #6
 80022bc:	d106      	bne.n	80022cc <_printf_common+0x48>
 80022be:	f104 0a19 	add.w	sl, r4, #25
 80022c2:	68e3      	ldr	r3, [r4, #12]
 80022c4:	6832      	ldr	r2, [r6, #0]
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	42ab      	cmp	r3, r5
 80022ca:	dc26      	bgt.n	800231a <_printf_common+0x96>
 80022cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022d0:	1e13      	subs	r3, r2, #0
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	bf18      	it	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	0692      	lsls	r2, r2, #26
 80022da:	d42b      	bmi.n	8002334 <_printf_common+0xb0>
 80022dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022e0:	4649      	mov	r1, r9
 80022e2:	4638      	mov	r0, r7
 80022e4:	47c0      	blx	r8
 80022e6:	3001      	adds	r0, #1
 80022e8:	d01e      	beq.n	8002328 <_printf_common+0xa4>
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	68e5      	ldr	r5, [r4, #12]
 80022ee:	6832      	ldr	r2, [r6, #0]
 80022f0:	f003 0306 	and.w	r3, r3, #6
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	bf08      	it	eq
 80022f8:	1aad      	subeq	r5, r5, r2
 80022fa:	68a3      	ldr	r3, [r4, #8]
 80022fc:	6922      	ldr	r2, [r4, #16]
 80022fe:	bf0c      	ite	eq
 8002300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002304:	2500      	movne	r5, #0
 8002306:	4293      	cmp	r3, r2
 8002308:	bfc4      	itt	gt
 800230a:	1a9b      	subgt	r3, r3, r2
 800230c:	18ed      	addgt	r5, r5, r3
 800230e:	2600      	movs	r6, #0
 8002310:	341a      	adds	r4, #26
 8002312:	42b5      	cmp	r5, r6
 8002314:	d11a      	bne.n	800234c <_printf_common+0xc8>
 8002316:	2000      	movs	r0, #0
 8002318:	e008      	b.n	800232c <_printf_common+0xa8>
 800231a:	2301      	movs	r3, #1
 800231c:	4652      	mov	r2, sl
 800231e:	4649      	mov	r1, r9
 8002320:	4638      	mov	r0, r7
 8002322:	47c0      	blx	r8
 8002324:	3001      	adds	r0, #1
 8002326:	d103      	bne.n	8002330 <_printf_common+0xac>
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002330:	3501      	adds	r5, #1
 8002332:	e7c6      	b.n	80022c2 <_printf_common+0x3e>
 8002334:	18e1      	adds	r1, r4, r3
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	2030      	movs	r0, #48	; 0x30
 800233a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800233e:	4422      	add	r2, r4
 8002340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002348:	3302      	adds	r3, #2
 800234a:	e7c7      	b.n	80022dc <_printf_common+0x58>
 800234c:	2301      	movs	r3, #1
 800234e:	4622      	mov	r2, r4
 8002350:	4649      	mov	r1, r9
 8002352:	4638      	mov	r0, r7
 8002354:	47c0      	blx	r8
 8002356:	3001      	adds	r0, #1
 8002358:	d0e6      	beq.n	8002328 <_printf_common+0xa4>
 800235a:	3601      	adds	r6, #1
 800235c:	e7d9      	b.n	8002312 <_printf_common+0x8e>
	...

08002360 <_printf_i>:
 8002360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002364:	7e0f      	ldrb	r7, [r1, #24]
 8002366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002368:	2f78      	cmp	r7, #120	; 0x78
 800236a:	4691      	mov	r9, r2
 800236c:	4680      	mov	r8, r0
 800236e:	460c      	mov	r4, r1
 8002370:	469a      	mov	sl, r3
 8002372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002376:	d807      	bhi.n	8002388 <_printf_i+0x28>
 8002378:	2f62      	cmp	r7, #98	; 0x62
 800237a:	d80a      	bhi.n	8002392 <_printf_i+0x32>
 800237c:	2f00      	cmp	r7, #0
 800237e:	f000 80d8 	beq.w	8002532 <_printf_i+0x1d2>
 8002382:	2f58      	cmp	r7, #88	; 0x58
 8002384:	f000 80a3 	beq.w	80024ce <_printf_i+0x16e>
 8002388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800238c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002390:	e03a      	b.n	8002408 <_printf_i+0xa8>
 8002392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002396:	2b15      	cmp	r3, #21
 8002398:	d8f6      	bhi.n	8002388 <_printf_i+0x28>
 800239a:	a101      	add	r1, pc, #4	; (adr r1, 80023a0 <_printf_i+0x40>)
 800239c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023a0:	080023f9 	.word	0x080023f9
 80023a4:	0800240d 	.word	0x0800240d
 80023a8:	08002389 	.word	0x08002389
 80023ac:	08002389 	.word	0x08002389
 80023b0:	08002389 	.word	0x08002389
 80023b4:	08002389 	.word	0x08002389
 80023b8:	0800240d 	.word	0x0800240d
 80023bc:	08002389 	.word	0x08002389
 80023c0:	08002389 	.word	0x08002389
 80023c4:	08002389 	.word	0x08002389
 80023c8:	08002389 	.word	0x08002389
 80023cc:	08002519 	.word	0x08002519
 80023d0:	0800243d 	.word	0x0800243d
 80023d4:	080024fb 	.word	0x080024fb
 80023d8:	08002389 	.word	0x08002389
 80023dc:	08002389 	.word	0x08002389
 80023e0:	0800253b 	.word	0x0800253b
 80023e4:	08002389 	.word	0x08002389
 80023e8:	0800243d 	.word	0x0800243d
 80023ec:	08002389 	.word	0x08002389
 80023f0:	08002389 	.word	0x08002389
 80023f4:	08002503 	.word	0x08002503
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	1d1a      	adds	r2, r3, #4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	602a      	str	r2, [r5, #0]
 8002400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002408:	2301      	movs	r3, #1
 800240a:	e0a3      	b.n	8002554 <_printf_i+0x1f4>
 800240c:	6820      	ldr	r0, [r4, #0]
 800240e:	6829      	ldr	r1, [r5, #0]
 8002410:	0606      	lsls	r6, r0, #24
 8002412:	f101 0304 	add.w	r3, r1, #4
 8002416:	d50a      	bpl.n	800242e <_printf_i+0xce>
 8002418:	680e      	ldr	r6, [r1, #0]
 800241a:	602b      	str	r3, [r5, #0]
 800241c:	2e00      	cmp	r6, #0
 800241e:	da03      	bge.n	8002428 <_printf_i+0xc8>
 8002420:	232d      	movs	r3, #45	; 0x2d
 8002422:	4276      	negs	r6, r6
 8002424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002428:	485e      	ldr	r0, [pc, #376]	; (80025a4 <_printf_i+0x244>)
 800242a:	230a      	movs	r3, #10
 800242c:	e019      	b.n	8002462 <_printf_i+0x102>
 800242e:	680e      	ldr	r6, [r1, #0]
 8002430:	602b      	str	r3, [r5, #0]
 8002432:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002436:	bf18      	it	ne
 8002438:	b236      	sxthne	r6, r6
 800243a:	e7ef      	b.n	800241c <_printf_i+0xbc>
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	1d19      	adds	r1, r3, #4
 8002442:	6029      	str	r1, [r5, #0]
 8002444:	0601      	lsls	r1, r0, #24
 8002446:	d501      	bpl.n	800244c <_printf_i+0xec>
 8002448:	681e      	ldr	r6, [r3, #0]
 800244a:	e002      	b.n	8002452 <_printf_i+0xf2>
 800244c:	0646      	lsls	r6, r0, #25
 800244e:	d5fb      	bpl.n	8002448 <_printf_i+0xe8>
 8002450:	881e      	ldrh	r6, [r3, #0]
 8002452:	4854      	ldr	r0, [pc, #336]	; (80025a4 <_printf_i+0x244>)
 8002454:	2f6f      	cmp	r7, #111	; 0x6f
 8002456:	bf0c      	ite	eq
 8002458:	2308      	moveq	r3, #8
 800245a:	230a      	movne	r3, #10
 800245c:	2100      	movs	r1, #0
 800245e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002462:	6865      	ldr	r5, [r4, #4]
 8002464:	60a5      	str	r5, [r4, #8]
 8002466:	2d00      	cmp	r5, #0
 8002468:	bfa2      	ittt	ge
 800246a:	6821      	ldrge	r1, [r4, #0]
 800246c:	f021 0104 	bicge.w	r1, r1, #4
 8002470:	6021      	strge	r1, [r4, #0]
 8002472:	b90e      	cbnz	r6, 8002478 <_printf_i+0x118>
 8002474:	2d00      	cmp	r5, #0
 8002476:	d04d      	beq.n	8002514 <_printf_i+0x1b4>
 8002478:	4615      	mov	r5, r2
 800247a:	fbb6 f1f3 	udiv	r1, r6, r3
 800247e:	fb03 6711 	mls	r7, r3, r1, r6
 8002482:	5dc7      	ldrb	r7, [r0, r7]
 8002484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002488:	4637      	mov	r7, r6
 800248a:	42bb      	cmp	r3, r7
 800248c:	460e      	mov	r6, r1
 800248e:	d9f4      	bls.n	800247a <_printf_i+0x11a>
 8002490:	2b08      	cmp	r3, #8
 8002492:	d10b      	bne.n	80024ac <_printf_i+0x14c>
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	07de      	lsls	r6, r3, #31
 8002498:	d508      	bpl.n	80024ac <_printf_i+0x14c>
 800249a:	6923      	ldr	r3, [r4, #16]
 800249c:	6861      	ldr	r1, [r4, #4]
 800249e:	4299      	cmp	r1, r3
 80024a0:	bfde      	ittt	le
 80024a2:	2330      	movle	r3, #48	; 0x30
 80024a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024ac:	1b52      	subs	r2, r2, r5
 80024ae:	6122      	str	r2, [r4, #16]
 80024b0:	f8cd a000 	str.w	sl, [sp]
 80024b4:	464b      	mov	r3, r9
 80024b6:	aa03      	add	r2, sp, #12
 80024b8:	4621      	mov	r1, r4
 80024ba:	4640      	mov	r0, r8
 80024bc:	f7ff fee2 	bl	8002284 <_printf_common>
 80024c0:	3001      	adds	r0, #1
 80024c2:	d14c      	bne.n	800255e <_printf_i+0x1fe>
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	b004      	add	sp, #16
 80024ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024ce:	4835      	ldr	r0, [pc, #212]	; (80025a4 <_printf_i+0x244>)
 80024d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80024d4:	6829      	ldr	r1, [r5, #0]
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80024dc:	6029      	str	r1, [r5, #0]
 80024de:	061d      	lsls	r5, r3, #24
 80024e0:	d514      	bpl.n	800250c <_printf_i+0x1ac>
 80024e2:	07df      	lsls	r7, r3, #31
 80024e4:	bf44      	itt	mi
 80024e6:	f043 0320 	orrmi.w	r3, r3, #32
 80024ea:	6023      	strmi	r3, [r4, #0]
 80024ec:	b91e      	cbnz	r6, 80024f6 <_printf_i+0x196>
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	f023 0320 	bic.w	r3, r3, #32
 80024f4:	6023      	str	r3, [r4, #0]
 80024f6:	2310      	movs	r3, #16
 80024f8:	e7b0      	b.n	800245c <_printf_i+0xfc>
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	f043 0320 	orr.w	r3, r3, #32
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	2378      	movs	r3, #120	; 0x78
 8002504:	4828      	ldr	r0, [pc, #160]	; (80025a8 <_printf_i+0x248>)
 8002506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800250a:	e7e3      	b.n	80024d4 <_printf_i+0x174>
 800250c:	0659      	lsls	r1, r3, #25
 800250e:	bf48      	it	mi
 8002510:	b2b6      	uxthmi	r6, r6
 8002512:	e7e6      	b.n	80024e2 <_printf_i+0x182>
 8002514:	4615      	mov	r5, r2
 8002516:	e7bb      	b.n	8002490 <_printf_i+0x130>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	6826      	ldr	r6, [r4, #0]
 800251c:	6961      	ldr	r1, [r4, #20]
 800251e:	1d18      	adds	r0, r3, #4
 8002520:	6028      	str	r0, [r5, #0]
 8002522:	0635      	lsls	r5, r6, #24
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	d501      	bpl.n	800252c <_printf_i+0x1cc>
 8002528:	6019      	str	r1, [r3, #0]
 800252a:	e002      	b.n	8002532 <_printf_i+0x1d2>
 800252c:	0670      	lsls	r0, r6, #25
 800252e:	d5fb      	bpl.n	8002528 <_printf_i+0x1c8>
 8002530:	8019      	strh	r1, [r3, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	6123      	str	r3, [r4, #16]
 8002536:	4615      	mov	r5, r2
 8002538:	e7ba      	b.n	80024b0 <_printf_i+0x150>
 800253a:	682b      	ldr	r3, [r5, #0]
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	602a      	str	r2, [r5, #0]
 8002540:	681d      	ldr	r5, [r3, #0]
 8002542:	6862      	ldr	r2, [r4, #4]
 8002544:	2100      	movs	r1, #0
 8002546:	4628      	mov	r0, r5
 8002548:	f7fd fe4a 	bl	80001e0 <memchr>
 800254c:	b108      	cbz	r0, 8002552 <_printf_i+0x1f2>
 800254e:	1b40      	subs	r0, r0, r5
 8002550:	6060      	str	r0, [r4, #4]
 8002552:	6863      	ldr	r3, [r4, #4]
 8002554:	6123      	str	r3, [r4, #16]
 8002556:	2300      	movs	r3, #0
 8002558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800255c:	e7a8      	b.n	80024b0 <_printf_i+0x150>
 800255e:	6923      	ldr	r3, [r4, #16]
 8002560:	462a      	mov	r2, r5
 8002562:	4649      	mov	r1, r9
 8002564:	4640      	mov	r0, r8
 8002566:	47d0      	blx	sl
 8002568:	3001      	adds	r0, #1
 800256a:	d0ab      	beq.n	80024c4 <_printf_i+0x164>
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	079b      	lsls	r3, r3, #30
 8002570:	d413      	bmi.n	800259a <_printf_i+0x23a>
 8002572:	68e0      	ldr	r0, [r4, #12]
 8002574:	9b03      	ldr	r3, [sp, #12]
 8002576:	4298      	cmp	r0, r3
 8002578:	bfb8      	it	lt
 800257a:	4618      	movlt	r0, r3
 800257c:	e7a4      	b.n	80024c8 <_printf_i+0x168>
 800257e:	2301      	movs	r3, #1
 8002580:	4632      	mov	r2, r6
 8002582:	4649      	mov	r1, r9
 8002584:	4640      	mov	r0, r8
 8002586:	47d0      	blx	sl
 8002588:	3001      	adds	r0, #1
 800258a:	d09b      	beq.n	80024c4 <_printf_i+0x164>
 800258c:	3501      	adds	r5, #1
 800258e:	68e3      	ldr	r3, [r4, #12]
 8002590:	9903      	ldr	r1, [sp, #12]
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	42ab      	cmp	r3, r5
 8002596:	dcf2      	bgt.n	800257e <_printf_i+0x21e>
 8002598:	e7eb      	b.n	8002572 <_printf_i+0x212>
 800259a:	2500      	movs	r5, #0
 800259c:	f104 0619 	add.w	r6, r4, #25
 80025a0:	e7f5      	b.n	800258e <_printf_i+0x22e>
 80025a2:	bf00      	nop
 80025a4:	080029fa 	.word	0x080029fa
 80025a8:	08002a0b 	.word	0x08002a0b

080025ac <memcpy>:
 80025ac:	440a      	add	r2, r1
 80025ae:	4291      	cmp	r1, r2
 80025b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80025b4:	d100      	bne.n	80025b8 <memcpy+0xc>
 80025b6:	4770      	bx	lr
 80025b8:	b510      	push	{r4, lr}
 80025ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025c2:	4291      	cmp	r1, r2
 80025c4:	d1f9      	bne.n	80025ba <memcpy+0xe>
 80025c6:	bd10      	pop	{r4, pc}

080025c8 <memmove>:
 80025c8:	4288      	cmp	r0, r1
 80025ca:	b510      	push	{r4, lr}
 80025cc:	eb01 0402 	add.w	r4, r1, r2
 80025d0:	d902      	bls.n	80025d8 <memmove+0x10>
 80025d2:	4284      	cmp	r4, r0
 80025d4:	4623      	mov	r3, r4
 80025d6:	d807      	bhi.n	80025e8 <memmove+0x20>
 80025d8:	1e43      	subs	r3, r0, #1
 80025da:	42a1      	cmp	r1, r4
 80025dc:	d008      	beq.n	80025f0 <memmove+0x28>
 80025de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025e6:	e7f8      	b.n	80025da <memmove+0x12>
 80025e8:	4402      	add	r2, r0
 80025ea:	4601      	mov	r1, r0
 80025ec:	428a      	cmp	r2, r1
 80025ee:	d100      	bne.n	80025f2 <memmove+0x2a>
 80025f0:	bd10      	pop	{r4, pc}
 80025f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025fa:	e7f7      	b.n	80025ec <memmove+0x24>

080025fc <_free_r>:
 80025fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025fe:	2900      	cmp	r1, #0
 8002600:	d044      	beq.n	800268c <_free_r+0x90>
 8002602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002606:	9001      	str	r0, [sp, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f1a1 0404 	sub.w	r4, r1, #4
 800260e:	bfb8      	it	lt
 8002610:	18e4      	addlt	r4, r4, r3
 8002612:	f000 f913 	bl	800283c <__malloc_lock>
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <_free_r+0x94>)
 8002618:	9801      	ldr	r0, [sp, #4]
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	b933      	cbnz	r3, 800262c <_free_r+0x30>
 800261e:	6063      	str	r3, [r4, #4]
 8002620:	6014      	str	r4, [r2, #0]
 8002622:	b003      	add	sp, #12
 8002624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002628:	f000 b90e 	b.w	8002848 <__malloc_unlock>
 800262c:	42a3      	cmp	r3, r4
 800262e:	d908      	bls.n	8002642 <_free_r+0x46>
 8002630:	6825      	ldr	r5, [r4, #0]
 8002632:	1961      	adds	r1, r4, r5
 8002634:	428b      	cmp	r3, r1
 8002636:	bf01      	itttt	eq
 8002638:	6819      	ldreq	r1, [r3, #0]
 800263a:	685b      	ldreq	r3, [r3, #4]
 800263c:	1949      	addeq	r1, r1, r5
 800263e:	6021      	streq	r1, [r4, #0]
 8002640:	e7ed      	b.n	800261e <_free_r+0x22>
 8002642:	461a      	mov	r2, r3
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	b10b      	cbz	r3, 800264c <_free_r+0x50>
 8002648:	42a3      	cmp	r3, r4
 800264a:	d9fa      	bls.n	8002642 <_free_r+0x46>
 800264c:	6811      	ldr	r1, [r2, #0]
 800264e:	1855      	adds	r5, r2, r1
 8002650:	42a5      	cmp	r5, r4
 8002652:	d10b      	bne.n	800266c <_free_r+0x70>
 8002654:	6824      	ldr	r4, [r4, #0]
 8002656:	4421      	add	r1, r4
 8002658:	1854      	adds	r4, r2, r1
 800265a:	42a3      	cmp	r3, r4
 800265c:	6011      	str	r1, [r2, #0]
 800265e:	d1e0      	bne.n	8002622 <_free_r+0x26>
 8002660:	681c      	ldr	r4, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	6053      	str	r3, [r2, #4]
 8002666:	4421      	add	r1, r4
 8002668:	6011      	str	r1, [r2, #0]
 800266a:	e7da      	b.n	8002622 <_free_r+0x26>
 800266c:	d902      	bls.n	8002674 <_free_r+0x78>
 800266e:	230c      	movs	r3, #12
 8002670:	6003      	str	r3, [r0, #0]
 8002672:	e7d6      	b.n	8002622 <_free_r+0x26>
 8002674:	6825      	ldr	r5, [r4, #0]
 8002676:	1961      	adds	r1, r4, r5
 8002678:	428b      	cmp	r3, r1
 800267a:	bf04      	itt	eq
 800267c:	6819      	ldreq	r1, [r3, #0]
 800267e:	685b      	ldreq	r3, [r3, #4]
 8002680:	6063      	str	r3, [r4, #4]
 8002682:	bf04      	itt	eq
 8002684:	1949      	addeq	r1, r1, r5
 8002686:	6021      	streq	r1, [r4, #0]
 8002688:	6054      	str	r4, [r2, #4]
 800268a:	e7ca      	b.n	8002622 <_free_r+0x26>
 800268c:	b003      	add	sp, #12
 800268e:	bd30      	pop	{r4, r5, pc}
 8002690:	200000a8 	.word	0x200000a8

08002694 <sbrk_aligned>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4e0e      	ldr	r6, [pc, #56]	; (80026d0 <sbrk_aligned+0x3c>)
 8002698:	460c      	mov	r4, r1
 800269a:	6831      	ldr	r1, [r6, #0]
 800269c:	4605      	mov	r5, r0
 800269e:	b911      	cbnz	r1, 80026a6 <sbrk_aligned+0x12>
 80026a0:	f000 f8bc 	bl	800281c <_sbrk_r>
 80026a4:	6030      	str	r0, [r6, #0]
 80026a6:	4621      	mov	r1, r4
 80026a8:	4628      	mov	r0, r5
 80026aa:	f000 f8b7 	bl	800281c <_sbrk_r>
 80026ae:	1c43      	adds	r3, r0, #1
 80026b0:	d00a      	beq.n	80026c8 <sbrk_aligned+0x34>
 80026b2:	1cc4      	adds	r4, r0, #3
 80026b4:	f024 0403 	bic.w	r4, r4, #3
 80026b8:	42a0      	cmp	r0, r4
 80026ba:	d007      	beq.n	80026cc <sbrk_aligned+0x38>
 80026bc:	1a21      	subs	r1, r4, r0
 80026be:	4628      	mov	r0, r5
 80026c0:	f000 f8ac 	bl	800281c <_sbrk_r>
 80026c4:	3001      	adds	r0, #1
 80026c6:	d101      	bne.n	80026cc <sbrk_aligned+0x38>
 80026c8:	f04f 34ff 	mov.w	r4, #4294967295
 80026cc:	4620      	mov	r0, r4
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	200000ac 	.word	0x200000ac

080026d4 <_malloc_r>:
 80026d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026d8:	1ccd      	adds	r5, r1, #3
 80026da:	f025 0503 	bic.w	r5, r5, #3
 80026de:	3508      	adds	r5, #8
 80026e0:	2d0c      	cmp	r5, #12
 80026e2:	bf38      	it	cc
 80026e4:	250c      	movcc	r5, #12
 80026e6:	2d00      	cmp	r5, #0
 80026e8:	4607      	mov	r7, r0
 80026ea:	db01      	blt.n	80026f0 <_malloc_r+0x1c>
 80026ec:	42a9      	cmp	r1, r5
 80026ee:	d905      	bls.n	80026fc <_malloc_r+0x28>
 80026f0:	230c      	movs	r3, #12
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	2600      	movs	r6, #0
 80026f6:	4630      	mov	r0, r6
 80026f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026fc:	4e2e      	ldr	r6, [pc, #184]	; (80027b8 <_malloc_r+0xe4>)
 80026fe:	f000 f89d 	bl	800283c <__malloc_lock>
 8002702:	6833      	ldr	r3, [r6, #0]
 8002704:	461c      	mov	r4, r3
 8002706:	bb34      	cbnz	r4, 8002756 <_malloc_r+0x82>
 8002708:	4629      	mov	r1, r5
 800270a:	4638      	mov	r0, r7
 800270c:	f7ff ffc2 	bl	8002694 <sbrk_aligned>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	4604      	mov	r4, r0
 8002714:	d14d      	bne.n	80027b2 <_malloc_r+0xde>
 8002716:	6834      	ldr	r4, [r6, #0]
 8002718:	4626      	mov	r6, r4
 800271a:	2e00      	cmp	r6, #0
 800271c:	d140      	bne.n	80027a0 <_malloc_r+0xcc>
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	4631      	mov	r1, r6
 8002722:	4638      	mov	r0, r7
 8002724:	eb04 0803 	add.w	r8, r4, r3
 8002728:	f000 f878 	bl	800281c <_sbrk_r>
 800272c:	4580      	cmp	r8, r0
 800272e:	d13a      	bne.n	80027a6 <_malloc_r+0xd2>
 8002730:	6821      	ldr	r1, [r4, #0]
 8002732:	3503      	adds	r5, #3
 8002734:	1a6d      	subs	r5, r5, r1
 8002736:	f025 0503 	bic.w	r5, r5, #3
 800273a:	3508      	adds	r5, #8
 800273c:	2d0c      	cmp	r5, #12
 800273e:	bf38      	it	cc
 8002740:	250c      	movcc	r5, #12
 8002742:	4629      	mov	r1, r5
 8002744:	4638      	mov	r0, r7
 8002746:	f7ff ffa5 	bl	8002694 <sbrk_aligned>
 800274a:	3001      	adds	r0, #1
 800274c:	d02b      	beq.n	80027a6 <_malloc_r+0xd2>
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	442b      	add	r3, r5
 8002752:	6023      	str	r3, [r4, #0]
 8002754:	e00e      	b.n	8002774 <_malloc_r+0xa0>
 8002756:	6822      	ldr	r2, [r4, #0]
 8002758:	1b52      	subs	r2, r2, r5
 800275a:	d41e      	bmi.n	800279a <_malloc_r+0xc6>
 800275c:	2a0b      	cmp	r2, #11
 800275e:	d916      	bls.n	800278e <_malloc_r+0xba>
 8002760:	1961      	adds	r1, r4, r5
 8002762:	42a3      	cmp	r3, r4
 8002764:	6025      	str	r5, [r4, #0]
 8002766:	bf18      	it	ne
 8002768:	6059      	strne	r1, [r3, #4]
 800276a:	6863      	ldr	r3, [r4, #4]
 800276c:	bf08      	it	eq
 800276e:	6031      	streq	r1, [r6, #0]
 8002770:	5162      	str	r2, [r4, r5]
 8002772:	604b      	str	r3, [r1, #4]
 8002774:	4638      	mov	r0, r7
 8002776:	f104 060b 	add.w	r6, r4, #11
 800277a:	f000 f865 	bl	8002848 <__malloc_unlock>
 800277e:	f026 0607 	bic.w	r6, r6, #7
 8002782:	1d23      	adds	r3, r4, #4
 8002784:	1af2      	subs	r2, r6, r3
 8002786:	d0b6      	beq.n	80026f6 <_malloc_r+0x22>
 8002788:	1b9b      	subs	r3, r3, r6
 800278a:	50a3      	str	r3, [r4, r2]
 800278c:	e7b3      	b.n	80026f6 <_malloc_r+0x22>
 800278e:	6862      	ldr	r2, [r4, #4]
 8002790:	42a3      	cmp	r3, r4
 8002792:	bf0c      	ite	eq
 8002794:	6032      	streq	r2, [r6, #0]
 8002796:	605a      	strne	r2, [r3, #4]
 8002798:	e7ec      	b.n	8002774 <_malloc_r+0xa0>
 800279a:	4623      	mov	r3, r4
 800279c:	6864      	ldr	r4, [r4, #4]
 800279e:	e7b2      	b.n	8002706 <_malloc_r+0x32>
 80027a0:	4634      	mov	r4, r6
 80027a2:	6876      	ldr	r6, [r6, #4]
 80027a4:	e7b9      	b.n	800271a <_malloc_r+0x46>
 80027a6:	230c      	movs	r3, #12
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4638      	mov	r0, r7
 80027ac:	f000 f84c 	bl	8002848 <__malloc_unlock>
 80027b0:	e7a1      	b.n	80026f6 <_malloc_r+0x22>
 80027b2:	6025      	str	r5, [r4, #0]
 80027b4:	e7de      	b.n	8002774 <_malloc_r+0xa0>
 80027b6:	bf00      	nop
 80027b8:	200000a8 	.word	0x200000a8

080027bc <_realloc_r>:
 80027bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c0:	4680      	mov	r8, r0
 80027c2:	4614      	mov	r4, r2
 80027c4:	460e      	mov	r6, r1
 80027c6:	b921      	cbnz	r1, 80027d2 <_realloc_r+0x16>
 80027c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027cc:	4611      	mov	r1, r2
 80027ce:	f7ff bf81 	b.w	80026d4 <_malloc_r>
 80027d2:	b92a      	cbnz	r2, 80027e0 <_realloc_r+0x24>
 80027d4:	f7ff ff12 	bl	80025fc <_free_r>
 80027d8:	4625      	mov	r5, r4
 80027da:	4628      	mov	r0, r5
 80027dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e0:	f000 f838 	bl	8002854 <_malloc_usable_size_r>
 80027e4:	4284      	cmp	r4, r0
 80027e6:	4607      	mov	r7, r0
 80027e8:	d802      	bhi.n	80027f0 <_realloc_r+0x34>
 80027ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80027ee:	d812      	bhi.n	8002816 <_realloc_r+0x5a>
 80027f0:	4621      	mov	r1, r4
 80027f2:	4640      	mov	r0, r8
 80027f4:	f7ff ff6e 	bl	80026d4 <_malloc_r>
 80027f8:	4605      	mov	r5, r0
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d0ed      	beq.n	80027da <_realloc_r+0x1e>
 80027fe:	42bc      	cmp	r4, r7
 8002800:	4622      	mov	r2, r4
 8002802:	4631      	mov	r1, r6
 8002804:	bf28      	it	cs
 8002806:	463a      	movcs	r2, r7
 8002808:	f7ff fed0 	bl	80025ac <memcpy>
 800280c:	4631      	mov	r1, r6
 800280e:	4640      	mov	r0, r8
 8002810:	f7ff fef4 	bl	80025fc <_free_r>
 8002814:	e7e1      	b.n	80027da <_realloc_r+0x1e>
 8002816:	4635      	mov	r5, r6
 8002818:	e7df      	b.n	80027da <_realloc_r+0x1e>
	...

0800281c <_sbrk_r>:
 800281c:	b538      	push	{r3, r4, r5, lr}
 800281e:	4d06      	ldr	r5, [pc, #24]	; (8002838 <_sbrk_r+0x1c>)
 8002820:	2300      	movs	r3, #0
 8002822:	4604      	mov	r4, r0
 8002824:	4608      	mov	r0, r1
 8002826:	602b      	str	r3, [r5, #0]
 8002828:	f7fe fb26 	bl	8000e78 <_sbrk>
 800282c:	1c43      	adds	r3, r0, #1
 800282e:	d102      	bne.n	8002836 <_sbrk_r+0x1a>
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	b103      	cbz	r3, 8002836 <_sbrk_r+0x1a>
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	bd38      	pop	{r3, r4, r5, pc}
 8002838:	200000b0 	.word	0x200000b0

0800283c <__malloc_lock>:
 800283c:	4801      	ldr	r0, [pc, #4]	; (8002844 <__malloc_lock+0x8>)
 800283e:	f000 b811 	b.w	8002864 <__retarget_lock_acquire_recursive>
 8002842:	bf00      	nop
 8002844:	200000b4 	.word	0x200000b4

08002848 <__malloc_unlock>:
 8002848:	4801      	ldr	r0, [pc, #4]	; (8002850 <__malloc_unlock+0x8>)
 800284a:	f000 b80c 	b.w	8002866 <__retarget_lock_release_recursive>
 800284e:	bf00      	nop
 8002850:	200000b4 	.word	0x200000b4

08002854 <_malloc_usable_size_r>:
 8002854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002858:	1f18      	subs	r0, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	bfbc      	itt	lt
 800285e:	580b      	ldrlt	r3, [r1, r0]
 8002860:	18c0      	addlt	r0, r0, r3
 8002862:	4770      	bx	lr

08002864 <__retarget_lock_acquire_recursive>:
 8002864:	4770      	bx	lr

08002866 <__retarget_lock_release_recursive>:
 8002866:	4770      	bx	lr

08002868 <_init>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr

08002874 <_fini>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr
