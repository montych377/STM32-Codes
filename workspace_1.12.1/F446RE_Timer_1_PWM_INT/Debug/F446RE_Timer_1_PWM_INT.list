
F446RE_Timer_1_PWM_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b70  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d44  08002d44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d4c  08002d4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000010  08002d64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002d64  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009da6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001746  00000000  00000000  00029de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020987  00000000  00000000  0002c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b005  00000000  00000000  0004d19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca2a0  00000000  00000000  000581a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  00122494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002d1c 	.word	0x08002d1c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002d1c 	.word	0x08002d1c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	static uint16_t pulsewidth = 50;
	static uint8_t increasing = 1;

	if(htim->Instance == TIM1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a16      	ldr	r2, [pc, #88]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d123      	bne.n	8000562 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		if(increasing)
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00d      	beq.n	800053e <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			pulsewidth += 10;
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	330a      	adds	r3, #10
 8000528:	b29a      	uxth	r2, r3
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800052c:	801a      	strh	r2, [r3, #0]
			if(pulsewidth >= 100)
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2b63      	cmp	r3, #99	; 0x63
 8000534:	d910      	bls.n	8000558 <HAL_TIM_PeriodElapsedCallback+0x50>
			{
				increasing = 0;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	e00c      	b.n	8000558 <HAL_TIM_PeriodElapsedCallback+0x50>
			}
		}
		else
		{
			pulsewidth -= 10;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	3b0a      	subs	r3, #10
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000548:	801a      	strh	r2, [r3, #0]
			if(pulsewidth <= 0)
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <HAL_TIM_PeriodElapsedCallback+0x50>
			{
				increasing = 1;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
			}
		}
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pulsewidth);
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800055a:	881a      	ldrh	r2, [r3, #0]
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
		}

}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40010000 	.word	0x40010000
 8000574:	20000000 	.word	0x20000000
 8000578:	20000002 	.word	0x20000002
 800057c:	2000002c 	.word	0x2000002c

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fa44 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f80e 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f918 	bl	80007c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000590:	f000 f876 	bl	8000680 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <main+0x24>)
 8000598:	f001 fc20 	bl	8001ddc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 800059c:	4801      	ldr	r0, [pc, #4]	; (80005a4 <main+0x24>)
 800059e:	f001 fb53 	bl	8001c48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x22>
 80005a4:	2000002c 	.word	0x2000002c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fba8 	bl	8002d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <SystemClock_Config+0xd0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <SystemClock_Config+0xd0>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <SystemClock_Config+0xd0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <SystemClock_Config+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd4>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000620:	2354      	movs	r3, #84	; 0x54
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f819 	bl	800166c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000640:	f000 f8e6 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fced 	bl	8001040 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800066c:	f000 f8d0 	bl	8000810 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	; 0x58
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fb27 	bl	8002d0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006be:	4b3e      	ldr	r3, [pc, #248]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006c0:	4a3e      	ldr	r2, [pc, #248]	; (80007bc <MX_TIM1_Init+0x13c>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80006c4:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006c6:	2253      	movs	r2, #83	; 0x53
 80006c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b3b      	ldr	r3, [pc, #236]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006d0:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006d2:	2263      	movs	r2, #99	; 0x63
 80006d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e8:	4833      	ldr	r0, [pc, #204]	; (80007b8 <MX_TIM1_Init+0x138>)
 80006ea:	f001 fa5d 	bl	8001ba8 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80006f4:	f000 f88c 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000702:	4619      	mov	r1, r3
 8000704:	482c      	ldr	r0, [pc, #176]	; (80007b8 <MX_TIM1_Init+0x138>)
 8000706:	f001 fdfb 	bl	8002300 <HAL_TIM_ConfigClockSource>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000710:	f000 f87e 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000714:	4828      	ldr	r0, [pc, #160]	; (80007b8 <MX_TIM1_Init+0x138>)
 8000716:	f001 fb07 	bl	8001d28 <HAL_TIM_PWM_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000720:	f000 f876 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000730:	4619      	mov	r1, r3
 8000732:	4821      	ldr	r0, [pc, #132]	; (80007b8 <MX_TIM1_Init+0x138>)
 8000734:	f002 f9e4 	bl	8002b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800073e:	f000 f867 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000742:	2360      	movs	r3, #96	; 0x60
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	4814      	ldr	r0, [pc, #80]	; (80007b8 <MX_TIM1_Init+0x138>)
 8000768:	f001 fd08 	bl	800217c <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000772:	f000 f84d 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <MX_TIM1_Init+0x138>)
 800079a:	f002 fa2d 	bl	8002bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80007a4:	f000 f834 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MX_TIM1_Init+0x138>)
 80007aa:	f000 f887 	bl	80008bc <HAL_TIM_MspPostInit>

}
 80007ae:	bf00      	nop
 80007b0:	3758      	adds	r7, #88	; 0x58
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	40010000 	.word	0x40010000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_GPIO_Init+0x4c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <MX_GPIO_Init+0x4c>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_GPIO_Init+0x4c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_GPIO_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <MX_GPIO_Init+0x4c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_GPIO_Init+0x4c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085a:	2007      	movs	r0, #7
 800085c:	f000 fa1a 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_TIM_Base_MspInit+0x48>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d115      	bne.n	80008aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_TIM_Base_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <HAL_TIM_Base_MspInit+0x4c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_TIM_Base_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2019      	movs	r0, #25
 80008a0:	f000 fa03 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008a4:	2019      	movs	r0, #25
 80008a6:	f000 fa1c 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010000 	.word	0x40010000
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <HAL_TIM_MspPostInit+0x68>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d11e      	bne.n	800091c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_TIM_MspPostInit+0x6c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <HAL_TIM_MspPostInit+0x6c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_TIM_MspPostInit+0x6c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800090c:	2301      	movs	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_TIM_MspPostInit+0x70>)
 8000918:	f000 f9fe 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40010000 	.word	0x40010000
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f89a 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800098a:	f001 faef 	bl	8001f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000002c 	.word	0x2000002c

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f002 f96b 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fdc7 	bl	8000580 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a00:	08002d54 	.word	0x08002d54
  ldr r2, =_sbss
 8000a04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a08:	20000078 	.word	0x20000078

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f92b 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff feea 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f943 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f90b 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000004 	.word	0x20000004
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000000c 	.word	0x2000000c
 8000ad8:	20000074 	.word	0x20000074

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000074 	.word	0x20000074

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff29 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff3e 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff31 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e165      	b.n	8001000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8154 	bne.w	8000ffa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d005      	beq.n	8000d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d130      	bne.n	8000dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d017      	beq.n	8000e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d123      	bne.n	8000e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0203 	and.w	r2, r3, #3
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80ae 	beq.w	8000ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a5c      	ldr	r2, [pc, #368]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eba:	4a58      	ldr	r2, [pc, #352]	; (800101c <HAL_GPIO_Init+0x304>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <HAL_GPIO_Init+0x308>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x21a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x30c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x216>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x212>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_Init+0x314>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x20e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <HAL_GPIO_Init+0x318>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x20a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4a      	ldr	r2, [pc, #296]	; (8001034 <HAL_GPIO_Init+0x31c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x206>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a49      	ldr	r2, [pc, #292]	; (8001038 <HAL_GPIO_Init+0x320>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x202>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e00c      	b.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e00a      	b.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000f1e:	2305      	movs	r3, #5
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000f22:	2304      	movs	r3, #4
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x21c>
 8000f32:	2300      	movs	r3, #0
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f44:	4935      	ldr	r1, [pc, #212]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <HAL_GPIO_Init+0x324>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f76:	4a31      	ldr	r2, [pc, #196]	; (800103c <HAL_GPIO_Init+0x324>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_GPIO_Init+0x324>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <HAL_GPIO_Init+0x324>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <HAL_GPIO_Init+0x324>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_GPIO_Init+0x324>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_GPIO_Init+0x324>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <HAL_GPIO_Init+0x324>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	f67f ae96 	bls.w	8000d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40021400 	.word	0x40021400
 8001038:	40021800 	.word	0x40021800
 800103c:	40013c00 	.word	0x40013c00

08001040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0cc      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d90c      	bls.n	800107c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800106a:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d001      	beq.n	800107c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0b8      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001094:	4b59      	ldr	r3, [pc, #356]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a58      	ldr	r2, [pc, #352]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800109e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ac:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b8:	4b50      	ldr	r3, [pc, #320]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	494d      	ldr	r1, [pc, #308]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d044      	beq.n	8001160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d119      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e07f      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d003      	beq.n	80010fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d109      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e06f      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e067      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f023 0203 	bic.w	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4934      	ldr	r1, [pc, #208]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	4313      	orrs	r3, r2
 800112e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001130:	f7ff fcd4 	bl	8000adc <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001136:	e00a      	b.n	800114e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001138:	f7ff fcd0 	bl	8000adc <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f241 3288 	movw	r2, #5000	; 0x1388
 8001146:	4293      	cmp	r3, r2
 8001148:	d901      	bls.n	800114e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e04f      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 020c 	and.w	r2, r3, #12
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	429a      	cmp	r2, r3
 800115e:	d1eb      	bne.n	8001138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d20c      	bcs.n	8001188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e032      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4916      	ldr	r1, [pc, #88]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	490e      	ldr	r1, [pc, #56]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011c6:	f000 f821 	bl	800120c <HAL_RCC_GetSysClockFreq>
 80011ca:	4602      	mov	r2, r0
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	490a      	ldr	r1, [pc, #40]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	5ccb      	ldrb	r3, [r1, r3]
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_RCC_ClockConfig+0x1c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fc34 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00
 80011fc:	40023800 	.word	0x40023800
 8001200:	08002d34 	.word	0x08002d34
 8001204:	20000004 	.word	0x20000004
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800120c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001210:	b0ae      	sub	sp, #184	; 0xb8
 8001212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001232:	4bcb      	ldr	r3, [pc, #812]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b0c      	cmp	r3, #12
 800123c:	f200 8206 	bhi.w	800164c <HAL_RCC_GetSysClockFreq+0x440>
 8001240:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	0800127d 	.word	0x0800127d
 800124c:	0800164d 	.word	0x0800164d
 8001250:	0800164d 	.word	0x0800164d
 8001254:	0800164d 	.word	0x0800164d
 8001258:	08001285 	.word	0x08001285
 800125c:	0800164d 	.word	0x0800164d
 8001260:	0800164d 	.word	0x0800164d
 8001264:	0800164d 	.word	0x0800164d
 8001268:	0800128d 	.word	0x0800128d
 800126c:	0800164d 	.word	0x0800164d
 8001270:	0800164d 	.word	0x0800164d
 8001274:	0800164d 	.word	0x0800164d
 8001278:	0800147d 	.word	0x0800147d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800127c:	4bb9      	ldr	r3, [pc, #740]	; (8001564 <HAL_RCC_GetSysClockFreq+0x358>)
 800127e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001282:	e1e7      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001284:	4bb8      	ldr	r3, [pc, #736]	; (8001568 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800128a:	e1e3      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800128c:	4bb4      	ldr	r3, [pc, #720]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001298:	4bb1      	ldr	r3, [pc, #708]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d071      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a4:	4bae      	ldr	r3, [pc, #696]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	2200      	movs	r2, #0
 80012ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80012ca:	4622      	mov	r2, r4
 80012cc:	462b      	mov	r3, r5
 80012ce:	f04f 0000 	mov.w	r0, #0
 80012d2:	f04f 0100 	mov.w	r1, #0
 80012d6:	0159      	lsls	r1, r3, #5
 80012d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012dc:	0150      	lsls	r0, r2, #5
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4621      	mov	r1, r4
 80012e4:	1a51      	subs	r1, r2, r1
 80012e6:	6439      	str	r1, [r7, #64]	; 0x40
 80012e8:	4629      	mov	r1, r5
 80012ea:	eb63 0301 	sbc.w	r3, r3, r1
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80012fc:	4649      	mov	r1, r9
 80012fe:	018b      	lsls	r3, r1, #6
 8001300:	4641      	mov	r1, r8
 8001302:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001306:	4641      	mov	r1, r8
 8001308:	018a      	lsls	r2, r1, #6
 800130a:	4641      	mov	r1, r8
 800130c:	1a51      	subs	r1, r2, r1
 800130e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001310:	4649      	mov	r1, r9
 8001312:	eb63 0301 	sbc.w	r3, r3, r1
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001324:	4649      	mov	r1, r9
 8001326:	00cb      	lsls	r3, r1, #3
 8001328:	4641      	mov	r1, r8
 800132a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800132e:	4641      	mov	r1, r8
 8001330:	00ca      	lsls	r2, r1, #3
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	4603      	mov	r3, r0
 8001338:	4622      	mov	r2, r4
 800133a:	189b      	adds	r3, r3, r2
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
 800133e:	462b      	mov	r3, r5
 8001340:	460a      	mov	r2, r1
 8001342:	eb42 0303 	adc.w	r3, r2, r3
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001354:	4629      	mov	r1, r5
 8001356:	024b      	lsls	r3, r1, #9
 8001358:	4621      	mov	r1, r4
 800135a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800135e:	4621      	mov	r1, r4
 8001360:	024a      	lsls	r2, r1, #9
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800136a:	2200      	movs	r2, #0
 800136c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001374:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001378:	f7fe ff44 	bl	8000204 <__aeabi_uldivmod>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4613      	mov	r3, r2
 8001382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001386:	e067      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001388:	4b75      	ldr	r3, [pc, #468]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	099b      	lsrs	r3, r3, #6
 800138e:	2200      	movs	r2, #0
 8001390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001394:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800139c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80013a2:	2300      	movs	r3, #0
 80013a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80013aa:	4622      	mov	r2, r4
 80013ac:	462b      	mov	r3, r5
 80013ae:	f04f 0000 	mov.w	r0, #0
 80013b2:	f04f 0100 	mov.w	r1, #0
 80013b6:	0159      	lsls	r1, r3, #5
 80013b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013bc:	0150      	lsls	r0, r2, #5
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4621      	mov	r1, r4
 80013c4:	1a51      	subs	r1, r2, r1
 80013c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80013c8:	4629      	mov	r1, r5
 80013ca:	eb63 0301 	sbc.w	r3, r3, r1
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80013dc:	4649      	mov	r1, r9
 80013de:	018b      	lsls	r3, r1, #6
 80013e0:	4641      	mov	r1, r8
 80013e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013e6:	4641      	mov	r1, r8
 80013e8:	018a      	lsls	r2, r1, #6
 80013ea:	4641      	mov	r1, r8
 80013ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80013f0:	4649      	mov	r1, r9
 80013f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001402:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001406:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800140a:	4692      	mov	sl, r2
 800140c:	469b      	mov	fp, r3
 800140e:	4623      	mov	r3, r4
 8001410:	eb1a 0303 	adds.w	r3, sl, r3
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	462b      	mov	r3, r5
 8001418:	eb4b 0303 	adc.w	r3, fp, r3
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800142a:	4629      	mov	r1, r5
 800142c:	028b      	lsls	r3, r1, #10
 800142e:	4621      	mov	r1, r4
 8001430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001434:	4621      	mov	r1, r4
 8001436:	028a      	lsls	r2, r1, #10
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001440:	2200      	movs	r2, #0
 8001442:	673b      	str	r3, [r7, #112]	; 0x70
 8001444:	677a      	str	r2, [r7, #116]	; 0x74
 8001446:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800144a:	f7fe fedb 	bl	8000204 <__aeabi_uldivmod>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4613      	mov	r3, r2
 8001454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001458:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	3301      	adds	r3, #1
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800146a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800146e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800147a:	e0eb      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d06b      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_RCC_GetSysClockFreq+0x354>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	099b      	lsrs	r3, r3, #6
 800149a:	2200      	movs	r2, #0
 800149c:	66bb      	str	r3, [r7, #104]	; 0x68
 800149e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a6:	663b      	str	r3, [r7, #96]	; 0x60
 80014a8:	2300      	movs	r3, #0
 80014aa:	667b      	str	r3, [r7, #100]	; 0x64
 80014ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80014b0:	4622      	mov	r2, r4
 80014b2:	462b      	mov	r3, r5
 80014b4:	f04f 0000 	mov.w	r0, #0
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	0159      	lsls	r1, r3, #5
 80014be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c2:	0150      	lsls	r0, r2, #5
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4621      	mov	r1, r4
 80014ca:	1a51      	subs	r1, r2, r1
 80014cc:	61b9      	str	r1, [r7, #24]
 80014ce:	4629      	mov	r1, r5
 80014d0:	eb63 0301 	sbc.w	r3, r3, r1
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014e2:	4659      	mov	r1, fp
 80014e4:	018b      	lsls	r3, r1, #6
 80014e6:	4651      	mov	r1, sl
 80014e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ec:	4651      	mov	r1, sl
 80014ee:	018a      	lsls	r2, r1, #6
 80014f0:	4651      	mov	r1, sl
 80014f2:	ebb2 0801 	subs.w	r8, r2, r1
 80014f6:	4659      	mov	r1, fp
 80014f8:	eb63 0901 	sbc.w	r9, r3, r1
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001508:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800150c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001510:	4690      	mov	r8, r2
 8001512:	4699      	mov	r9, r3
 8001514:	4623      	mov	r3, r4
 8001516:	eb18 0303 	adds.w	r3, r8, r3
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	462b      	mov	r3, r5
 800151e:	eb49 0303 	adc.w	r3, r9, r3
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001530:	4629      	mov	r1, r5
 8001532:	024b      	lsls	r3, r1, #9
 8001534:	4621      	mov	r1, r4
 8001536:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800153a:	4621      	mov	r1, r4
 800153c:	024a      	lsls	r2, r1, #9
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001546:	2200      	movs	r2, #0
 8001548:	65bb      	str	r3, [r7, #88]	; 0x58
 800154a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800154c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001550:	f7fe fe58 	bl	8000204 <__aeabi_uldivmod>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4613      	mov	r3, r2
 800155a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800155e:	e065      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x420>
 8001560:	40023800 	.word	0x40023800
 8001564:	00f42400 	.word	0x00f42400
 8001568:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_GetSysClockFreq+0x458>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	2200      	movs	r2, #0
 8001574:	4618      	mov	r0, r3
 8001576:	4611      	mov	r1, r2
 8001578:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800157c:	653b      	str	r3, [r7, #80]	; 0x50
 800157e:	2300      	movs	r3, #0
 8001580:	657b      	str	r3, [r7, #84]	; 0x54
 8001582:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001586:	4642      	mov	r2, r8
 8001588:	464b      	mov	r3, r9
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	0159      	lsls	r1, r3, #5
 8001594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001598:	0150      	lsls	r0, r2, #5
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4641      	mov	r1, r8
 80015a0:	1a51      	subs	r1, r2, r1
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	4649      	mov	r1, r9
 80015a6:	eb63 0301 	sbc.w	r3, r3, r1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80015b8:	4659      	mov	r1, fp
 80015ba:	018b      	lsls	r3, r1, #6
 80015bc:	4651      	mov	r1, sl
 80015be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015c2:	4651      	mov	r1, sl
 80015c4:	018a      	lsls	r2, r1, #6
 80015c6:	4651      	mov	r1, sl
 80015c8:	1a54      	subs	r4, r2, r1
 80015ca:	4659      	mov	r1, fp
 80015cc:	eb63 0501 	sbc.w	r5, r3, r1
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	00eb      	lsls	r3, r5, #3
 80015da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015de:	00e2      	lsls	r2, r4, #3
 80015e0:	4614      	mov	r4, r2
 80015e2:	461d      	mov	r5, r3
 80015e4:	4643      	mov	r3, r8
 80015e6:	18e3      	adds	r3, r4, r3
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	464b      	mov	r3, r9
 80015ec:	eb45 0303 	adc.w	r3, r5, r3
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015fe:	4629      	mov	r1, r5
 8001600:	028b      	lsls	r3, r1, #10
 8001602:	4621      	mov	r1, r4
 8001604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001608:	4621      	mov	r1, r4
 800160a:	028a      	lsls	r2, r1, #10
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001614:	2200      	movs	r2, #0
 8001616:	64bb      	str	r3, [r7, #72]	; 0x48
 8001618:	64fa      	str	r2, [r7, #76]	; 0x4c
 800161a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800161e:	f7fe fdf1 	bl	8000204 <__aeabi_uldivmod>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4613      	mov	r3, r2
 8001628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_RCC_GetSysClockFreq+0x458>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	0f1b      	lsrs	r3, r3, #28
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800163a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800163e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800164a:	e003      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_RCC_GetSysClockFreq+0x45c>)
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001652:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001654:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001658:	4618      	mov	r0, r3
 800165a:	37b8      	adds	r7, #184	; 0xb8
 800165c:	46bd      	mov	sp, r7
 800165e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	00f42400 	.word	0x00f42400

0800166c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e28d      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8083 	beq.w	8001792 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800168c:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b04      	cmp	r3, #4
 8001696:	d019      	beq.n	80016cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001698:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016a4:	4b8e      	ldr	r3, [pc, #568]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b0:	d00c      	beq.n	80016cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b2:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d112      	bne.n	80016e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ca:	d10b      	bne.n	80016e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	4b84      	ldr	r3, [pc, #528]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d05b      	beq.n	8001790 <HAL_RCC_OscConfig+0x124>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d157      	bne.n	8001790 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e25a      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d106      	bne.n	80016fc <HAL_RCC_OscConfig+0x90>
 80016ee:	4b7c      	ldr	r3, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a7b      	ldr	r2, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e01d      	b.n	8001738 <HAL_RCC_OscConfig+0xcc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0xb4>
 8001706:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a75      	ldr	r2, [pc, #468]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b73      	ldr	r3, [pc, #460]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0xcc>
 8001720:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6b      	ldr	r2, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff f9cc 	bl	8000adc <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff f9c8 	bl	8000adc <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e21f      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0xdc>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff f9b8 	bl	8000adc <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff f9b4 	bl	8000adc <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e20b      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001782:	4b57      	ldr	r3, [pc, #348]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x104>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d06f      	beq.n	800187e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800179e:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d017      	beq.n	80017da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017aa:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017b6:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d11c      	bne.n	8001808 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x186>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e1d3      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4937      	ldr	r1, [pc, #220]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	e03a      	b.n	800187e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCC_OscConfig+0x278>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff f961 	bl	8000adc <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff f95d 	bl	8000adc <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1b4      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4925      	ldr	r1, [pc, #148]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_RCC_OscConfig+0x278>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f940 	bl	8000adc <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff f93c 	bl	8000adc <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e193      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d036      	beq.n	80018f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_RCC_OscConfig+0x27c>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff f920 	bl	8000adc <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff f91c 	bl	8000adc <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e173      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80018b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x234>
 80018be:	e01b      	b.n	80018f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff f909 	bl	8000adc <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	e00e      	b.n	80018ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff f905 	bl	8000adc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d907      	bls.n	80018ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e15c      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470000 	.word	0x42470000
 80018e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ea      	bne.n	80018ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8097 	beq.w	8001a34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b83      	ldr	r3, [pc, #524]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10f      	bne.n	8001936 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a7e      	ldr	r2, [pc, #504]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b7c      	ldr	r3, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <HAL_RCC_OscConfig+0x4b0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x4b0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a75      	ldr	r2, [pc, #468]	; (8001b1c <HAL_RCC_OscConfig+0x4b0>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194e:	f7ff f8c5 	bl	8000adc <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001956:	f7ff f8c1 	bl	8000adc <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e118      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x4b0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x31e>
 800197c:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a65      	ldr	r2, [pc, #404]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x358>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x340>
 8001992:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a60      	ldr	r2, [pc, #384]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a5d      	ldr	r2, [pc, #372]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x358>
 80019ac:	4b5a      	ldr	r3, [pc, #360]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a59      	ldr	r2, [pc, #356]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a56      	ldr	r2, [pc, #344]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80019be:	f023 0304 	bic.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d015      	beq.n	80019f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f886 	bl	8000adc <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff f882 	bl	8000adc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0d7      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ea:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ee      	beq.n	80019d4 <HAL_RCC_OscConfig+0x368>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff f870 	bl	8000adc <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff f86c 	bl	8000adc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0c1      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a16:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ee      	bne.n	8001a00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a3a      	ldr	r2, [pc, #232]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80ad 	beq.w	8001b98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d060      	beq.n	8001b0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d145      	bne.n	8001ade <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_RCC_OscConfig+0x4b4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff f840 	bl	8000adc <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f83c 	bl	8000adc <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e093      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	3b01      	subs	r3, #1
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	071b      	lsls	r3, r3, #28
 8001aaa:	491b      	ldr	r1, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x4b4>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f811 	bl	8000adc <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f80d 	bl	8000adc <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e064      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x452>
 8001adc:	e05c      	b.n	8001b98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_OscConfig+0x4b4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7fe fffa 	bl	8000adc <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7fe fff6 	bl	8000adc <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e04d      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x480>
 8001b0a:	e045      	b.n	8001b98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e040      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d030      	beq.n	8001b94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d129      	bne.n	8001b94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d122      	bne.n	8001b94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d119      	bne.n	8001b94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d10f      	bne.n	8001b94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e041      	b.n	8001c3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fe4c 	bl	800086c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3304      	adds	r3, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f000 fc7a 	bl	80024e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d001      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e04e      	b.n	8001cfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d022      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8a:	d01d      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d018      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x80>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d111      	bne.n	8001cec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d010      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cea:	e007      	b.n	8001cfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40000800 	.word	0x40000800
 8001d18:	40000c00 	.word	0x40000c00
 8001d1c:	40010400 	.word	0x40010400
 8001d20:	40014000 	.word	0x40014000
 8001d24:	40001800 	.word	0x40001800

08001d28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e041      	b.n	8001dbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f839 	bl	8001dc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fbba 	bl	80024e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_TIM_PWM_Start+0x24>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e022      	b.n	8001e46 <HAL_TIM_PWM_Start+0x6a>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d109      	bne.n	8001e1a <HAL_TIM_PWM_Start+0x3e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	e015      	b.n	8001e46 <HAL_TIM_PWM_Start+0x6a>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d109      	bne.n	8001e34 <HAL_TIM_PWM_Start+0x58>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e008      	b.n	8001e46 <HAL_TIM_PWM_Start+0x6a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	bf14      	ite	ne
 8001e40:	2301      	movne	r3, #1
 8001e42:	2300      	moveq	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07c      	b.n	8001f48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <HAL_TIM_PWM_Start+0x82>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e5c:	e013      	b.n	8001e86 <HAL_TIM_PWM_Start+0xaa>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d104      	bne.n	8001e6e <HAL_TIM_PWM_Start+0x92>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e6c:	e00b      	b.n	8001e86 <HAL_TIM_PWM_Start+0xaa>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d104      	bne.n	8001e7e <HAL_TIM_PWM_Start+0xa2>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e7c:	e003      	b.n	8001e86 <HAL_TIM_PWM_Start+0xaa>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fe10 	bl	8002ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_TIM_PWM_Start+0x174>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_TIM_PWM_Start+0xcc>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <HAL_TIM_PWM_Start+0x178>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_TIM_PWM_Start+0xd0>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_TIM_PWM_Start+0xd2>
 8001eac:	2300      	movs	r3, #0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <HAL_TIM_PWM_Start+0x174>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x136>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d01d      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x136>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_TIM_PWM_Start+0x17c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d018      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x136>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_TIM_PWM_Start+0x180>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x136>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_TIM_PWM_Start+0x184>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00e      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x136>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_TIM_PWM_Start+0x178>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x136>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_TIM_PWM_Start+0x188>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x136>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_TIM_PWM_Start+0x18c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d111      	bne.n	8001f36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d010      	beq.n	8001f46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	e007      	b.n	8001f46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40010400 	.word	0x40010400
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800
 8001f60:	40000c00 	.word	0x40000c00
 8001f64:	40014000 	.word	0x40014000
 8001f68:	40001800 	.word	0x40001800

08001f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0202 	mvn.w	r2, #2
 8001f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fa77 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa69 	bl	800248e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fa7a 	bl	80024b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0204 	mvn.w	r2, #4
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fa4d 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fa3f 	bl	800248e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fa50 	bl	80024b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b08      	cmp	r3, #8
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0208 	mvn.w	r2, #8
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa23 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fa15 	bl	800248e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fa26 	bl	80024b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b10      	cmp	r3, #16
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b10      	cmp	r3, #16
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0210 	mvn.w	r2, #16
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2208      	movs	r2, #8
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f9f9 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f9eb 	bl	800248e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f9fc 	bl	80024b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fa0c 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002108:	2b80      	cmp	r3, #128	; 0x80
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fdca 	bl	8002cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f9c1 	bl	80024ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b20      	cmp	r3, #32
 8002154:	d10e      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b20      	cmp	r3, #32
 8002162:	d107      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0220 	mvn.w	r2, #32
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fd94 	bl	8002c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002196:	2302      	movs	r3, #2
 8002198:	e0ae      	b.n	80022f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	f200 809f 	bhi.w	80022e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021e5 	.word	0x080021e5
 80021b4:	080022e9 	.word	0x080022e9
 80021b8:	080022e9 	.word	0x080022e9
 80021bc:	080022e9 	.word	0x080022e9
 80021c0:	08002225 	.word	0x08002225
 80021c4:	080022e9 	.word	0x080022e9
 80021c8:	080022e9 	.word	0x080022e9
 80021cc:	080022e9 	.word	0x080022e9
 80021d0:	08002267 	.word	0x08002267
 80021d4:	080022e9 	.word	0x080022e9
 80021d8:	080022e9 	.word	0x080022e9
 80021dc:	080022e9 	.word	0x080022e9
 80021e0:	080022a7 	.word	0x080022a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fa18 	bl	8002620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6999      	ldr	r1, [r3, #24]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	619a      	str	r2, [r3, #24]
      break;
 8002222:	e064      	b.n	80022ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fa68 	bl	8002700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800224e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6999      	ldr	r1, [r3, #24]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	619a      	str	r2, [r3, #24]
      break;
 8002264:	e043      	b.n	80022ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fabd 	bl	80027ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0204 	bic.w	r2, r2, #4
 8002290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69d9      	ldr	r1, [r3, #28]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	61da      	str	r2, [r3, #28]
      break;
 80022a4:	e023      	b.n	80022ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fb11 	bl	80028d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69d9      	ldr	r1, [r3, #28]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	021a      	lsls	r2, r3, #8
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	61da      	str	r2, [r3, #28]
      break;
 80022e6:	e002      	b.n	80022ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	75fb      	strb	r3, [r7, #23]
      break;
 80022ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_TIM_ConfigClockSource+0x1c>
 8002318:	2302      	movs	r3, #2
 800231a:	e0b4      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x186>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800233a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002354:	d03e      	beq.n	80023d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235a:	f200 8087 	bhi.w	800246c <HAL_TIM_ConfigClockSource+0x16c>
 800235e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002362:	f000 8086 	beq.w	8002472 <HAL_TIM_ConfigClockSource+0x172>
 8002366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236a:	d87f      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
 800236c:	2b70      	cmp	r3, #112	; 0x70
 800236e:	d01a      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002370:	2b70      	cmp	r3, #112	; 0x70
 8002372:	d87b      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
 8002374:	2b60      	cmp	r3, #96	; 0x60
 8002376:	d050      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x11a>
 8002378:	2b60      	cmp	r3, #96	; 0x60
 800237a:	d877      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b50      	cmp	r3, #80	; 0x50
 800237e:	d03c      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0xfa>
 8002380:	2b50      	cmp	r3, #80	; 0x50
 8002382:	d873      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d058      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x13a>
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d86f      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b30      	cmp	r3, #48	; 0x30
 800238e:	d064      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x15a>
 8002390:	2b30      	cmp	r3, #48	; 0x30
 8002392:	d86b      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b20      	cmp	r3, #32
 8002396:	d060      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x15a>
 8002398:	2b20      	cmp	r3, #32
 800239a:	d867      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b00      	cmp	r3, #0
 800239e:	d05c      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x15a>
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d05a      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x15a>
 80023a4:	e062      	b.n	800246c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6899      	ldr	r1, [r3, #8]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f000 fb5d 	bl	8002a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	609a      	str	r2, [r3, #8]
      break;
 80023d2:	e04f      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f000 fb46 	bl	8002a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f6:	609a      	str	r2, [r3, #8]
      break;
 80023f8:	e03c      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	461a      	mov	r2, r3
 8002408:	f000 faba 	bl	8002980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2150      	movs	r1, #80	; 0x50
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fb13 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002418:	e02c      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	461a      	mov	r2, r3
 8002428:	f000 fad9 	bl	80029de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2160      	movs	r1, #96	; 0x60
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb03 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002438:	e01c      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	f000 fa9a 	bl	8002980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2140      	movs	r1, #64	; 0x40
 8002452:	4618      	mov	r0, r3
 8002454:	f000 faf3 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002458:	e00c      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f000 faea 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 800246a:	e003      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e000      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <TIM_Base_SetConfig+0x114>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <TIM_Base_SetConfig+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d00f      	beq.n	8002520 <TIM_Base_SetConfig+0x40>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3d      	ldr	r2, [pc, #244]	; (80025f8 <TIM_Base_SetConfig+0x118>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00b      	beq.n	8002520 <TIM_Base_SetConfig+0x40>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <TIM_Base_SetConfig+0x11c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <TIM_Base_SetConfig+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <TIM_Base_SetConfig+0x120>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d003      	beq.n	8002520 <TIM_Base_SetConfig+0x40>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <TIM_Base_SetConfig+0x124>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d108      	bne.n	8002532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <TIM_Base_SetConfig+0x114>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d027      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2c      	ldr	r2, [pc, #176]	; (80025f8 <TIM_Base_SetConfig+0x118>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d023      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a2b      	ldr	r2, [pc, #172]	; (80025fc <TIM_Base_SetConfig+0x11c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <TIM_Base_SetConfig+0x120>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01b      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a29      	ldr	r2, [pc, #164]	; (8002604 <TIM_Base_SetConfig+0x124>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d017      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <TIM_Base_SetConfig+0x128>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a27      	ldr	r2, [pc, #156]	; (800260c <TIM_Base_SetConfig+0x12c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00f      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <TIM_Base_SetConfig+0x130>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <TIM_Base_SetConfig+0x134>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a24      	ldr	r2, [pc, #144]	; (8002618 <TIM_Base_SetConfig+0x138>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a23      	ldr	r2, [pc, #140]	; (800261c <TIM_Base_SetConfig+0x13c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <TIM_Base_SetConfig+0x114>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0xf8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <TIM_Base_SetConfig+0x124>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d103      	bne.n	80025e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	615a      	str	r2, [r3, #20]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000800 	.word	0x40000800
 8002600:	40000c00 	.word	0x40000c00
 8002604:	40010400 	.word	0x40010400
 8002608:	40014000 	.word	0x40014000
 800260c:	40014400 	.word	0x40014400
 8002610:	40014800 	.word	0x40014800
 8002614:	40001800 	.word	0x40001800
 8002618:	40001c00 	.word	0x40001c00
 800261c:	40002000 	.word	0x40002000

08002620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f023 0201 	bic.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f023 0302 	bic.w	r3, r3, #2
 8002668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <TIM_OC1_SetConfig+0xd8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d003      	beq.n	8002684 <TIM_OC1_SetConfig+0x64>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <TIM_OC1_SetConfig+0xdc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d10c      	bne.n	800269e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 0308 	bic.w	r3, r3, #8
 800268a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <TIM_OC1_SetConfig+0xd8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_OC1_SetConfig+0x8e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <TIM_OC1_SetConfig+0xdc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d111      	bne.n	80026d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	621a      	str	r2, [r3, #32]
}
 80026ec:	bf00      	nop
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40010400 	.word	0x40010400

08002700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f023 0210 	bic.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800272e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f023 0320 	bic.w	r3, r3, #32
 800274a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <TIM_OC2_SetConfig+0xe4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_OC2_SetConfig+0x68>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <TIM_OC2_SetConfig+0xe8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10d      	bne.n	8002784 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <TIM_OC2_SetConfig+0xe4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d003      	beq.n	8002794 <TIM_OC2_SetConfig+0x94>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a16      	ldr	r2, [pc, #88]	; (80027e8 <TIM_OC2_SetConfig+0xe8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d113      	bne.n	80027bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800279a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40010400 	.word	0x40010400

080027ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <TIM_OC3_SetConfig+0xe0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d003      	beq.n	8002852 <TIM_OC3_SetConfig+0x66>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <TIM_OC3_SetConfig+0xe4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10d      	bne.n	800286e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800286c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a16      	ldr	r2, [pc, #88]	; (80028cc <TIM_OC3_SetConfig+0xe0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_OC3_SetConfig+0x92>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <TIM_OC3_SetConfig+0xe4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d113      	bne.n	80028a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800288c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	621a      	str	r2, [r3, #32]
}
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40010400 	.word	0x40010400

080028d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800291e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	031b      	lsls	r3, r3, #12
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <TIM_OC4_SetConfig+0xa4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_OC4_SetConfig+0x68>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a11      	ldr	r2, [pc, #68]	; (800297c <TIM_OC4_SetConfig+0xa8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d109      	bne.n	8002950 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40010000 	.word	0x40010000
 800297c:	40010400 	.word	0x40010400

08002980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0201 	bic.w	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 030a 	bic.w	r3, r3, #10
 80029bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029de:	b480      	push	{r7}
 80029e0:	b087      	sub	sp, #28
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0210 	bic.w	r2, r3, #16
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	031b      	lsls	r3, r3, #12
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f043 0307 	orr.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	021a      	lsls	r2, r3, #8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1a      	ldr	r2, [r3, #32]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e05a      	b.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d01d      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10c      	bne.n	8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40001800 	.word	0x40001800

08002bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e03d      	b.n	8002c90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4d0d      	ldr	r5, [pc, #52]	; (8002cfc <__libc_init_array+0x38>)
 8002cc8:	4c0d      	ldr	r4, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	2600      	movs	r6, #0
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	4d0b      	ldr	r5, [pc, #44]	; (8002d04 <__libc_init_array+0x40>)
 8002cd6:	4c0c      	ldr	r4, [pc, #48]	; (8002d08 <__libc_init_array+0x44>)
 8002cd8:	f000 f820 	bl	8002d1c <_init>
 8002cdc:	1b64      	subs	r4, r4, r5
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08002d4c 	.word	0x08002d4c
 8002d00:	08002d4c 	.word	0x08002d4c
 8002d04:	08002d4c 	.word	0x08002d4c
 8002d08:	08002d50 	.word	0x08002d50

08002d0c <memset>:
 8002d0c:	4402      	add	r2, r0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <memset+0xa>
 8002d14:	4770      	bx	lr
 8002d16:	f803 1b01 	strb.w	r1, [r3], #1
 8002d1a:	e7f9      	b.n	8002d10 <memset+0x4>

08002d1c <_init>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr

08002d28 <_fini>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr
