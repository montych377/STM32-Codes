
TUT_TFT_Display_Proteus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002018  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028e4  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a08  08004a08  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004a08  08004a08  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a08  08004a08  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000024  08004a34  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08004a34  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065e0  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001707  00000000  00000000  0002662d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016a77  00000000  00000000  000283d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000078cf  00000000  00000000  0003ee4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00080d94  00000000  00000000  0004671e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000c74b2  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000005e8  00000000  00000000  000c7508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a0  00000000  00000000  000c7af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800210c 	.word	0x0800210c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800210c 	.word	0x0800210c

0800014c <ILI9341_Select>:

#include "stm32f1xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ILI9341_Select+0x14>)
 8000156:	f001 f949 	bl	80013ec <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ILI9341_Unselect+0x14>)
 800016e:	f001 f93d 	bl	80013ec <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ILI9341_Reset>:

static void ILI9341_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2101      	movs	r1, #1
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ILI9341_Reset+0x24>)
 8000186:	f001 f931 	bl	80013ec <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f000 fea2 	bl	8000ed4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2101      	movs	r1, #1
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ILI9341_Reset+0x24>)
 8000196:	f001 f929 	bl	80013ec <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2102      	movs	r1, #2
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ILI9341_WriteCommand+0x2c>)
 80001b4:	f001 f91a 	bl	80013ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ILI9341_WriteCommand+0x30>)
 80001c2:	f001 fd8d 	bl	8001ce0 <HAL_SPI_Transmit>

}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	20000040 	.word	0x20000040

080001d8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2102      	movs	r1, #2
 80001e6:	4811      	ldr	r0, [pc, #68]	; (800022c <ILI9341_WriteData+0x54>)
 80001e8:	f001 f900 	bl	80013ec <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80001ec:	e015      	b.n	800021a <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001f4:	bf28      	it	cs
 80001f6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80001fa:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001fc:	89fa      	ldrh	r2, [r7, #14]
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000202:	6879      	ldr	r1, [r7, #4]
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <ILI9341_WriteData+0x58>)
 8000206:	f001 fd6b 	bl	8001ce0 <HAL_SPI_Transmit>

        buff += chunk_size;
 800020a:	89fb      	ldrh	r3, [r7, #14]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	4413      	add	r3, r2
 8000210:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000212:	89fb      	ldrh	r3, [r7, #14]
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	1ad3      	subs	r3, r2, r3
 8000218:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d1e6      	bne.n	80001ee <ILI9341_WriteData+0x16>
    }
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010c00 	.word	0x40010c00
 8000230:	20000040 	.word	0x20000040

08000234 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	4604      	mov	r4, r0
 800023c:	4608      	mov	r0, r1
 800023e:	4611      	mov	r1, r2
 8000240:	461a      	mov	r2, r3
 8000242:	4623      	mov	r3, r4
 8000244:	80fb      	strh	r3, [r7, #6]
 8000246:	4603      	mov	r3, r0
 8000248:	80bb      	strh	r3, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	807b      	strh	r3, [r7, #2]
 800024e:	4613      	mov	r3, r2
 8000250:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000252:	202a      	movs	r0, #42	; 0x2a
 8000254:	f7ff ffa6 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000258:	88fb      	ldrh	r3, [r7, #6]
 800025a:	0a1b      	lsrs	r3, r3, #8
 800025c:	b29b      	uxth	r3, r3
 800025e:	b2db      	uxtb	r3, r3
 8000260:	733b      	strb	r3, [r7, #12]
 8000262:	88fb      	ldrh	r3, [r7, #6]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	737b      	strb	r3, [r7, #13]
 8000268:	887b      	ldrh	r3, [r7, #2]
 800026a:	0a1b      	lsrs	r3, r3, #8
 800026c:	b29b      	uxth	r3, r3
 800026e:	b2db      	uxtb	r3, r3
 8000270:	73bb      	strb	r3, [r7, #14]
 8000272:	887b      	ldrh	r3, [r7, #2]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	2104      	movs	r1, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ffaa 	bl	80001d8 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000284:	202b      	movs	r0, #43	; 0x2b
 8000286:	f7ff ff8d 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800028a:	88bb      	ldrh	r3, [r7, #4]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	b29b      	uxth	r3, r3
 8000290:	b2db      	uxtb	r3, r3
 8000292:	723b      	strb	r3, [r7, #8]
 8000294:	88bb      	ldrh	r3, [r7, #4]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	727b      	strb	r3, [r7, #9]
 800029a:	883b      	ldrh	r3, [r7, #0]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	b29b      	uxth	r3, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	883b      	ldrh	r3, [r7, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	2104      	movs	r1, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff91 	bl	80001d8 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80002b6:	202c      	movs	r0, #44	; 0x2c
 80002b8:	f7ff ff74 	bl	80001a4 <ILI9341_WriteCommand>
}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd90      	pop	{r4, r7, pc}

080002c4 <ILI9341_Init>:

void ILI9341_Init() {
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b09b      	sub	sp, #108	; 0x6c
 80002c8:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80002ca:	f7ff ff3f 	bl	800014c <ILI9341_Select>
    ILI9341_Reset();
 80002ce:	f7ff ff55 	bl	800017c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f7ff ff66 	bl	80001a4 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80002d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002dc:	f000 fdfa 	bl	8000ed4 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80002e0:	20cb      	movs	r0, #203	; 0xcb
 80002e2:	f7ff ff5f 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80002e6:	4a87      	ldr	r2, [pc, #540]	; (8000504 <ILI9341_Init+0x240>)
 80002e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80002f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002fa:	2105      	movs	r1, #5
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff6b 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000302:	20cf      	movs	r0, #207	; 0xcf
 8000304:	f7ff ff4e 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000308:	4a7f      	ldr	r2, [pc, #508]	; (8000508 <ILI9341_Init+0x244>)
 800030a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	4611      	mov	r1, r2
 8000312:	8019      	strh	r1, [r3, #0]
 8000314:	3302      	adds	r3, #2
 8000316:	0c12      	lsrs	r2, r2, #16
 8000318:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800031a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800031e:	2103      	movs	r1, #3
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff59 	bl	80001d8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000326:	20e8      	movs	r0, #232	; 0xe8
 8000328:	f7ff ff3c 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 800032c:	4a77      	ldr	r2, [pc, #476]	; (800050c <ILI9341_Init+0x248>)
 800032e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	4611      	mov	r1, r2
 8000336:	8019      	strh	r1, [r3, #0]
 8000338:	3302      	adds	r3, #2
 800033a:	0c12      	lsrs	r2, r2, #16
 800033c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800033e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000342:	2103      	movs	r1, #3
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff47 	bl	80001d8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800034a:	20ea      	movs	r0, #234	; 0xea
 800034c:	f7ff ff2a 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000350:	2300      	movs	r3, #0
 8000352:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800035a:	2102      	movs	r1, #2
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff3b 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000362:	20ed      	movs	r0, #237	; 0xed
 8000364:	f7ff ff1e 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000368:	4b69      	ldr	r3, [pc, #420]	; (8000510 <ILI9341_Init+0x24c>)
 800036a:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 800036c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000370:	2104      	movs	r1, #4
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff30 	bl	80001d8 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000378:	20f7      	movs	r0, #247	; 0xf7
 800037a:	f7ff ff13 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800037e:	2320      	movs	r3, #32
 8000380:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff24 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000390:	20c0      	movs	r0, #192	; 0xc0
 8000392:	f7ff ff07 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000396:	2323      	movs	r3, #35	; 0x23
 8000398:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 800039c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003a0:	2101      	movs	r1, #1
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff18 	bl	80001d8 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80003a8:	20c1      	movs	r0, #193	; 0xc1
 80003aa:	f7ff fefb 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80003ae:	2310      	movs	r3, #16
 80003b0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80003b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff0c 	bl	80001d8 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80003c0:	20c5      	movs	r0, #197	; 0xc5
 80003c2:	f7ff feef 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80003c6:	f642 033e 	movw	r3, #10302	; 0x283e
 80003ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80003ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003d2:	2102      	movs	r1, #2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff feff 	bl	80001d8 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80003da:	20c7      	movs	r0, #199	; 0xc7
 80003dc:	f7ff fee2 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80003e0:	2386      	movs	r3, #134	; 0x86
 80003e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80003e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003ea:	2101      	movs	r1, #1
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff fef3 	bl	80001d8 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80003f2:	2036      	movs	r0, #54	; 0x36
 80003f4:	f7ff fed6 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80003f8:	2348      	movs	r3, #72	; 0x48
 80003fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80003fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000402:	2101      	movs	r1, #1
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fee7 	bl	80001d8 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800040a:	203a      	movs	r0, #58	; 0x3a
 800040c:	f7ff feca 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000410:	2355      	movs	r3, #85	; 0x55
 8000412:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800041a:	2101      	movs	r1, #1
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff fedb 	bl	80001d8 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000422:	20b1      	movs	r0, #177	; 0xb1
 8000424:	f7ff febe 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000428:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800042c:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 800042e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000432:	2102      	movs	r1, #2
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fecf 	bl	80001d8 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800043a:	20b6      	movs	r0, #182	; 0xb6
 800043c:	f7ff feb2 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000440:	4a34      	ldr	r2, [pc, #208]	; (8000514 <ILI9341_Init+0x250>)
 8000442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000446:	6812      	ldr	r2, [r2, #0]
 8000448:	4611      	mov	r1, r2
 800044a:	8019      	strh	r1, [r3, #0]
 800044c:	3302      	adds	r3, #2
 800044e:	0c12      	lsrs	r2, r2, #16
 8000450:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000456:	2103      	movs	r1, #3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff febd 	bl	80001d8 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800045e:	20f2      	movs	r0, #242	; 0xf2
 8000460:	f7ff fea0 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046e:	2101      	movs	r1, #1
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff feb1 	bl	80001d8 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000476:	2026      	movs	r0, #38	; 0x26
 8000478:	f7ff fe94 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800047c:	2301      	movs	r3, #1
 800047e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8000482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fea5 	bl	80001d8 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800048e:	20e0      	movs	r0, #224	; 0xe0
 8000490:	f7ff fe88 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000494:	4b20      	ldr	r3, [pc, #128]	; (8000518 <ILI9341_Init+0x254>)
 8000496:	f107 0414 	add.w	r4, r7, #20
 800049a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800049c:	c407      	stmia	r4!, {r0, r1, r2}
 800049e:	8023      	strh	r3, [r4, #0]
 80004a0:	3402      	adds	r4, #2
 80004a2:	0c1b      	lsrs	r3, r3, #16
 80004a4:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	210f      	movs	r1, #15
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fe93 	bl	80001d8 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80004b2:	20e1      	movs	r0, #225	; 0xe1
 80004b4:	f7ff fe76 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <ILI9341_Init+0x258>)
 80004ba:	1d3c      	adds	r4, r7, #4
 80004bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004be:	c407      	stmia	r4!, {r0, r1, r2}
 80004c0:	8023      	strh	r3, [r4, #0]
 80004c2:	3402      	adds	r4, #2
 80004c4:	0c1b      	lsrs	r3, r3, #16
 80004c6:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	210f      	movs	r1, #15
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fe83 	bl	80001d8 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80004d2:	2011      	movs	r0, #17
 80004d4:	f7ff fe66 	bl	80001a4 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80004d8:	2078      	movs	r0, #120	; 0x78
 80004da:	f000 fcfb 	bl	8000ed4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80004de:	2029      	movs	r0, #41	; 0x29
 80004e0:	f7ff fe60 	bl	80001a4 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80004e4:	2036      	movs	r0, #54	; 0x36
 80004e6:	f7ff fe5d 	bl	80001a4 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80004ea:	2348      	movs	r3, #72	; 0x48
 80004ec:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004ee:	463b      	mov	r3, r7
 80004f0:	2101      	movs	r1, #1
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe70 	bl	80001d8 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80004f8:	f7ff fe34 	bl	8000164 <ILI9341_Unselect>
}
 80004fc:	bf00      	nop
 80004fe:	376c      	adds	r7, #108	; 0x6c
 8000500:	46bd      	mov	sp, r7
 8000502:	bd90      	pop	{r4, r7, pc}
 8000504:	08002124 	.word	0x08002124
 8000508:	0800212c 	.word	0x0800212c
 800050c:	08002130 	.word	0x08002130
 8000510:	81120364 	.word	0x81120364
 8000514:	08002134 	.word	0x08002134
 8000518:	08002138 	.word	0x08002138
 800051c:	08002148 	.word	0x08002148

08000520 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
 800052a:	460b      	mov	r3, r1
 800052c:	80bb      	strh	r3, [r7, #4]
 800052e:	4613      	mov	r3, r2
 8000530:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	2bef      	cmp	r3, #239	; 0xef
 8000536:	d820      	bhi.n	800057a <ILI9341_DrawPixel+0x5a>
 8000538:	88bb      	ldrh	r3, [r7, #4]
 800053a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800053e:	d21c      	bcs.n	800057a <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8000540:	f7ff fe04 	bl	800014c <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	3301      	adds	r3, #1
 8000548:	b29a      	uxth	r2, r3
 800054a:	88bb      	ldrh	r3, [r7, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	b29b      	uxth	r3, r3
 8000550:	88b9      	ldrh	r1, [r7, #4]
 8000552:	88f8      	ldrh	r0, [r7, #6]
 8000554:	f7ff fe6e 	bl	8000234 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000558:	887b      	ldrh	r3, [r7, #2]
 800055a:	0a1b      	lsrs	r3, r3, #8
 800055c:	b29b      	uxth	r3, r3
 800055e:	b2db      	uxtb	r3, r3
 8000560:	733b      	strb	r3, [r7, #12]
 8000562:	887b      	ldrh	r3, [r7, #2]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2102      	movs	r1, #2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe32 	bl	80001d8 <ILI9341_WriteData>

    ILI9341_Unselect();
 8000574:	f7ff fdf6 	bl	8000164 <ILI9341_Unselect>
 8000578:	e000      	b.n	800057c <ILI9341_DrawPixel+0x5c>
        return;
 800057a:	bf00      	nop
}
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000582:	b082      	sub	sp, #8
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
 800058c:	4603      	mov	r3, r0
 800058e:	80fb      	strh	r3, [r7, #6]
 8000590:	460b      	mov	r3, r1
 8000592:	80bb      	strh	r3, [r7, #4]
 8000594:	4613      	mov	r3, r2
 8000596:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000598:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800059c:	b29a      	uxth	r2, r3
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	4413      	add	r3, r2
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	3b01      	subs	r3, #1
 80005a6:	b29c      	uxth	r4, r3
 80005a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	88bb      	ldrh	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	3b01      	subs	r3, #1
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	88b9      	ldrh	r1, [r7, #4]
 80005ba:	88f8      	ldrh	r0, [r7, #6]
 80005bc:	4622      	mov	r2, r4
 80005be:	f7ff fe39 	bl	8000234 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
 80005c6:	e043      	b.n	8000650 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 80005c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	3b20      	subs	r3, #32
 80005ce:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80005d2:	fb01 f303 	mul.w	r3, r1, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	440b      	add	r3, r1
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
 80005e8:	e029      	b.n	800063e <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00e      	beq.n	8000618 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80005fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	b29b      	uxth	r3, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	743b      	strb	r3, [r7, #16]
 8000604:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000606:	b2db      	uxtb	r3, r3
 8000608:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fde1 	bl	80001d8 <ILI9341_WriteData>
 8000616:	e00f      	b.n	8000638 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000618:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	b29b      	uxth	r3, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	733b      	strb	r3, [r7, #12]
 8000624:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000628:	b2db      	uxtb	r3, r3
 800062a:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdd0 	bl	80001d8 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	3301      	adds	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
 800063e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000642:	461a      	mov	r2, r3
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	4293      	cmp	r3, r2
 8000648:	d3cf      	bcc.n	80005ea <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3301      	adds	r3, #1
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000654:	461a      	mov	r2, r3
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	4293      	cmp	r3, r2
 800065a:	d3b5      	bcc.n	80005c8 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3724      	adds	r7, #36	; 0x24
 8000662:	46bd      	mov	sp, r7
 8000664:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000668:	b002      	add	sp, #8
 800066a:	4770      	bx	lr

0800066c <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800066c:	b082      	sub	sp, #8
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af04      	add	r7, sp, #16
 8000674:	603a      	str	r2, [r7, #0]
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	4603      	mov	r3, r0
 800067a:	80fb      	strh	r3, [r7, #6]
 800067c:	460b      	mov	r3, r1
 800067e:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000680:	f7ff fd64 	bl	800014c <ILI9341_Select>

    while(*str) {
 8000684:	e02e      	b.n	80006e4 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	7d3a      	ldrb	r2, [r7, #20]
 800068a:	4413      	add	r3, r2
 800068c:	2bef      	cmp	r3, #239	; 0xef
 800068e:	dd14      	ble.n	80006ba <ILI9341_WriteString+0x4e>
            x = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000694:	7d7b      	ldrb	r3, [r7, #21]
 8000696:	b29a      	uxth	r2, r3
 8000698:	88bb      	ldrh	r3, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	7d7a      	ldrb	r2, [r7, #21]
 80006a2:	4413      	add	r3, r2
 80006a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006a8:	da21      	bge.n	80006ee <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d103      	bne.n	80006ba <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
                continue;
 80006b8:	e014      	b.n	80006e4 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	88b9      	ldrh	r1, [r7, #4]
 80006c0:	88f8      	ldrh	r0, [r7, #6]
 80006c2:	8c3b      	ldrh	r3, [r7, #32]
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	8bbb      	ldrh	r3, [r7, #28]
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	f7ff ff57 	bl	8000582 <ILI9341_WriteChar>
        x += font.width;
 80006d4:	7d3b      	ldrb	r3, [r7, #20]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	4413      	add	r3, r2
 80006dc:	80fb      	strh	r3, [r7, #6]
        str++;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1cc      	bne.n	8000686 <ILI9341_WriteString+0x1a>
 80006ec:	e000      	b.n	80006f0 <ILI9341_WriteString+0x84>
                break;
 80006ee:	bf00      	nop
    }

    ILI9341_Unselect();
 80006f0:	f7ff fd38 	bl	8000164 <ILI9341_Unselect>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006fe:	b002      	add	sp, #8
 8000700:	4770      	bx	lr
	...

08000704 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	4603      	mov	r3, r0
 8000718:	80bb      	strh	r3, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2bef      	cmp	r3, #239	; 0xef
 8000726:	d853      	bhi.n	80007d0 <ILI9341_FillRectangle+0xcc>
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800072e:	d24f      	bcs.n	80007d0 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000730:	88fa      	ldrh	r2, [r7, #6]
 8000732:	887b      	ldrh	r3, [r7, #2]
 8000734:	4413      	add	r3, r2
 8000736:	2bf0      	cmp	r3, #240	; 0xf0
 8000738:	dd03      	ble.n	8000742 <ILI9341_FillRectangle+0x3e>
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000740:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000742:	88ba      	ldrh	r2, [r7, #4]
 8000744:	883b      	ldrh	r3, [r7, #0]
 8000746:	4413      	add	r3, r2
 8000748:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800074c:	dd03      	ble.n	8000756 <ILI9341_FillRectangle+0x52>
 800074e:	88bb      	ldrh	r3, [r7, #4]
 8000750:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000754:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000756:	f7ff fcf9 	bl	800014c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800075a:	88fa      	ldrh	r2, [r7, #6]
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	3b01      	subs	r3, #1
 8000764:	b29c      	uxth	r4, r3
 8000766:	88ba      	ldrh	r2, [r7, #4]
 8000768:	883b      	ldrh	r3, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	3b01      	subs	r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	88b9      	ldrh	r1, [r7, #4]
 8000774:	88f8      	ldrh	r0, [r7, #6]
 8000776:	4622      	mov	r2, r4
 8000778:	f7ff fd5c 	bl	8000234 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800077c:	8c3b      	ldrh	r3, [r7, #32]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	733b      	strb	r3, [r7, #12]
 8000786:	8c3b      	ldrh	r3, [r7, #32]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2102      	movs	r1, #2
 8000790:	4811      	ldr	r0, [pc, #68]	; (80007d8 <ILI9341_FillRectangle+0xd4>)
 8000792:	f000 fe2b 	bl	80013ec <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	80bb      	strh	r3, [r7, #4]
 800079a:	e013      	b.n	80007c4 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	80fb      	strh	r3, [r7, #6]
 80007a0:	e00a      	b.n	80007b8 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80007a2:	f107 010c 	add.w	r1, r7, #12
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2202      	movs	r2, #2
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <ILI9341_FillRectangle+0xd8>)
 80007ae:	f001 fa97 	bl	8001ce0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f1      	bne.n	80007a2 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	80bb      	strh	r3, [r7, #4]
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1e8      	bne.n	800079c <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 80007ca:	f7ff fccb 	bl	8000164 <ILI9341_Unselect>
 80007ce:	e000      	b.n	80007d2 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80007d0:	bf00      	nop
}
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	20000040 	.word	0x20000040

080007e0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007f2:	22f0      	movs	r2, #240	; 0xf0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff ff84 	bl	8000704 <ILI9341_FillRectangle>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <ILI9341_InvertColors>:
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ILI9341_Unselect();
}

void ILI9341_InvertColors(bool invert) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    ILI9341_Select();
 800080e:	f7ff fc9d 	bl	800014c <ILI9341_Select>
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <ILI9341_InvertColors+0x18>
 8000818:	2321      	movs	r3, #33	; 0x21
 800081a:	e000      	b.n	800081e <ILI9341_InvertColors+0x1a>
 800081c:	2320      	movs	r3, #32
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fcc0 	bl	80001a4 <ILI9341_WriteCommand>
    ILI9341_Unselect();
 8000824:	f7ff fc9e 	bl	8000164 <ILI9341_Unselect>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083a:	4802      	ldr	r0, [pc, #8]	; (8000844 <ILI9341_TouchUnselect+0x14>)
 800083c:	f000 fdd6 	bl	80013ec <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40010800 	.word	0x40010800

08000848 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 800084c:	f7ff fc8a 	bl	8000164 <ILI9341_Unselect>
    ILI9341_TouchUnselect();
 8000850:	f7ff ffee 	bl	8000830 <ILI9341_TouchUnselect>
    ILI9341_Init();
 8000854:	f7ff fd36 	bl	80002c4 <ILI9341_Init>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <loop>:

void loop() {
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af04      	add	r7, sp, #16

    // Check border
    ILI9341_FillScreen(ILI9341_BLACK);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ffbc 	bl	80007e0 <ILI9341_FillScreen>

    for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	e013      	b.n	8000896 <loop+0x3a>
        ILI9341_DrawPixel(x, 0, ILI9341_RED);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	b29b      	uxth	r3, r3
 8000872:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe51 	bl	8000520 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x, ILI9341_HEIGHT-1, ILI9341_RED);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	b29b      	uxth	r3, r3
 8000882:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000886:	f240 113f 	movw	r1, #319	; 0x13f
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe48 	bl	8000520 <ILI9341_DrawPixel>
    for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3301      	adds	r3, #1
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2bef      	cmp	r3, #239	; 0xef
 800089a:	dde8      	ble.n	800086e <loop+0x12>
    }

    for(int y = 0; y < ILI9341_HEIGHT; y++) {
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	e012      	b.n	80008c8 <loop+0x6c>
        ILI9341_DrawPixel(0, y, ILI9341_RED);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008aa:	4619      	mov	r1, r3
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fe37 	bl	8000520 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(ILI9341_WIDTH-1, y, ILI9341_RED);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008ba:	4619      	mov	r1, r3
 80008bc:	20ef      	movs	r0, #239	; 0xef
 80008be:	f7ff fe2f 	bl	8000520 <ILI9341_DrawPixel>
    for(int y = 0; y < ILI9341_HEIGHT; y++) {
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008ce:	dbe8      	blt.n	80008a2 <loop+0x46>
    }

    HAL_Delay(1000);
 80008d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d4:	f000 fafe 	bl	8000ed4 <HAL_Delay>

    // Check font
ILI9341_FillScreen(ILI9341_BLACK);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff81 	bl	80007e0 <ILI9341_FillScreen>
ILI9341_WriteString(0, 0,"Font_7x10, HELLO", Font_7x10, ILI9341_RED,ILI9341_BLACK);
 80008de:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <loop+0x264>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	9202      	str	r2, [sp, #8]
 80008e4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008e8:	9201      	str	r2, [sp, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	9200      	str	r2, [sp, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a74      	ldr	r2, [pc, #464]	; (8000ac4 <loop+0x268>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff feb9 	bl	800066c <ILI9341_WriteString>
ILI9341_WriteString(0,3*10,"Font_11x18,HELLO",Font_11x18,ILI9341_GREEN,ILI9341_BLACK);
 80008fa:	4b73      	ldr	r3, [pc, #460]	; (8000ac8 <loop+0x26c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	9202      	str	r2, [sp, #8]
 8000900:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	9200      	str	r2, [sp, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a6f      	ldr	r2, [pc, #444]	; (8000acc <loop+0x270>)
 800090e:	211e      	movs	r1, #30
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff feab 	bl	800066c <ILI9341_WriteString>
ILI9341_WriteString(0,3*20,"Font_16x26,HELLO",Font_16x26,ILI9341_BLUE,ILI9341_BLACK);
 8000916:	4b6e      	ldr	r3, [pc, #440]	; (8000ad0 <loop+0x274>)
 8000918:	2200      	movs	r2, #0
 800091a:	9202      	str	r2, [sp, #8]
 800091c:	221f      	movs	r2, #31
 800091e:	9201      	str	r2, [sp, #4]
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	9200      	str	r2, [sp, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a6b      	ldr	r2, [pc, #428]	; (8000ad4 <loop+0x278>)
 8000928:	213c      	movs	r1, #60	; 0x3c
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fe9e 	bl	800066c <ILI9341_WriteString>

    HAL_Delay(1000);
 8000930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000934:	f000 face 	bl	8000ed4 <HAL_Delay>
    ILI9341_InvertColors(true);
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff ff63 	bl	8000804 <ILI9341_InvertColors>
    HAL_Delay(1000);
 800093e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000942:	f000 fac7 	bl	8000ed4 <HAL_Delay>
    ILI9341_InvertColors(false);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff ff5c 	bl	8000804 <ILI9341_InvertColors>

    HAL_Delay(5000);
 800094c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000950:	f000 fac0 	bl	8000ed4 <HAL_Delay>

    // Check colors
    ILI9341_FillScreen(ILI9341_WHITE);
 8000954:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000958:	f7ff ff42 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "WHITE", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 800095c:	4b5a      	ldr	r3, [pc, #360]	; (8000ac8 <loop+0x26c>)
 800095e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000962:	9202      	str	r2, [sp, #8]
 8000964:	2200      	movs	r2, #0
 8000966:	9201      	str	r2, [sp, #4]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	9200      	str	r2, [sp, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a5a      	ldr	r2, [pc, #360]	; (8000ad8 <loop+0x27c>)
 8000970:	2100      	movs	r1, #0
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fe7a 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 8000978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097c:	f000 faaa 	bl	8000ed4 <HAL_Delay>

    ILI9341_FillScreen(ILI9341_BLUE);
 8000980:	201f      	movs	r0, #31
 8000982:	f7ff ff2d 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "BLUE", Font_11x18, ILI9341_BLACK, ILI9341_BLUE);
 8000986:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <loop+0x26c>)
 8000988:	221f      	movs	r2, #31
 800098a:	9202      	str	r2, [sp, #8]
 800098c:	2200      	movs	r2, #0
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	9200      	str	r2, [sp, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a51      	ldr	r2, [pc, #324]	; (8000adc <loop+0x280>)
 8000998:	2100      	movs	r1, #0
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fe66 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 80009a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a4:	f000 fa96 	bl	8000ed4 <HAL_Delay>

    ILI9341_FillScreen(ILI9341_RED);
 80009a8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009ac:	f7ff ff18 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "RED", Font_11x18, ILI9341_BLACK, ILI9341_RED);
 80009b0:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <loop+0x26c>)
 80009b2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	2200      	movs	r2, #0
 80009ba:	9201      	str	r2, [sp, #4]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a47      	ldr	r2, [pc, #284]	; (8000ae0 <loop+0x284>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fe50 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 80009cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d0:	f000 fa80 	bl	8000ed4 <HAL_Delay>

    ILI9341_FillScreen(ILI9341_GREEN);
 80009d4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80009d8:	f7ff ff02 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "GREEN", Font_11x18, ILI9341_BLACK, ILI9341_GREEN);
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <loop+0x26c>)
 80009de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009e2:	9202      	str	r2, [sp, #8]
 80009e4:	2200      	movs	r2, #0
 80009e6:	9201      	str	r2, [sp, #4]
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	9200      	str	r2, [sp, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <loop+0x288>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fe3a 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 80009f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fc:	f000 fa6a 	bl	8000ed4 <HAL_Delay>

    ILI9341_FillScreen(ILI9341_CYAN);
 8000a00:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000a04:	f7ff feec 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "CYAN", Font_11x18, ILI9341_BLACK, ILI9341_CYAN);
 8000a08:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <loop+0x26c>)
 8000a0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a0e:	9202      	str	r2, [sp, #8]
 8000a10:	2200      	movs	r2, #0
 8000a12:	9201      	str	r2, [sp, #4]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	9200      	str	r2, [sp, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a33      	ldr	r2, [pc, #204]	; (8000ae8 <loop+0x28c>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fe24 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 8000a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a28:	f000 fa54 	bl	8000ed4 <HAL_Delay>

    ILI9341_FillScreen(ILI9341_MAGENTA);
 8000a2c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000a30:	f7ff fed6 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "MAGENTA", Font_11x18, ILI9341_BLACK, ILI9341_MAGENTA);
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <loop+0x26c>)
 8000a36:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000a3a:	9202      	str	r2, [sp, #8]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	9200      	str	r2, [sp, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a29      	ldr	r2, [pc, #164]	; (8000aec <loop+0x290>)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff fe0e 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 8000a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a54:	f000 fa3e 	bl	8000ed4 <HAL_Delay>

    ILI9341_FillScreen(ILI9341_YELLOW);
 8000a58:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000a5c:	f7ff fec0 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "YELLOW", Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <loop+0x26c>)
 8000a62:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a66:	9202      	str	r2, [sp, #8]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	9200      	str	r2, [sp, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <loop+0x294>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fdf8 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 8000a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a80:	f000 fa28 	bl	8000ed4 <HAL_Delay>

    ILI9341_FillScreen(ILI9341_BLACK);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff feab 	bl	80007e0 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "BLACK", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <loop+0x26c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	9202      	str	r2, [sp, #8]
 8000a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a94:	9201      	str	r2, [sp, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <loop+0x298>)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fde3 	bl	800066c <ILI9341_WriteString>
    HAL_Delay(500);
 8000aa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aaa:	f000 fa13 	bl	8000ed4 <HAL_Delay>

//ILI9341_DrawImage((ILI9341_WIDTH - 240)/2,(ILI9341_HEIGHT-240)/2,240,240,
//(const uint16_t*)test_img_240x240);
HAL_Delay(3000);
 8000aae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ab2:	f000 fa0f 	bl	8000ed4 <HAL_Delay>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	08002158 	.word	0x08002158
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	0800216c 	.word	0x0800216c
 8000ad0:	20000010 	.word	0x20000010
 8000ad4:	08002180 	.word	0x08002180
 8000ad8:	08002194 	.word	0x08002194
 8000adc:	0800219c 	.word	0x0800219c
 8000ae0:	080021a4 	.word	0x080021a4
 8000ae4:	080021a8 	.word	0x080021a8
 8000ae8:	080021b0 	.word	0x080021b0
 8000aec:	080021b8 	.word	0x080021b8
 8000af0:	080021c0 	.word	0x080021c0
 8000af4:	080021c8 	.word	0x080021c8

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 f988 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f809 	bl	8000b16 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 f878 	bl	8000bf8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b08:	f000 f840 	bl	8000b8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
init();
 8000b0c:	f7ff fe9c 	bl	8000848 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000b10:	f7ff fea4 	bl	800085c <loop>
 8000b14:	e7fc      	b.n	8000b10 <main+0x18>

08000b16 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b090      	sub	sp, #64	; 0x40
 8000b1a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1c:	f107 0318 	add.w	r3, r7, #24
 8000b20:	2228      	movs	r2, #40	; 0x28
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fae9 	bl	80020fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b40:	2310      	movs	r3, #16
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0318 	add.w	r3, r7, #24
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fc65 	bl	800141c <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b58:	f000 f8a0 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fed3 	bl	8001920 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b80:	f000 f88c 	bl	8000c9c <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3740      	adds	r7, #64	; 0x40
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bc0:	2228      	movs	r2, #40	; 0x28
 8000bc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bde:	f000 fffb 	bl	8001bd8 <HAL_SPI_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be8:	f000 f858 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000040 	.word	0x20000040
 8000bf4:	40013000 	.word	0x40013000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_GPIO_Init+0x98>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <MX_GPIO_Init+0x98>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_GPIO_Init+0x98>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_GPIO_Init+0x98>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <MX_GPIO_Init+0x98>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_GPIO_Init+0x98>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <MX_GPIO_Init+0x9c>)
 8000c42:	f000 fbd3 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2103      	movs	r1, #3
 8000c4a:	4813      	ldr	r0, [pc, #76]	; (8000c98 <MX_GPIO_Init+0xa0>)
 8000c4c:	f000 fbce 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c50:	2310      	movs	r3, #16
 8000c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <MX_GPIO_Init+0x9c>)
 8000c68:	f000 fa3c 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_GPIO_Init+0xa0>)
 8000c84:	f000 fa2e 	bl	80010e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	40010c00 	.word	0x40010c00

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_MspInit+0x40>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <HAL_SPI_MspInit+0x70>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d123      	bne.n	8000d54 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_SPI_MspInit+0x74>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <HAL_SPI_MspInit+0x74>)
 8000d12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_SPI_MspInit+0x74>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_SPI_MspInit+0x74>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_SPI_MspInit+0x74>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_SPI_MspInit+0x74>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d3c:	23a0      	movs	r3, #160	; 0xa0
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_SPI_MspInit+0x78>)
 8000d50:	f000 f9c8 	bl	80010e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f875 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
	...

08000dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc4:	f7ff fff7 	bl	8000db6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000de0:	4c09      	ldr	r4, [pc, #36]	; (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dee:	f001 f961 	bl	80020b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff fe81 	bl	8000af8 <main>
  bx lr
 8000df6:	4770      	bx	lr
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e00:	08004a10 	.word	0x08004a10
  ldr r2, =_sbss
 8000e04:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000e08:	2000009c 	.word	0x2000009c

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x28>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f92b 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff ff3c 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f935 	bl	80010ca <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f90b 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000018 	.word	0x20000018
 8000e94:	20000020 	.word	0x20000020
 8000e98:	2000001c 	.word	0x2000001c

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x20>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000020 	.word	0x20000020
 8000ebc:	20000098 	.word	0x20000098

08000ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	20000098 	.word	0x20000098

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff fff0 	bl	8000ec0 <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_Delay+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efa:	bf00      	nop
 8000efc:	f7ff ffe0 	bl	8000ec0 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000020 	.word	0x20000020

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff90 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff49 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff5e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff90 	bl	8000fd4 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5f 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffb0 	bl	8001038 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b08b      	sub	sp, #44	; 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	e169      	b.n	80013cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f8:	2201      	movs	r2, #1
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8158 	bne.w	80013c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a9a      	ldr	r2, [pc, #616]	; (8001384 <HAL_GPIO_Init+0x2a0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d05e      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001120:	4a98      	ldr	r2, [pc, #608]	; (8001384 <HAL_GPIO_Init+0x2a0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d875      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001126:	4a98      	ldr	r2, [pc, #608]	; (8001388 <HAL_GPIO_Init+0x2a4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d058      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 800112c:	4a96      	ldr	r2, [pc, #600]	; (8001388 <HAL_GPIO_Init+0x2a4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d86f      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001132:	4a96      	ldr	r2, [pc, #600]	; (800138c <HAL_GPIO_Init+0x2a8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d052      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001138:	4a94      	ldr	r2, [pc, #592]	; (800138c <HAL_GPIO_Init+0x2a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d869      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800113e:	4a94      	ldr	r2, [pc, #592]	; (8001390 <HAL_GPIO_Init+0x2ac>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d04c      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001144:	4a92      	ldr	r2, [pc, #584]	; (8001390 <HAL_GPIO_Init+0x2ac>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d863      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800114a:	4a92      	ldr	r2, [pc, #584]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d046      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001150:	4a90      	ldr	r2, [pc, #576]	; (8001394 <HAL_GPIO_Init+0x2b0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d85d      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d82a      	bhi.n	80011b0 <HAL_GPIO_Init+0xcc>
 800115a:	2b12      	cmp	r3, #18
 800115c:	d859      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800115e:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <HAL_GPIO_Init+0x80>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	080011df 	.word	0x080011df
 8001168:	080011b9 	.word	0x080011b9
 800116c:	080011cb 	.word	0x080011cb
 8001170:	0800120d 	.word	0x0800120d
 8001174:	08001213 	.word	0x08001213
 8001178:	08001213 	.word	0x08001213
 800117c:	08001213 	.word	0x08001213
 8001180:	08001213 	.word	0x08001213
 8001184:	08001213 	.word	0x08001213
 8001188:	08001213 	.word	0x08001213
 800118c:	08001213 	.word	0x08001213
 8001190:	08001213 	.word	0x08001213
 8001194:	08001213 	.word	0x08001213
 8001198:	08001213 	.word	0x08001213
 800119c:	08001213 	.word	0x08001213
 80011a0:	08001213 	.word	0x08001213
 80011a4:	08001213 	.word	0x08001213
 80011a8:	080011c1 	.word	0x080011c1
 80011ac:	080011d5 	.word	0x080011d5
 80011b0:	4a79      	ldr	r2, [pc, #484]	; (8001398 <HAL_GPIO_Init+0x2b4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b6:	e02c      	b.n	8001212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e029      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e024      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	3308      	adds	r3, #8
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e01f      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	330c      	adds	r3, #12
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e01a      	b.n	8001214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e6:	2304      	movs	r3, #4
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e013      	b.n	8001214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	611a      	str	r2, [r3, #16]
          break;
 80011fe:	e009      	b.n	8001214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001200:	2308      	movs	r3, #8
 8001202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	615a      	str	r2, [r3, #20]
          break;
 800120a:	e003      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x130>
          break;
 8001212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2bff      	cmp	r3, #255	; 0xff
 8001218:	d801      	bhi.n	800121e <HAL_GPIO_Init+0x13a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	e001      	b.n	8001222 <HAL_GPIO_Init+0x13e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3304      	adds	r3, #4
 8001222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	; 0xff
 8001228:	d802      	bhi.n	8001230 <HAL_GPIO_Init+0x14c>
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x152>
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	3b08      	subs	r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	210f      	movs	r1, #15
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	6a39      	ldr	r1, [r7, #32]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	431a      	orrs	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80b1 	beq.w	80013c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001264:	4b4d      	ldr	r3, [pc, #308]	; (800139c <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <HAL_GPIO_Init+0x2b8>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <HAL_GPIO_Init+0x2b8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800127c:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <HAL_GPIO_Init+0x2bc>)
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <HAL_GPIO_Init+0x2c0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x1ec>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a3f      	ldr	r2, [pc, #252]	; (80013a8 <HAL_GPIO_Init+0x2c4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1e8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a3e      	ldr	r2, [pc, #248]	; (80013ac <HAL_GPIO_Init+0x2c8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1e4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <HAL_GPIO_Init+0x2cc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1e0>
 80012c0:	2303      	movs	r3, #3
 80012c2:	e006      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c4:	2304      	movs	r3, #4
 80012c6:	e004      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012d0:	2300      	movs	r3, #0
 80012d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012e2:	492f      	ldr	r1, [pc, #188]	; (80013a0 <HAL_GPIO_Init+0x2bc>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	492c      	ldr	r1, [pc, #176]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4928      	ldr	r1, [pc, #160]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4922      	ldr	r1, [pc, #136]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	491e      	ldr	r1, [pc, #120]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4918      	ldr	r1, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4914      	ldr	r1, [pc, #80]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d021      	beq.n	80013b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	490e      	ldr	r1, [pc, #56]	; (80013b4 <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e021      	b.n	80013c6 <HAL_GPIO_Init+0x2e2>
 8001382:	bf00      	nop
 8001384:	10320000 	.word	0x10320000
 8001388:	10310000 	.word	0x10310000
 800138c:	10220000 	.word	0x10220000
 8001390:	10210000 	.word	0x10210000
 8001394:	10120000 	.word	0x10120000
 8001398:	10110000 	.word	0x10110000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_GPIO_Init+0x304>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	43db      	mvns	r3, r3
 80013c0:	4909      	ldr	r1, [pc, #36]	; (80013e8 <HAL_GPIO_Init+0x304>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	3301      	adds	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f ae8e 	bne.w	80010f8 <HAL_GPIO_Init+0x14>
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	372c      	adds	r7, #44	; 0x2c
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e272      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8087 	beq.w	800154a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b04      	cmp	r3, #4
 8001446:	d00c      	beq.n	8001462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001448:	4b8f      	ldr	r3, [pc, #572]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d112      	bne.n	800147a <HAL_RCC_OscConfig+0x5e>
 8001454:	4b8c      	ldr	r3, [pc, #560]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d10b      	bne.n	800147a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d06c      	beq.n	8001548 <HAL_RCC_OscConfig+0x12c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d168      	bne.n	8001548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e24c      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x76>
 8001484:	4b80      	ldr	r3, [pc, #512]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a7f      	ldr	r2, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e02e      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b78      	ldr	r3, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0xbc>
 80014be:	4b72      	ldr	r3, [pc, #456]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a71      	ldr	r2, [pc, #452]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6e      	ldr	r2, [pc, #440]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014d8:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a67      	ldr	r2, [pc, #412]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fce2 	bl	8000ec0 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fcde 	bl	8000ec0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e200      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xe4>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fcce 	bl	8000ec0 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fcca 	bl	8000ec0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1ec      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x10c>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001562:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x18c>
 800156e:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x176>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e1c0      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4939      	ldr	r1, [pc, #228]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x270>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fc83 	bl	8000ec0 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fc7f 	bl	8000ec0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1a1      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4927      	ldr	r1, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x270>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc62 	bl	8000ec0 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fc5e 	bl	8000ec0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e180      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d03a      	beq.n	80016a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d019      	beq.n	8001666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_RCC_OscConfig+0x274>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff fc42 	bl	8000ec0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fc3e 	bl	8000ec0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e160      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f000 fa9c 	bl	8001b9c <RCC_Delay>
 8001664:	e01c      	b.n	80016a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_RCC_OscConfig+0x274>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff fc28 	bl	8000ec0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001672:	e00f      	b.n	8001694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fc24 	bl	8000ec0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d908      	bls.n	8001694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e146      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	42420000 	.word	0x42420000
 8001690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e9      	bne.n	8001674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a6 	beq.w	80017fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b2:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10d      	bne.n	80016da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b85      	ldr	r3, [pc, #532]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	2301      	movs	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	4b82      	ldr	r3, [pc, #520]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d118      	bne.n	8001718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7e      	ldr	r2, [pc, #504]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fbe5 	bl	8000ec0 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff fbe1 	bl	8000ec0 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b64      	cmp	r3, #100	; 0x64
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e103      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	4b75      	ldr	r3, [pc, #468]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x312>
 8001720:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e02d      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001736:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a69      	ldr	r2, [pc, #420]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	e01c      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x356>
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a60      	ldr	r2, [pc, #384]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a5d      	ldr	r2, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 8001772:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d015      	beq.n	80017be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff fb95 	bl	8000ec0 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff fb91 	bl	8000ec0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0b1      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ee      	beq.n	800179a <HAL_RCC_OscConfig+0x37e>
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff fb7f 	bl	8000ec0 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff fb7b 	bl	8000ec0 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e09b      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d105      	bne.n	80017fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8087 	beq.w	8001912 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d061      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d146      	bne.n	80018a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fb4f 	bl	8000ec0 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff fb4b 	bl	8000ec0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e06d      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d108      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4921      	ldr	r1, [pc, #132]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a19      	ldr	r1, [r3, #32]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	430b      	orrs	r3, r1
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x4cc>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fb1f 	bl	8000ec0 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fb1b 	bl	8000ec0 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x46a>
 80018a4:	e035      	b.n	8001912 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x4cc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb08 	bl	8000ec0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fb04 	bl	8000ec0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e026      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x498>
 80018d2:	e01e      	b.n	8001912 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e019      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_OscConfig+0x500>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0d0      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d910      	bls.n	8001964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	4965      	ldr	r1, [pc, #404]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0b8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001986:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800199e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	494d      	ldr	r1, [pc, #308]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d040      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d115      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e073      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e06b      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4936      	ldr	r1, [pc, #216]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff fa56 	bl	8000ec0 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff fa52 	bl	8000ec0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e053      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d210      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4922      	ldr	r1, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e032      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aae:	f000 f821 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	5ccb      	ldrb	r3, [r1, r3]
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1cc>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1d0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f9b4 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	080049e4 	.word	0x080049e4
 8001aec:	20000018 	.word	0x20000018
 8001af0:	2000001c 	.word	0x2000001c

08001af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x30>
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x36>
 8001b22:	e027      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b26:	613b      	str	r3, [r7, #16]
      break;
 8001b28:	e027      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d010      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	0c5b      	lsrs	r3, r3, #17
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b56:	fb03 f202 	mul.w	r2, r3, r2
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e004      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	613b      	str	r3, [r7, #16]
      break;
 8001b72:	e002      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b76:	613b      	str	r3, [r7, #16]
      break;
 8001b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7a:	693b      	ldr	r3, [r7, #16]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	007a1200 	.word	0x007a1200
 8001b90:	080049f4 	.word	0x080049f4
 8001b94:	08004a04 	.word	0x08004a04
 8001b98:	003d0900 	.word	0x003d0900

08001b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <RCC_Delay+0x34>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <RCC_Delay+0x38>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0a5b      	lsrs	r3, r3, #9
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb8:	bf00      	nop
  }
  while (Delay --);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	60fa      	str	r2, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f9      	bne.n	8001bb8 <RCC_Delay+0x1c>
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000018 	.word	0x20000018
 8001bd4:	10624dd3 	.word	0x10624dd3

08001bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e076      	b.n	8001cd8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bfa:	d009      	beq.n	8001c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
 8001c02:	e005      	b.n	8001c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff f85e 	bl	8000cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c94:	ea42 0103 	orr.w	r1, r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	0c1a      	lsrs	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f002 0204 	and.w	r2, r2, #4
 8001cb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_SPI_Transmit+0x22>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e12d      	b.n	8001f5e <HAL_SPI_Transmit+0x27e>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d0a:	f7ff f8d9 	bl	8000ec0 <HAL_GetTick>
 8001d0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d002      	beq.n	8001d26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
 8001d22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d24:	e116      	b.n	8001f54 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_SPI_Transmit+0x52>
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d36:	e10d      	b.n	8001f54 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d7e:	d10f      	bne.n	8001da0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001daa:	2b40      	cmp	r3, #64	; 0x40
 8001dac:	d007      	beq.n	8001dbe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dc6:	d14f      	bne.n	8001e68 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_SPI_Transmit+0xf6>
 8001dd0:	8afb      	ldrh	r3, [r7, #22]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d142      	bne.n	8001e5c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	881a      	ldrh	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	1c9a      	adds	r2, r3, #2
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dfa:	e02f      	b.n	8001e5c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d112      	bne.n	8001e30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	1c9a      	adds	r2, r3, #2
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e2e:	e015      	b.n	8001e5c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e30:	f7ff f846 	bl	8000ec0 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d803      	bhi.n	8001e48 <HAL_SPI_Transmit+0x168>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d102      	bne.n	8001e4e <HAL_SPI_Transmit+0x16e>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e5a:	e07b      	b.n	8001f54 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ca      	bne.n	8001dfc <HAL_SPI_Transmit+0x11c>
 8001e66:	e050      	b.n	8001f0a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_SPI_Transmit+0x196>
 8001e70:	8afb      	ldrh	r3, [r7, #22]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d144      	bne.n	8001f00 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e9c:	e030      	b.n	8001f00 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d113      	bne.n	8001ed4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	7812      	ldrb	r2, [r2, #0]
 8001eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ed2:	e015      	b.n	8001f00 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed4:	f7fe fff4 	bl	8000ec0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d803      	bhi.n	8001eec <HAL_SPI_Transmit+0x20c>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d102      	bne.n	8001ef2 <HAL_SPI_Transmit+0x212>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001efe:	e029      	b.n	8001f54 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1c9      	bne.n	8001e9e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f8b2 	bl	8002078 <SPI_EndRxTxTransaction>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	77fb      	strb	r3, [r7, #31]
 8001f4a:	e003      	b.n	8001f54 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f78:	f7fe ffa2 	bl	8000ec0 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f88:	f7fe ff9a 	bl	8000ec0 <HAL_GetTick>
 8001f8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	0d1b      	lsrs	r3, r3, #20
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f9e:	e054      	b.n	800204a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d050      	beq.n	800204a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fa8:	f7fe ff8a 	bl	8000ec0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d902      	bls.n	8001fbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d13d      	bne.n	800203a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd6:	d111      	bne.n	8001ffc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe0:	d004      	beq.n	8001fec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fea:	d107      	bne.n	8001ffc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ffa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002004:	d10f      	bne.n	8002026 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e017      	b.n	800206a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3b01      	subs	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	429a      	cmp	r2, r3
 8002066:	d19b      	bne.n	8001fa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000018 	.word	0x20000018

08002078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2200      	movs	r2, #0
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff ff6a 	bl	8001f68 <SPI_WaitFlagStateUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f043 0220 	orr.w	r2, r3, #32
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e000      	b.n	80020ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <__libc_init_array>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	2600      	movs	r6, #0
 80020b8:	4d0c      	ldr	r5, [pc, #48]	; (80020ec <__libc_init_array+0x38>)
 80020ba:	4c0d      	ldr	r4, [pc, #52]	; (80020f0 <__libc_init_array+0x3c>)
 80020bc:	1b64      	subs	r4, r4, r5
 80020be:	10a4      	asrs	r4, r4, #2
 80020c0:	42a6      	cmp	r6, r4
 80020c2:	d109      	bne.n	80020d8 <__libc_init_array+0x24>
 80020c4:	f000 f822 	bl	800210c <_init>
 80020c8:	2600      	movs	r6, #0
 80020ca:	4d0a      	ldr	r5, [pc, #40]	; (80020f4 <__libc_init_array+0x40>)
 80020cc:	4c0a      	ldr	r4, [pc, #40]	; (80020f8 <__libc_init_array+0x44>)
 80020ce:	1b64      	subs	r4, r4, r5
 80020d0:	10a4      	asrs	r4, r4, #2
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	d105      	bne.n	80020e2 <__libc_init_array+0x2e>
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
 80020d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020dc:	4798      	blx	r3
 80020de:	3601      	adds	r6, #1
 80020e0:	e7ee      	b.n	80020c0 <__libc_init_array+0xc>
 80020e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e6:	4798      	blx	r3
 80020e8:	3601      	adds	r6, #1
 80020ea:	e7f2      	b.n	80020d2 <__libc_init_array+0x1e>
 80020ec:	08004a08 	.word	0x08004a08
 80020f0:	08004a08 	.word	0x08004a08
 80020f4:	08004a08 	.word	0x08004a08
 80020f8:	08004a0c 	.word	0x08004a0c

080020fc <memset>:
 80020fc:	4603      	mov	r3, r0
 80020fe:	4402      	add	r2, r0
 8002100:	4293      	cmp	r3, r2
 8002102:	d100      	bne.n	8002106 <memset+0xa>
 8002104:	4770      	bx	lr
 8002106:	f803 1b01 	strb.w	r1, [r3], #1
 800210a:	e7f9      	b.n	8002100 <memset+0x4>

0800210c <_init>:
 800210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210e:	bf00      	nop
 8002110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002112:	bc08      	pop	{r3}
 8002114:	469e      	mov	lr, r3
 8002116:	4770      	bx	lr

08002118 <_fini>:
 8002118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211a:	bf00      	nop
 800211c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211e:	bc08      	pop	{r3}
 8002120:	469e      	mov	lr, r3
 8002122:	4770      	bx	lr
