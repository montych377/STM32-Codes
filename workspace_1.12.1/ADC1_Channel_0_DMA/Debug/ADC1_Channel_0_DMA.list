
ADC1_Channel_0_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f48  08003f48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f50  08003f50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08003fc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003fc8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a758  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2e  00000000  00000000  0002a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0002c328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002279d  00000000  00000000  0002d310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4c7  00000000  00000000  0004faad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5297  00000000  00000000  0005af74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013020b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f4  00000000  00000000  0013025c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003ec0 	.word	0x08003ec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003ec0 	.word	0x08003ec0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

	flag = 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000178 	.word	0x20000178

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fb4a 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f83c 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f944 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 80005e4:	f000 f922 	bl	800082c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f8f6 	bl	80007d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ec:	f000 f8a2 	bl	8000734 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_buff, MAX_BUFFER_SIZE);
 80005f0:	2201      	movs	r2, #1
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <main+0x68>)
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <main+0x6c>)
 80005f6:	f000 fc15 	bl	8000e24 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag) {
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <main+0x70>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d016      	beq.n	8000630 <main+0x5c>

		  pot1 = adc_buff[0];
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <main+0x68>)
 8000604:	881a      	ldrh	r2, [r3, #0]
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <main+0x74>)
 8000608:	801a      	strh	r2, [r3, #0]

		  sprintf(msg,"ADC1 Cahnnel 0 : %04d \r\n",pot1);
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <main+0x74>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	490e      	ldr	r1, [pc, #56]	; (800064c <main+0x78>)
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0x7c>)
 8000614:	f002 ffe6 	bl	80035e4 <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t *) msg, 25, 100);
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	2219      	movs	r2, #25
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <main+0x7c>)
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <main+0x80>)
 8000620:	f002 fc39 	bl	8002e96 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 fb95 	bl	8000d54 <HAL_Delay>
		  flag = 0;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <main+0x70>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]

	  }

	  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_buff, MAX_BUFFER_SIZE);
 8000630:	2201      	movs	r2, #1
 8000632:	4902      	ldr	r1, [pc, #8]	; (800063c <main+0x68>)
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <main+0x6c>)
 8000636:	f000 fbf5 	bl	8000e24 <HAL_ADC_Start_DMA>
	  if(flag) {
 800063a:	e7de      	b.n	80005fa <main+0x26>
 800063c:	2000017c 	.word	0x2000017c
 8000640:	2000008c 	.word	0x2000008c
 8000644:	20000178 	.word	0x20000178
 8000648:	2000017a 	.word	0x2000017a
 800064c:	08003ed8 	.word	0x08003ed8
 8000650:	20000180 	.word	0x20000180
 8000654:	20000134 	.word	0x20000134

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 ffb4 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a29      	ldr	r2, [pc, #164]	; (800072c <SystemClock_Config+0xd4>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xd4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <SystemClock_Config+0xd8>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <SystemClock_Config+0xd8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f8ea 	bl	80028c0 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 f929 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fd8a 	bl	800222c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071e:	f000 f913 	bl	8000948 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f000 fb01 	bl	8000d9c <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 f8d2 	bl	8000948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007ac:	2307      	movs	r3, #7
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f000 fc59 	bl	800106c <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 f8c2 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f002 faf4 	bl	8002dfc <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f895 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000134 	.word	0x20000134
 8000828:	40004400 	.word	0x40004400

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_DMA_Init+0x3c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <MX_DMA_Init+0x3c>)
 800083c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_DMA_Init+0x3c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2038      	movs	r0, #56	; 0x38
 8000854:	f000 ff95 	bl	8001782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000858:	2038      	movs	r0, #56	; 0x38
 800085a:	f000 ffae 	bl	80017ba <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2c      	ldr	r2, [pc, #176]	; (800093c <MX_GPIO_Init+0xd0>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a25      	ldr	r2, [pc, #148]	; (800093c <MX_GPIO_Init+0xd0>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <MX_GPIO_Init+0xd0>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_GPIO_Init+0xd0>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2120      	movs	r1, #32
 80008f6:	4812      	ldr	r0, [pc, #72]	; (8000940 <MX_GPIO_Init+0xd4>)
 80008f8:	f001 fc7e 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000902:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_GPIO_Init+0xd8>)
 8000914:	f001 fadc 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000918:	2320      	movs	r3, #32
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0xd4>)
 8000930:	f001 face 	bl	8001ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020800 	.word	0x40020800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000992:	2007      	movs	r0, #7
 8000994:	f000 feea 	bl	800176c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <HAL_ADC_MspInit+0xdc>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d157      	bne.n	8000a76 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <HAL_ADC_MspInit+0xe0>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a2d      	ldr	r2, [pc, #180]	; (8000a84 <HAL_ADC_MspInit+0xe0>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <HAL_ADC_MspInit+0xe0>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <HAL_ADC_MspInit+0xe0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <HAL_ADC_MspInit+0xe0>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <HAL_ADC_MspInit+0xe0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481d      	ldr	r0, [pc, #116]	; (8000a88 <HAL_ADC_MspInit+0xe4>)
 8000a12:	f001 fa5d 	bl	8001ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_ADC_MspInit+0xec>)
 8000a1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a5c:	f000 fec8 	bl	80017f0 <HAL_DMA_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000a66:	f7ff ff6f 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a6e:	639a      	str	r2, [r3, #56]	; 0x38
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_ADC_MspInit+0xe8>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40012000 	.word	0x40012000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	200000d4 	.word	0x200000d4
 8000a90:	40026410 	.word	0x40026410

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_UART_MspInit+0x8c>)
 8000b0a:	f001 f9e1 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f8d0 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA2_Stream0_IRQHandler+0x10>)
 8000b7e:	f000 ff3d 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000d4 	.word	0x200000d4

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 fce0 	bl	8003580 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20020000 	.word	0x20020000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	200001b4 	.word	0x200001b4
 8000bf4:	200001d0 	.word	0x200001d0

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ffd7 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 fc9f 	bl	800358c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fcc1 	bl	80005d4 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c60:	08003f58 	.word	0x08003f58
  ldr r2, =_sbss
 8000c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c68:	200001cc 	.word	0x200001cc

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fd67 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe56 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fd7f 	bl	80017d6 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 fd47 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	200001b8 	.word	0x200001b8

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200001b8 	.word	0x200001b8

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e033      	b.n	8000e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d109      	bne.n	8000dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fdf2 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d118      	bne.n	8000e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000de2:	f023 0302 	bic.w	r3, r3, #2
 8000de6:	f043 0202 	orr.w	r2, r3, #2
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fa6e 	bl	80012d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0a:	e001      	b.n	8000e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_ADC_Start_DMA+0x1e>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e0e9      	b.n	8001016 <HAL_ADC_Start_DMA+0x1f2>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d018      	beq.n	8000e8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e68:	4b6d      	ldr	r3, [pc, #436]	; (8001020 <HAL_ADC_Start_DMA+0x1fc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <HAL_ADC_Start_DMA+0x200>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	0c9a      	lsrs	r2, r3, #18
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e7c:	e002      	b.n	8000e84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f9      	bne.n	8000e7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e98:	d107      	bne.n	8000eaa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	f040 80a1 	bne.w	8000ffc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d007      	beq.n	8000eec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ef8:	d106      	bne.n	8000f08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f023 0206 	bic.w	r2, r3, #6
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
 8000f06:	e002      	b.n	8000f0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f16:	4b44      	ldr	r3, [pc, #272]	; (8001028 <HAL_ADC_Start_DMA+0x204>)
 8000f18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1e:	4a43      	ldr	r2, [pc, #268]	; (800102c <HAL_ADC_Start_DMA+0x208>)
 8000f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f26:	4a42      	ldr	r2, [pc, #264]	; (8001030 <HAL_ADC_Start_DMA+0x20c>)
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	4a41      	ldr	r2, [pc, #260]	; (8001034 <HAL_ADC_Start_DMA+0x210>)
 8000f30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	334c      	adds	r3, #76	; 0x4c
 8000f66:	4619      	mov	r1, r3
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f000 fcee 	bl	800194c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d12a      	bne.n	8000fd2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <HAL_ADC_Start_DMA+0x214>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d015      	beq.n	8000fb2 <HAL_ADC_Start_DMA+0x18e>
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a2c      	ldr	r2, [pc, #176]	; (800103c <HAL_ADC_Start_DMA+0x218>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d105      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x178>
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <HAL_ADC_Start_DMA+0x204>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00a      	beq.n	8000fb2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <HAL_ADC_Start_DMA+0x21c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d136      	bne.n	8001014 <HAL_ADC_Start_DMA+0x1f0>
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_ADC_Start_DMA+0x204>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d130      	bne.n	8001014 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d129      	bne.n	8001014 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	e020      	b.n	8001014 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <HAL_ADC_Start_DMA+0x214>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d11b      	bne.n	8001014 <HAL_ADC_Start_DMA+0x1f0>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d114      	bne.n	8001014 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	e00b      	b.n	8001014 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f043 0210 	orr.w	r2, r3, #16
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	431bde83 	.word	0x431bde83
 8001028:	40012300 	.word	0x40012300
 800102c:	080014c9 	.word	0x080014c9
 8001030:	08001583 	.word	0x08001583
 8001034:	0800159f 	.word	0x0800159f
 8001038:	40012000 	.word	0x40012000
 800103c:	40012100 	.word	0x40012100
 8001040:	40012200 	.word	0x40012200

08001044 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x1c>
 8001084:	2302      	movs	r3, #2
 8001086:	e113      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x244>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d925      	bls.n	80010e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68d9      	ldr	r1, [r3, #12]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	3b1e      	subs	r3, #30
 80010ae:	2207      	movs	r2, #7
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68d9      	ldr	r1, [r3, #12]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4403      	add	r3, r0
 80010d6:	3b1e      	subs	r3, #30
 80010d8:	409a      	lsls	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	e022      	b.n	800112a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6919      	ldr	r1, [r3, #16]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	2207      	movs	r2, #7
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	400a      	ands	r2, r1
 8001106:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6919      	ldr	r1, [r3, #16]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	4603      	mov	r3, r0
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4403      	add	r3, r0
 8001120:	409a      	lsls	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b06      	cmp	r3, #6
 8001130:	d824      	bhi.n	800117c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	3b05      	subs	r3, #5
 8001144:	221f      	movs	r2, #31
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	400a      	ands	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b05      	subs	r3, #5
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
 800117a:	e04c      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b0c      	cmp	r3, #12
 8001182:	d824      	bhi.n	80011ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b23      	subs	r3, #35	; 0x23
 8001196:	221f      	movs	r2, #31
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b23      	subs	r3, #35	; 0x23
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
 80011cc:	e023      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	3b41      	subs	r3, #65	; 0x41
 80011e0:	221f      	movs	r2, #31
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b41      	subs	r3, #65	; 0x41
 800120a:	fa00 f203 	lsl.w	r2, r0, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_ADC_ConfigChannel+0x250>)
 8001218:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <HAL_ADC_ConfigChannel+0x254>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10f      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d8>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d10b      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_ADC_ConfigChannel+0x254>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x23a>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_ADC_ConfigChannel+0x258>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d003      	beq.n	8001260 <HAL_ADC_ConfigChannel+0x1f4>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b11      	cmp	r3, #17
 800125e:	d122      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_ADC_ConfigChannel+0x258>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d111      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <HAL_ADC_ConfigChannel+0x260>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0c9a      	lsrs	r2, r3, #18
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001298:	e002      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3b01      	subs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40012300 	.word	0x40012300
 80012c0:	40012000 	.word	0x40012000
 80012c4:	10000012 	.word	0x10000012
 80012c8:	20000000 	.word	0x20000000
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d8:	4b79      	ldr	r3, [pc, #484]	; (80014c0 <ADC_Init+0x1f0>)
 80012da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800134a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6899      	ldr	r1, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <ADC_Init+0x1f4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d022      	beq.n	80013ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001376:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6899      	ldr	r1, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6899      	ldr	r1, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	e00f      	b.n	80013ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0202 	bic.w	r2, r2, #2
 80013dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6899      	ldr	r1, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e1b      	ldrb	r3, [r3, #24]
 80013e8:	005a      	lsls	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01b      	beq.n	8001434 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800140a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800141a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6859      	ldr	r1, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	3b01      	subs	r3, #1
 8001428:	035a      	lsls	r2, r3, #13
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	e007      	b.n	8001444 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001442:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	3b01      	subs	r3, #1
 8001460:	051a      	lsls	r2, r3, #20
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001486:	025a      	lsls	r2, r3, #9
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800149e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6899      	ldr	r1, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	029a      	lsls	r2, r3, #10
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	609a      	str	r2, [r3, #8]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40012300 	.word	0x40012300
 80014c4:	0f000001 	.word	0x0f000001

080014c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d13c      	bne.n	800155c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d12b      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d127      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800151c:	2b00      	cmp	r3, #0
 800151e:	d119      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0220 	bic.w	r2, r2, #32
 800152e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7ff f82d 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800155a:	e00e      	b.n	800157a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fd75 	bl	8001058 <HAL_ADC_ErrorCallback>
}
 800156e:	e004      	b.n	800157a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fd57 	bl	8001044 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f043 0204 	orr.w	r2, r3, #4
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff fd4a 	bl	8001058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff29 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff3e 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff31 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fa9e 	bl	8000d3c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e099      	b.n	8001940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182c:	e00f      	b.n	800184e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800182e:	f7ff fa85 	bl	8000d3c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b05      	cmp	r3, #5
 800183a:	d908      	bls.n	800184e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2220      	movs	r2, #32
 8001840:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e078      	b.n	8001940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1e8      	bne.n	800182e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_DMA_Init+0x158>)
 8001868:	4013      	ands	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4313      	orrs	r3, r2
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f023 0307 	bic.w	r3, r3, #7
 80018ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d117      	bne.n	8001912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00e      	beq.n	8001912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fa6f 	bl	8001dd8 <DMA_CheckFifoParam>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2240      	movs	r2, #64	; 0x40
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800190e:	2301      	movs	r3, #1
 8001910:	e016      	b.n	8001940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa26 	bl	8001d6c <DMA_CalcBaseAndBitshift>
 8001920:	4603      	mov	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	223f      	movs	r2, #63	; 0x3f
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	f010803f 	.word	0xf010803f

0800194c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_DMA_Start_IT+0x26>
 800196e:	2302      	movs	r3, #2
 8001970:	e040      	b.n	80019f4 <HAL_DMA_Start_IT+0xa8>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12f      	bne.n	80019e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f9b8 	bl	8001d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	223f      	movs	r2, #63	; 0x3f
 80019a6:	409a      	lsls	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0216 	orr.w	r2, r2, #22
 80019ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0208 	orr.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e005      	b.n	80019f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a08:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_DMA_IRQHandler+0x248>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a8e      	ldr	r2, [pc, #568]	; (8001c48 <HAL_DMA_IRQHandler+0x24c>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0a9b      	lsrs	r3, r3, #10
 8001a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	2208      	movs	r2, #8
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01a      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0204 	bic.w	r2, r2, #4
 8001a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2208      	movs	r2, #8
 8001a56:	409a      	lsls	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d012      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d012      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	f043 0204 	orr.w	r2, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	2210      	movs	r2, #16
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d043      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03c      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	2210      	movs	r2, #16
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d018      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d024      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
 8001b2a:	e01f      	b.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01b      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e016      	b.n	8001b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0208 	bic.w	r2, r2, #8
 8001b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2220      	movs	r2, #32
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 808f 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8087 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	2220      	movs	r2, #32
 8001b94:	409a      	lsls	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d136      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0216 	bic.w	r2, r2, #22
 8001bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <HAL_DMA_IRQHandler+0x1da>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bea:	223f      	movs	r2, #63	; 0x3f
 8001bec:	409a      	lsls	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d07e      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
        }
        return;
 8001c12:	e079      	b.n	8001d08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01d      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
 8001c40:	e02c      	b.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000
 8001c48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e01e      	b.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10f      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0210 	bic.w	r2, r2, #16
 8001c7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d032      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d022      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d307      	bcc.n	8001ce4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f2      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0x2cc>
 8001ce2:	e000      	b.n	8001ce6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ce4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
 8001d06:	e000      	b.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d08:	bf00      	nop
    }
  }
}
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d108      	bne.n	8001d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d4e:	e007      	b.n	8001d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3b10      	subs	r3, #16
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d909      	bls.n	8001dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	1d1a      	adds	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dac:	e007      	b.n	8001dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	aaaaaaab 	.word	0xaaaaaaab
 8001dd4:	08003f0c 	.word	0x08003f0c

08001dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11f      	bne.n	8001e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d856      	bhi.n	8001ea6 <DMA_CheckFifoParam+0xce>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <DMA_CheckFifoParam+0x28>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e23 	.word	0x08001e23
 8001e08:	08001e11 	.word	0x08001e11
 8001e0c:	08001ea7 	.word	0x08001ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d046      	beq.n	8001eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e20:	e043      	b.n	8001eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2a:	d140      	bne.n	8001eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e30:	e03d      	b.n	8001eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3a:	d121      	bne.n	8001e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d837      	bhi.n	8001eb2 <DMA_CheckFifoParam+0xda>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <DMA_CheckFifoParam+0x70>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e5f 	.word	0x08001e5f
 8001e50:	08001e59 	.word	0x08001e59
 8001e54:	08001e71 	.word	0x08001e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5c:	e030      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d025      	beq.n	8001eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6e:	e022      	b.n	8001eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e78:	d11f      	bne.n	8001eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e7e:	e01c      	b.n	8001eba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d903      	bls.n	8001e8e <DMA_CheckFifoParam+0xb6>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d003      	beq.n	8001e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e8c:	e018      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
      break;
 8001e92:	e015      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea4:	e00b      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e00a      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e008      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e006      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e004      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e002      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eba:	bf00      	nop
 8001ebc:	e000      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ebe:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e165      	b.n	80021b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8154 	bne.w	80021b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d005      	beq.n	8001f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d130      	bne.n	8001f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0201 	and.w	r2, r3, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d017      	beq.n	8001fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80ae 	beq.w	80021b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_GPIO_Init+0x300>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a5c      	ldr	r2, [pc, #368]	; (80021d0 <HAL_GPIO_Init+0x300>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b5a      	ldr	r3, [pc, #360]	; (80021d0 <HAL_GPIO_Init+0x300>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002072:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_GPIO_Init+0x308>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d025      	beq.n	80020ea <HAL_GPIO_Init+0x21a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_GPIO_Init+0x30c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01f      	beq.n	80020e6 <HAL_GPIO_Init+0x216>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4d      	ldr	r2, [pc, #308]	; (80021e0 <HAL_GPIO_Init+0x310>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x212>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_GPIO_Init+0x314>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_GPIO_Init+0x318>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x20a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_GPIO_Init+0x31c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x206>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_GPIO_Init+0x320>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x202>
 80020ce:	2306      	movs	r3, #6
 80020d0:	e00c      	b.n	80020ec <HAL_GPIO_Init+0x21c>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00a      	b.n	80020ec <HAL_GPIO_Init+0x21c>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e008      	b.n	80020ec <HAL_GPIO_Init+0x21c>
 80020da:	2304      	movs	r3, #4
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x21c>
 80020de:	2303      	movs	r3, #3
 80020e0:	e004      	b.n	80020ec <HAL_GPIO_Init+0x21c>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_Init+0x21c>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x21c>
 80020ea:	2300      	movs	r3, #0
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	f002 0203 	and.w	r2, r2, #3
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	4093      	lsls	r3, r2
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020fc:	4935      	ldr	r1, [pc, #212]	; (80021d4 <HAL_GPIO_Init+0x304>)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210a:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <HAL_GPIO_Init+0x324>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212e:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002158:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <HAL_GPIO_Init+0x324>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_GPIO_Init+0x324>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ac:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_GPIO_Init+0x324>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b0f      	cmp	r3, #15
 80021bc:	f67f ae96 	bls.w	8001eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40013800 	.word	0x40013800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020c00 	.word	0x40020c00
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40021400 	.word	0x40021400
 80021f0:	40021800 	.word	0x40021800
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0cc      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d90c      	bls.n	8002268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b8      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	494d      	ldr	r1, [pc, #308]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d044      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d119      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e067      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fd0e 	bl	8000d3c <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7fe fd0a 	bl	8000d3c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d20c      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e032      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4916      	ldr	r1, [pc, #88]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 f855 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	490a      	ldr	r1, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fc6e 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	40023800 	.word	0x40023800
 80023ec:	08003ef4 	.word	0x08003ef4
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08003f04 	.word	0x08003f04

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08003f04 	.word	0x08003f04

08002460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002464:	b0ae      	sub	sp, #184	; 0xb8
 8002466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002486:	4bcb      	ldr	r3, [pc, #812]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b0c      	cmp	r3, #12
 8002490:	f200 8206 	bhi.w	80028a0 <HAL_RCC_GetSysClockFreq+0x440>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024d1 	.word	0x080024d1
 80024a0:	080028a1 	.word	0x080028a1
 80024a4:	080028a1 	.word	0x080028a1
 80024a8:	080028a1 	.word	0x080028a1
 80024ac:	080024d9 	.word	0x080024d9
 80024b0:	080028a1 	.word	0x080028a1
 80024b4:	080028a1 	.word	0x080028a1
 80024b8:	080028a1 	.word	0x080028a1
 80024bc:	080024e1 	.word	0x080024e1
 80024c0:	080028a1 	.word	0x080028a1
 80024c4:	080028a1 	.word	0x080028a1
 80024c8:	080028a1 	.word	0x080028a1
 80024cc:	080026d1 	.word	0x080026d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4bb9      	ldr	r3, [pc, #740]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80024d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80024d6:	e1e7      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4bb8      	ldr	r3, [pc, #736]	; (80027bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80024da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024de:	e1e3      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e0:	4bb4      	ldr	r3, [pc, #720]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ec:	4bb1      	ldr	r3, [pc, #708]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d071      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f8:	4bae      	ldr	r3, [pc, #696]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002504:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800251a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800251e:	4622      	mov	r2, r4
 8002520:	462b      	mov	r3, r5
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	0159      	lsls	r1, r3, #5
 800252c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002530:	0150      	lsls	r0, r2, #5
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4621      	mov	r1, r4
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	6439      	str	r1, [r7, #64]	; 0x40
 800253c:	4629      	mov	r1, r5
 800253e:	eb63 0301 	sbc.w	r3, r3, r1
 8002542:	647b      	str	r3, [r7, #68]	; 0x44
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002550:	4649      	mov	r1, r9
 8002552:	018b      	lsls	r3, r1, #6
 8002554:	4641      	mov	r1, r8
 8002556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800255a:	4641      	mov	r1, r8
 800255c:	018a      	lsls	r2, r1, #6
 800255e:	4641      	mov	r1, r8
 8002560:	1a51      	subs	r1, r2, r1
 8002562:	63b9      	str	r1, [r7, #56]	; 0x38
 8002564:	4649      	mov	r1, r9
 8002566:	eb63 0301 	sbc.w	r3, r3, r1
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002578:	4649      	mov	r1, r9
 800257a:	00cb      	lsls	r3, r1, #3
 800257c:	4641      	mov	r1, r8
 800257e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002582:	4641      	mov	r1, r8
 8002584:	00ca      	lsls	r2, r1, #3
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	4603      	mov	r3, r0
 800258c:	4622      	mov	r2, r4
 800258e:	189b      	adds	r3, r3, r2
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
 8002592:	462b      	mov	r3, r5
 8002594:	460a      	mov	r2, r1
 8002596:	eb42 0303 	adc.w	r3, r2, r3
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025a8:	4629      	mov	r1, r5
 80025aa:	024b      	lsls	r3, r1, #9
 80025ac:	4621      	mov	r1, r4
 80025ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b2:	4621      	mov	r1, r4
 80025b4:	024a      	lsls	r2, r1, #9
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025be:	2200      	movs	r2, #0
 80025c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80025cc:	f7fd fe70 	bl	80002b0 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025da:	e067      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025dc:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80025ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80025f6:	2300      	movs	r3, #0
 80025f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	0159      	lsls	r1, r3, #5
 800260c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002610:	0150      	lsls	r0, r2, #5
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4621      	mov	r1, r4
 8002618:	1a51      	subs	r1, r2, r1
 800261a:	62b9      	str	r1, [r7, #40]	; 0x28
 800261c:	4629      	mov	r1, r5
 800261e:	eb63 0301 	sbc.w	r3, r3, r1
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002630:	4649      	mov	r1, r9
 8002632:	018b      	lsls	r3, r1, #6
 8002634:	4641      	mov	r1, r8
 8002636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800263a:	4641      	mov	r1, r8
 800263c:	018a      	lsls	r2, r1, #6
 800263e:	4641      	mov	r1, r8
 8002640:	ebb2 0a01 	subs.w	sl, r2, r1
 8002644:	4649      	mov	r1, r9
 8002646:	eb63 0b01 	sbc.w	fp, r3, r1
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002656:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800265a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800265e:	4692      	mov	sl, r2
 8002660:	469b      	mov	fp, r3
 8002662:	4623      	mov	r3, r4
 8002664:	eb1a 0303 	adds.w	r3, sl, r3
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	462b      	mov	r3, r5
 800266c:	eb4b 0303 	adc.w	r3, fp, r3
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002694:	2200      	movs	r2, #0
 8002696:	673b      	str	r3, [r7, #112]	; 0x70
 8002698:	677a      	str	r2, [r7, #116]	; 0x74
 800269a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800269e:	f7fd fe07 	bl	80002b0 <__aeabi_uldivmod>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4613      	mov	r3, r2
 80026a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ac:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	3301      	adds	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80026be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026ce:	e0eb      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d06b      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	2200      	movs	r2, #0
 80026f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fa:	663b      	str	r3, [r7, #96]	; 0x60
 80026fc:	2300      	movs	r3, #0
 80026fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002700:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002704:	4622      	mov	r2, r4
 8002706:	462b      	mov	r3, r5
 8002708:	f04f 0000 	mov.w	r0, #0
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	0159      	lsls	r1, r3, #5
 8002712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002716:	0150      	lsls	r0, r2, #5
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4621      	mov	r1, r4
 800271e:	1a51      	subs	r1, r2, r1
 8002720:	61b9      	str	r1, [r7, #24]
 8002722:	4629      	mov	r1, r5
 8002724:	eb63 0301 	sbc.w	r3, r3, r1
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002736:	4659      	mov	r1, fp
 8002738:	018b      	lsls	r3, r1, #6
 800273a:	4651      	mov	r1, sl
 800273c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002740:	4651      	mov	r1, sl
 8002742:	018a      	lsls	r2, r1, #6
 8002744:	4651      	mov	r1, sl
 8002746:	ebb2 0801 	subs.w	r8, r2, r1
 800274a:	4659      	mov	r1, fp
 800274c:	eb63 0901 	sbc.w	r9, r3, r1
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002760:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002764:	4690      	mov	r8, r2
 8002766:	4699      	mov	r9, r3
 8002768:	4623      	mov	r3, r4
 800276a:	eb18 0303 	adds.w	r3, r8, r3
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	462b      	mov	r3, r5
 8002772:	eb49 0303 	adc.w	r3, r9, r3
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002784:	4629      	mov	r1, r5
 8002786:	024b      	lsls	r3, r1, #9
 8002788:	4621      	mov	r1, r4
 800278a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800278e:	4621      	mov	r1, r4
 8002790:	024a      	lsls	r2, r1, #9
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800279a:	2200      	movs	r2, #0
 800279c:	65bb      	str	r3, [r7, #88]	; 0x58
 800279e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027a4:	f7fd fd84 	bl	80002b0 <__aeabi_uldivmod>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4613      	mov	r3, r2
 80027ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027b2:	e065      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x420>
 80027b4:	40023800 	.word	0x40023800
 80027b8:	00f42400 	.word	0x00f42400
 80027bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	2200      	movs	r2, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	4611      	mov	r1, r2
 80027cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027d0:	653b      	str	r3, [r7, #80]	; 0x50
 80027d2:	2300      	movs	r3, #0
 80027d4:	657b      	str	r3, [r7, #84]	; 0x54
 80027d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80027da:	4642      	mov	r2, r8
 80027dc:	464b      	mov	r3, r9
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	0159      	lsls	r1, r3, #5
 80027e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ec:	0150      	lsls	r0, r2, #5
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4641      	mov	r1, r8
 80027f4:	1a51      	subs	r1, r2, r1
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	4649      	mov	r1, r9
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800280c:	4659      	mov	r1, fp
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	4651      	mov	r1, sl
 8002812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002816:	4651      	mov	r1, sl
 8002818:	018a      	lsls	r2, r1, #6
 800281a:	4651      	mov	r1, sl
 800281c:	1a54      	subs	r4, r2, r1
 800281e:	4659      	mov	r1, fp
 8002820:	eb63 0501 	sbc.w	r5, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	00eb      	lsls	r3, r5, #3
 800282e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002832:	00e2      	lsls	r2, r4, #3
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	4643      	mov	r3, r8
 800283a:	18e3      	adds	r3, r4, r3
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	464b      	mov	r3, r9
 8002840:	eb45 0303 	adc.w	r3, r5, r3
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002852:	4629      	mov	r1, r5
 8002854:	028b      	lsls	r3, r1, #10
 8002856:	4621      	mov	r1, r4
 8002858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800285c:	4621      	mov	r1, r4
 800285e:	028a      	lsls	r2, r1, #10
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002868:	2200      	movs	r2, #0
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
 800286c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800286e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002872:	f7fd fd1d 	bl	80002b0 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4613      	mov	r3, r2
 800287c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0f1b      	lsrs	r3, r3, #28
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800288e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800289e:	e003      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80028a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	37b8      	adds	r7, #184	; 0xb8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	00f42400 	.word	0x00f42400

080028c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e28d      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8083 	beq.w	80029e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028e0:	4b94      	ldr	r3, [pc, #592]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d019      	beq.n	8002920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028ec:	4b91      	ldr	r3, [pc, #580]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028f8:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002904:	d00c      	beq.n	8002920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002906:	4b8b      	ldr	r3, [pc, #556]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d112      	bne.n	8002938 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b88      	ldr	r3, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291e:	d10b      	bne.n	8002938 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	4b84      	ldr	r3, [pc, #528]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05b      	beq.n	80029e4 <HAL_RCC_OscConfig+0x124>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d157      	bne.n	80029e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e25a      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x90>
 8002942:	4b7c      	ldr	r3, [pc, #496]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7b      	ldr	r2, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e01d      	b.n	800298c <HAL_RCC_OscConfig+0xcc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0xb4>
 800295a:	4b76      	ldr	r3, [pc, #472]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a75      	ldr	r2, [pc, #468]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b73      	ldr	r3, [pc, #460]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a72      	ldr	r2, [pc, #456]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0xcc>
 8002974:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a6e      	ldr	r2, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 800297a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b6c      	ldr	r3, [pc, #432]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6b      	ldr	r2, [pc, #428]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe f9d2 	bl	8000d3c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe f9ce 	bl	8000d3c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e21f      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0xdc>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe f9be 	bl	8000d3c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe f9ba 	bl	8000d3c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e20b      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	4b57      	ldr	r3, [pc, #348]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x104>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d06f      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029f2:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d017      	beq.n	8002a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029fe:	4b4d      	ldr	r3, [pc, #308]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d11c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x186>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e1d3      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4937      	ldr	r1, [pc, #220]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	e03a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a64:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x278>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe f967 	bl	8000d3c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe f963 	bl	8000d3c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1b4      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4925      	ldr	r1, [pc, #148]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x278>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe f946 	bl	8000d3c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7fe f942 	bl	8000d3c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e193      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d036      	beq.n	8002b4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe f926 	bl	8000d3c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe f922 	bl	8000d3c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e173      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x234>
 8002b12:	e01b      	b.n	8002b4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe f90f 	bl	8000d3c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	e00e      	b.n	8002b40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe f90b 	bl	8000d3c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d907      	bls.n	8002b40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e15c      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470000 	.word	0x42470000
 8002b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b8a      	ldr	r3, [pc, #552]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ea      	bne.n	8002b22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8097 	beq.w	8002c88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a7e      	ldr	r2, [pc, #504]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <HAL_RCC_OscConfig+0x4b0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x4b0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a75      	ldr	r2, [pc, #468]	; (8002d70 <HAL_RCC_OscConfig+0x4b0>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe f8cb 	bl	8000d3c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe f8c7 	bl	8000d3c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e118      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b6c      	ldr	r3, [pc, #432]	; (8002d70 <HAL_RCC_OscConfig+0x4b0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x31e>
 8002bd0:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a65      	ldr	r2, [pc, #404]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x358>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x340>
 8002be6:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a60      	ldr	r2, [pc, #384]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	4b5e      	ldr	r3, [pc, #376]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x358>
 8002c00:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a59      	ldr	r2, [pc, #356]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe f88c 	bl	8000d3c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fe f888 	bl	8000d3c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0d7      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ee      	beq.n	8002c28 <HAL_RCC_OscConfig+0x368>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe f876 	bl	8000d3c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe f872 	bl	8000d3c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0c1      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ee      	bne.n	8002c54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80ad 	beq.w	8002dec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c92:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d060      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d145      	bne.n	8002d32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <HAL_RCC_OscConfig+0x4b4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe f846 	bl	8000d3c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe f842 	bl	8000d3c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e093      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	3b01      	subs	r3, #1
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	491b      	ldr	r1, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x4b4>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f817 	bl	8000d3c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d12:	f7fe f813 	bl	8000d3c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e064      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x452>
 8002d30:	e05c      	b.n	8002dec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_RCC_OscConfig+0x4b4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe f800 	bl	8000d3c <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fd fffc 	bl	8000d3c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04d      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x480>
 8002d5e:	e045      	b.n	8002dec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e040      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40007000 	.word	0x40007000
 8002d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <HAL_RCC_OscConfig+0x538>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d030      	beq.n	8002de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d129      	bne.n	8002de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d122      	bne.n	8002de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d119      	bne.n	8002de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d10f      	bne.n	8002de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e03f      	b.n	8002e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd fe36 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f929 	bl	8003098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08a      	sub	sp, #40	; 0x28
 8002e9a:	af02      	add	r7, sp, #8
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d17c      	bne.n	8002fb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_UART_Transmit+0x2c>
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e075      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Transmit+0x3e>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e06e      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2221      	movs	r2, #33	; 0x21
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eea:	f7fd ff27 	bl	8000d3c <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	88fa      	ldrh	r2, [r7, #6]
 8002ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f04:	d108      	bne.n	8002f18 <HAL_UART_Transmit+0x82>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f28:	e02a      	b.n	8002f80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f840 	bl	8002fba <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e036      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e007      	b.n	8002f72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1cf      	bne.n	8002f2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2140      	movs	r1, #64	; 0x40
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f810 	bl	8002fba <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b090      	sub	sp, #64	; 0x40
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fca:	e050      	b.n	800306e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d04c      	beq.n	800306e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <UART_WaitOnFlagUntilTimeout+0x30>
 8002fda:	f7fd feaf 	bl	8000d3c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d241      	bcs.n	800306e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800300a:	637a      	str	r2, [r7, #52]	; 0x34
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e5      	bne.n	8002fea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3314      	adds	r3, #20
 8003024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	613b      	str	r3, [r7, #16]
   return(result);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3314      	adds	r3, #20
 800303c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800303e:	623a      	str	r2, [r7, #32]
 8003040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	69f9      	ldr	r1, [r7, #28]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	61bb      	str	r3, [r7, #24]
   return(result);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e5      	bne.n	800301e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e00f      	b.n	800308e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	429a      	cmp	r2, r3
 800308a:	d09f      	beq.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3740      	adds	r7, #64	; 0x40
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800309c:	b0c0      	sub	sp, #256	; 0x100
 800309e:	af00      	add	r7, sp, #0
 80030a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	68d9      	ldr	r1, [r3, #12]
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	ea40 0301 	orr.w	r3, r0, r1
 80030c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030f0:	f021 010c 	bic.w	r1, r1, #12
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030fe:	430b      	orrs	r3, r1
 8003100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	6999      	ldr	r1, [r3, #24]
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	ea40 0301 	orr.w	r3, r0, r1
 800311e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b8f      	ldr	r3, [pc, #572]	; (8003364 <UART_SetConfig+0x2cc>)
 8003128:	429a      	cmp	r2, r3
 800312a:	d005      	beq.n	8003138 <UART_SetConfig+0xa0>
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b8d      	ldr	r3, [pc, #564]	; (8003368 <UART_SetConfig+0x2d0>)
 8003134:	429a      	cmp	r2, r3
 8003136:	d104      	bne.n	8003142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff f97e 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 800313c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003140:	e003      	b.n	800314a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003142:	f7ff f965 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003154:	f040 810c 	bne.w	8003370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800316a:	4622      	mov	r2, r4
 800316c:	462b      	mov	r3, r5
 800316e:	1891      	adds	r1, r2, r2
 8003170:	65b9      	str	r1, [r7, #88]	; 0x58
 8003172:	415b      	adcs	r3, r3
 8003174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800317a:	4621      	mov	r1, r4
 800317c:	eb12 0801 	adds.w	r8, r2, r1
 8003180:	4629      	mov	r1, r5
 8003182:	eb43 0901 	adc.w	r9, r3, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800319a:	4690      	mov	r8, r2
 800319c:	4699      	mov	r9, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	eb18 0303 	adds.w	r3, r8, r3
 80031a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031a8:	462b      	mov	r3, r5
 80031aa:	eb49 0303 	adc.w	r3, r9, r3
 80031ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031c6:	460b      	mov	r3, r1
 80031c8:	18db      	adds	r3, r3, r3
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
 80031cc:	4613      	mov	r3, r2
 80031ce:	eb42 0303 	adc.w	r3, r2, r3
 80031d2:	657b      	str	r3, [r7, #84]	; 0x54
 80031d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031dc:	f7fd f868 	bl	80002b0 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4b61      	ldr	r3, [pc, #388]	; (800336c <UART_SetConfig+0x2d4>)
 80031e6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	011c      	lsls	r4, r3, #4
 80031ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	1891      	adds	r1, r2, r2
 8003206:	64b9      	str	r1, [r7, #72]	; 0x48
 8003208:	415b      	adcs	r3, r3
 800320a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800320c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003210:	4641      	mov	r1, r8
 8003212:	eb12 0a01 	adds.w	sl, r2, r1
 8003216:	4649      	mov	r1, r9
 8003218:	eb43 0b01 	adc.w	fp, r3, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800322c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003230:	4692      	mov	sl, r2
 8003232:	469b      	mov	fp, r3
 8003234:	4643      	mov	r3, r8
 8003236:	eb1a 0303 	adds.w	r3, sl, r3
 800323a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800323e:	464b      	mov	r3, r9
 8003240:	eb4b 0303 	adc.w	r3, fp, r3
 8003244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800325c:	460b      	mov	r3, r1
 800325e:	18db      	adds	r3, r3, r3
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
 8003262:	4613      	mov	r3, r2
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	647b      	str	r3, [r7, #68]	; 0x44
 800326a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800326e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003272:	f7fd f81d 	bl	80002b0 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4611      	mov	r1, r2
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <UART_SetConfig+0x2d4>)
 800327e:	fba3 2301 	umull	r2, r3, r3, r1
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2264      	movs	r2, #100	; 0x64
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	1acb      	subs	r3, r1, r3
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <UART_SetConfig+0x2d4>)
 8003294:	fba3 2302 	umull	r2, r3, r3, r2
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a0:	441c      	add	r4, r3
 80032a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	1891      	adds	r1, r2, r2
 80032ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80032bc:	415b      	adcs	r3, r3
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032c4:	4641      	mov	r1, r8
 80032c6:	1851      	adds	r1, r2, r1
 80032c8:	6339      	str	r1, [r7, #48]	; 0x30
 80032ca:	4649      	mov	r1, r9
 80032cc:	414b      	adcs	r3, r1
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032dc:	4659      	mov	r1, fp
 80032de:	00cb      	lsls	r3, r1, #3
 80032e0:	4651      	mov	r1, sl
 80032e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e6:	4651      	mov	r1, sl
 80032e8:	00ca      	lsls	r2, r1, #3
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	4642      	mov	r2, r8
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032f8:	464b      	mov	r3, r9
 80032fa:	460a      	mov	r2, r1
 80032fc:	eb42 0303 	adc.w	r3, r2, r3
 8003300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003318:	460b      	mov	r3, r1
 800331a:	18db      	adds	r3, r3, r3
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 800331e:	4613      	mov	r3, r2
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800332a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800332e:	f7fc ffbf 	bl	80002b0 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <UART_SetConfig+0x2d4>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <UART_SetConfig+0x2d4>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 0207 	and.w	r2, r3, #7
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4422      	add	r2, r4
 800335e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003360:	e105      	b.n	800356e <UART_SetConfig+0x4d6>
 8003362:	bf00      	nop
 8003364:	40011000 	.word	0x40011000
 8003368:	40011400 	.word	0x40011400
 800336c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800337a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800337e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003382:	4642      	mov	r2, r8
 8003384:	464b      	mov	r3, r9
 8003386:	1891      	adds	r1, r2, r2
 8003388:	6239      	str	r1, [r7, #32]
 800338a:	415b      	adcs	r3, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003392:	4641      	mov	r1, r8
 8003394:	1854      	adds	r4, r2, r1
 8003396:	4649      	mov	r1, r9
 8003398:	eb43 0501 	adc.w	r5, r3, r1
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	00eb      	lsls	r3, r5, #3
 80033a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033aa:	00e2      	lsls	r2, r4, #3
 80033ac:	4614      	mov	r4, r2
 80033ae:	461d      	mov	r5, r3
 80033b0:	4643      	mov	r3, r8
 80033b2:	18e3      	adds	r3, r4, r3
 80033b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033b8:	464b      	mov	r3, r9
 80033ba:	eb45 0303 	adc.w	r3, r5, r3
 80033be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033de:	4629      	mov	r1, r5
 80033e0:	008b      	lsls	r3, r1, #2
 80033e2:	4621      	mov	r1, r4
 80033e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e8:	4621      	mov	r1, r4
 80033ea:	008a      	lsls	r2, r1, #2
 80033ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033f0:	f7fc ff5e 	bl	80002b0 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4b60      	ldr	r3, [pc, #384]	; (800357c <UART_SetConfig+0x4e4>)
 80033fa:	fba3 2302 	umull	r2, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	011c      	lsls	r4, r3, #4
 8003402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800340c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	1891      	adds	r1, r2, r2
 800341a:	61b9      	str	r1, [r7, #24]
 800341c:	415b      	adcs	r3, r3
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003424:	4641      	mov	r1, r8
 8003426:	1851      	adds	r1, r2, r1
 8003428:	6139      	str	r1, [r7, #16]
 800342a:	4649      	mov	r1, r9
 800342c:	414b      	adcs	r3, r1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800343c:	4659      	mov	r1, fp
 800343e:	00cb      	lsls	r3, r1, #3
 8003440:	4651      	mov	r1, sl
 8003442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003446:	4651      	mov	r1, sl
 8003448:	00ca      	lsls	r2, r1, #3
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	4603      	mov	r3, r0
 8003450:	4642      	mov	r2, r8
 8003452:	189b      	adds	r3, r3, r2
 8003454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003458:	464b      	mov	r3, r9
 800345a:	460a      	mov	r2, r1
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	67bb      	str	r3, [r7, #120]	; 0x78
 800346e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800347c:	4649      	mov	r1, r9
 800347e:	008b      	lsls	r3, r1, #2
 8003480:	4641      	mov	r1, r8
 8003482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003486:	4641      	mov	r1, r8
 8003488:	008a      	lsls	r2, r1, #2
 800348a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800348e:	f7fc ff0f 	bl	80002b0 <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <UART_SetConfig+0x4e4>)
 8003498:	fba3 1302 	umull	r1, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	2164      	movs	r1, #100	; 0x64
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	3332      	adds	r3, #50	; 0x32
 80034aa:	4a34      	ldr	r2, [pc, #208]	; (800357c <UART_SetConfig+0x4e4>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b6:	441c      	add	r4, r3
 80034b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034bc:	2200      	movs	r2, #0
 80034be:	673b      	str	r3, [r7, #112]	; 0x70
 80034c0:	677a      	str	r2, [r7, #116]	; 0x74
 80034c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034c6:	4642      	mov	r2, r8
 80034c8:	464b      	mov	r3, r9
 80034ca:	1891      	adds	r1, r2, r2
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	415b      	adcs	r3, r3
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d6:	4641      	mov	r1, r8
 80034d8:	1851      	adds	r1, r2, r1
 80034da:	6039      	str	r1, [r7, #0]
 80034dc:	4649      	mov	r1, r9
 80034de:	414b      	adcs	r3, r1
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034ee:	4659      	mov	r1, fp
 80034f0:	00cb      	lsls	r3, r1, #3
 80034f2:	4651      	mov	r1, sl
 80034f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f8:	4651      	mov	r1, sl
 80034fa:	00ca      	lsls	r2, r1, #3
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	4603      	mov	r3, r0
 8003502:	4642      	mov	r2, r8
 8003504:	189b      	adds	r3, r3, r2
 8003506:	66bb      	str	r3, [r7, #104]	; 0x68
 8003508:	464b      	mov	r3, r9
 800350a:	460a      	mov	r2, r1
 800350c:	eb42 0303 	adc.w	r3, r2, r3
 8003510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	663b      	str	r3, [r7, #96]	; 0x60
 800351c:	667a      	str	r2, [r7, #100]	; 0x64
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800352a:	4649      	mov	r1, r9
 800352c:	008b      	lsls	r3, r1, #2
 800352e:	4641      	mov	r1, r8
 8003530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003534:	4641      	mov	r1, r8
 8003536:	008a      	lsls	r2, r1, #2
 8003538:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800353c:	f7fc feb8 	bl	80002b0 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <UART_SetConfig+0x4e4>)
 8003546:	fba3 1302 	umull	r1, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2164      	movs	r1, #100	; 0x64
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	3332      	adds	r3, #50	; 0x32
 8003558:	4a08      	ldr	r2, [pc, #32]	; (800357c <UART_SetConfig+0x4e4>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4422      	add	r2, r4
 800356c:	609a      	str	r2, [r3, #8]
}
 800356e:	bf00      	nop
 8003570:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357a:	bf00      	nop
 800357c:	51eb851f 	.word	0x51eb851f

08003580 <__errno>:
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <__errno+0x8>)
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2000000c 	.word	0x2000000c

0800358c <__libc_init_array>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4d0d      	ldr	r5, [pc, #52]	; (80035c4 <__libc_init_array+0x38>)
 8003590:	4c0d      	ldr	r4, [pc, #52]	; (80035c8 <__libc_init_array+0x3c>)
 8003592:	1b64      	subs	r4, r4, r5
 8003594:	10a4      	asrs	r4, r4, #2
 8003596:	2600      	movs	r6, #0
 8003598:	42a6      	cmp	r6, r4
 800359a:	d109      	bne.n	80035b0 <__libc_init_array+0x24>
 800359c:	4d0b      	ldr	r5, [pc, #44]	; (80035cc <__libc_init_array+0x40>)
 800359e:	4c0c      	ldr	r4, [pc, #48]	; (80035d0 <__libc_init_array+0x44>)
 80035a0:	f000 fc8e 	bl	8003ec0 <_init>
 80035a4:	1b64      	subs	r4, r4, r5
 80035a6:	10a4      	asrs	r4, r4, #2
 80035a8:	2600      	movs	r6, #0
 80035aa:	42a6      	cmp	r6, r4
 80035ac:	d105      	bne.n	80035ba <__libc_init_array+0x2e>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b4:	4798      	blx	r3
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7ee      	b.n	8003598 <__libc_init_array+0xc>
 80035ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80035be:	4798      	blx	r3
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f2      	b.n	80035aa <__libc_init_array+0x1e>
 80035c4:	08003f50 	.word	0x08003f50
 80035c8:	08003f50 	.word	0x08003f50
 80035cc:	08003f50 	.word	0x08003f50
 80035d0:	08003f54 	.word	0x08003f54

080035d4 <memset>:
 80035d4:	4402      	add	r2, r0
 80035d6:	4603      	mov	r3, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <siprintf>:
 80035e4:	b40e      	push	{r1, r2, r3}
 80035e6:	b500      	push	{lr}
 80035e8:	b09c      	sub	sp, #112	; 0x70
 80035ea:	ab1d      	add	r3, sp, #116	; 0x74
 80035ec:	9002      	str	r0, [sp, #8]
 80035ee:	9006      	str	r0, [sp, #24]
 80035f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035f4:	4809      	ldr	r0, [pc, #36]	; (800361c <siprintf+0x38>)
 80035f6:	9107      	str	r1, [sp, #28]
 80035f8:	9104      	str	r1, [sp, #16]
 80035fa:	4909      	ldr	r1, [pc, #36]	; (8003620 <siprintf+0x3c>)
 80035fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003600:	9105      	str	r1, [sp, #20]
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	a902      	add	r1, sp, #8
 8003608:	f000 f868 	bl	80036dc <_svfiprintf_r>
 800360c:	9b02      	ldr	r3, [sp, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	b01c      	add	sp, #112	; 0x70
 8003614:	f85d eb04 	ldr.w	lr, [sp], #4
 8003618:	b003      	add	sp, #12
 800361a:	4770      	bx	lr
 800361c:	2000000c 	.word	0x2000000c
 8003620:	ffff0208 	.word	0xffff0208

08003624 <__ssputs_r>:
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	688e      	ldr	r6, [r1, #8]
 800362a:	429e      	cmp	r6, r3
 800362c:	4682      	mov	sl, r0
 800362e:	460c      	mov	r4, r1
 8003630:	4690      	mov	r8, r2
 8003632:	461f      	mov	r7, r3
 8003634:	d838      	bhi.n	80036a8 <__ssputs_r+0x84>
 8003636:	898a      	ldrh	r2, [r1, #12]
 8003638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800363c:	d032      	beq.n	80036a4 <__ssputs_r+0x80>
 800363e:	6825      	ldr	r5, [r4, #0]
 8003640:	6909      	ldr	r1, [r1, #16]
 8003642:	eba5 0901 	sub.w	r9, r5, r1
 8003646:	6965      	ldr	r5, [r4, #20]
 8003648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800364c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003650:	3301      	adds	r3, #1
 8003652:	444b      	add	r3, r9
 8003654:	106d      	asrs	r5, r5, #1
 8003656:	429d      	cmp	r5, r3
 8003658:	bf38      	it	cc
 800365a:	461d      	movcc	r5, r3
 800365c:	0553      	lsls	r3, r2, #21
 800365e:	d531      	bpl.n	80036c4 <__ssputs_r+0xa0>
 8003660:	4629      	mov	r1, r5
 8003662:	f000 fb63 	bl	8003d2c <_malloc_r>
 8003666:	4606      	mov	r6, r0
 8003668:	b950      	cbnz	r0, 8003680 <__ssputs_r+0x5c>
 800366a:	230c      	movs	r3, #12
 800366c:	f8ca 3000 	str.w	r3, [sl]
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	6921      	ldr	r1, [r4, #16]
 8003682:	464a      	mov	r2, r9
 8003684:	f000 fabe 	bl	8003c04 <memcpy>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	6126      	str	r6, [r4, #16]
 8003696:	6165      	str	r5, [r4, #20]
 8003698:	444e      	add	r6, r9
 800369a:	eba5 0509 	sub.w	r5, r5, r9
 800369e:	6026      	str	r6, [r4, #0]
 80036a0:	60a5      	str	r5, [r4, #8]
 80036a2:	463e      	mov	r6, r7
 80036a4:	42be      	cmp	r6, r7
 80036a6:	d900      	bls.n	80036aa <__ssputs_r+0x86>
 80036a8:	463e      	mov	r6, r7
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	4632      	mov	r2, r6
 80036ae:	4641      	mov	r1, r8
 80036b0:	f000 fab6 	bl	8003c20 <memmove>
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	1b9b      	subs	r3, r3, r6
 80036b8:	60a3      	str	r3, [r4, #8]
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4433      	add	r3, r6
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	2000      	movs	r0, #0
 80036c2:	e7db      	b.n	800367c <__ssputs_r+0x58>
 80036c4:	462a      	mov	r2, r5
 80036c6:	f000 fba5 	bl	8003e14 <_realloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1e1      	bne.n	8003694 <__ssputs_r+0x70>
 80036d0:	6921      	ldr	r1, [r4, #16]
 80036d2:	4650      	mov	r0, sl
 80036d4:	f000 fabe 	bl	8003c54 <_free_r>
 80036d8:	e7c7      	b.n	800366a <__ssputs_r+0x46>
	...

080036dc <_svfiprintf_r>:
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	4698      	mov	r8, r3
 80036e2:	898b      	ldrh	r3, [r1, #12]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	b09d      	sub	sp, #116	; 0x74
 80036e8:	4607      	mov	r7, r0
 80036ea:	460d      	mov	r5, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	d50e      	bpl.n	800370e <_svfiprintf_r+0x32>
 80036f0:	690b      	ldr	r3, [r1, #16]
 80036f2:	b963      	cbnz	r3, 800370e <_svfiprintf_r+0x32>
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	f000 fb19 	bl	8003d2c <_malloc_r>
 80036fa:	6028      	str	r0, [r5, #0]
 80036fc:	6128      	str	r0, [r5, #16]
 80036fe:	b920      	cbnz	r0, 800370a <_svfiprintf_r+0x2e>
 8003700:	230c      	movs	r3, #12
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	e0d1      	b.n	80038ae <_svfiprintf_r+0x1d2>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	616b      	str	r3, [r5, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	9309      	str	r3, [sp, #36]	; 0x24
 8003712:	2320      	movs	r3, #32
 8003714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003718:	f8cd 800c 	str.w	r8, [sp, #12]
 800371c:	2330      	movs	r3, #48	; 0x30
 800371e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038c8 <_svfiprintf_r+0x1ec>
 8003722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003726:	f04f 0901 	mov.w	r9, #1
 800372a:	4623      	mov	r3, r4
 800372c:	469a      	mov	sl, r3
 800372e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003732:	b10a      	cbz	r2, 8003738 <_svfiprintf_r+0x5c>
 8003734:	2a25      	cmp	r2, #37	; 0x25
 8003736:	d1f9      	bne.n	800372c <_svfiprintf_r+0x50>
 8003738:	ebba 0b04 	subs.w	fp, sl, r4
 800373c:	d00b      	beq.n	8003756 <_svfiprintf_r+0x7a>
 800373e:	465b      	mov	r3, fp
 8003740:	4622      	mov	r2, r4
 8003742:	4629      	mov	r1, r5
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ff6d 	bl	8003624 <__ssputs_r>
 800374a:	3001      	adds	r0, #1
 800374c:	f000 80aa 	beq.w	80038a4 <_svfiprintf_r+0x1c8>
 8003750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003752:	445a      	add	r2, fp
 8003754:	9209      	str	r2, [sp, #36]	; 0x24
 8003756:	f89a 3000 	ldrb.w	r3, [sl]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80a2 	beq.w	80038a4 <_svfiprintf_r+0x1c8>
 8003760:	2300      	movs	r3, #0
 8003762:	f04f 32ff 	mov.w	r2, #4294967295
 8003766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376a:	f10a 0a01 	add.w	sl, sl, #1
 800376e:	9304      	str	r3, [sp, #16]
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003776:	931a      	str	r3, [sp, #104]	; 0x68
 8003778:	4654      	mov	r4, sl
 800377a:	2205      	movs	r2, #5
 800377c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003780:	4851      	ldr	r0, [pc, #324]	; (80038c8 <_svfiprintf_r+0x1ec>)
 8003782:	f7fc fd45 	bl	8000210 <memchr>
 8003786:	9a04      	ldr	r2, [sp, #16]
 8003788:	b9d8      	cbnz	r0, 80037c2 <_svfiprintf_r+0xe6>
 800378a:	06d0      	lsls	r0, r2, #27
 800378c:	bf44      	itt	mi
 800378e:	2320      	movmi	r3, #32
 8003790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003794:	0711      	lsls	r1, r2, #28
 8003796:	bf44      	itt	mi
 8003798:	232b      	movmi	r3, #43	; 0x2b
 800379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800379e:	f89a 3000 	ldrb.w	r3, [sl]
 80037a2:	2b2a      	cmp	r3, #42	; 0x2a
 80037a4:	d015      	beq.n	80037d2 <_svfiprintf_r+0xf6>
 80037a6:	9a07      	ldr	r2, [sp, #28]
 80037a8:	4654      	mov	r4, sl
 80037aa:	2000      	movs	r0, #0
 80037ac:	f04f 0c0a 	mov.w	ip, #10
 80037b0:	4621      	mov	r1, r4
 80037b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b6:	3b30      	subs	r3, #48	; 0x30
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d94e      	bls.n	800385a <_svfiprintf_r+0x17e>
 80037bc:	b1b0      	cbz	r0, 80037ec <_svfiprintf_r+0x110>
 80037be:	9207      	str	r2, [sp, #28]
 80037c0:	e014      	b.n	80037ec <_svfiprintf_r+0x110>
 80037c2:	eba0 0308 	sub.w	r3, r0, r8
 80037c6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	9304      	str	r3, [sp, #16]
 80037ce:	46a2      	mov	sl, r4
 80037d0:	e7d2      	b.n	8003778 <_svfiprintf_r+0x9c>
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	9103      	str	r1, [sp, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfbb      	ittet	lt
 80037de:	425b      	neglt	r3, r3
 80037e0:	f042 0202 	orrlt.w	r2, r2, #2
 80037e4:	9307      	strge	r3, [sp, #28]
 80037e6:	9307      	strlt	r3, [sp, #28]
 80037e8:	bfb8      	it	lt
 80037ea:	9204      	strlt	r2, [sp, #16]
 80037ec:	7823      	ldrb	r3, [r4, #0]
 80037ee:	2b2e      	cmp	r3, #46	; 0x2e
 80037f0:	d10c      	bne.n	800380c <_svfiprintf_r+0x130>
 80037f2:	7863      	ldrb	r3, [r4, #1]
 80037f4:	2b2a      	cmp	r3, #42	; 0x2a
 80037f6:	d135      	bne.n	8003864 <_svfiprintf_r+0x188>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	9203      	str	r2, [sp, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	bfb8      	it	lt
 8003804:	f04f 33ff 	movlt.w	r3, #4294967295
 8003808:	3402      	adds	r4, #2
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038d8 <_svfiprintf_r+0x1fc>
 8003810:	7821      	ldrb	r1, [r4, #0]
 8003812:	2203      	movs	r2, #3
 8003814:	4650      	mov	r0, sl
 8003816:	f7fc fcfb 	bl	8000210 <memchr>
 800381a:	b140      	cbz	r0, 800382e <_svfiprintf_r+0x152>
 800381c:	2340      	movs	r3, #64	; 0x40
 800381e:	eba0 000a 	sub.w	r0, r0, sl
 8003822:	fa03 f000 	lsl.w	r0, r3, r0
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	4303      	orrs	r3, r0
 800382a:	3401      	adds	r4, #1
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003832:	4826      	ldr	r0, [pc, #152]	; (80038cc <_svfiprintf_r+0x1f0>)
 8003834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003838:	2206      	movs	r2, #6
 800383a:	f7fc fce9 	bl	8000210 <memchr>
 800383e:	2800      	cmp	r0, #0
 8003840:	d038      	beq.n	80038b4 <_svfiprintf_r+0x1d8>
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <_svfiprintf_r+0x1f4>)
 8003844:	bb1b      	cbnz	r3, 800388e <_svfiprintf_r+0x1b2>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	3307      	adds	r3, #7
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	3308      	adds	r3, #8
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003854:	4433      	add	r3, r6
 8003856:	9309      	str	r3, [sp, #36]	; 0x24
 8003858:	e767      	b.n	800372a <_svfiprintf_r+0x4e>
 800385a:	fb0c 3202 	mla	r2, ip, r2, r3
 800385e:	460c      	mov	r4, r1
 8003860:	2001      	movs	r0, #1
 8003862:	e7a5      	b.n	80037b0 <_svfiprintf_r+0xd4>
 8003864:	2300      	movs	r3, #0
 8003866:	3401      	adds	r4, #1
 8003868:	9305      	str	r3, [sp, #20]
 800386a:	4619      	mov	r1, r3
 800386c:	f04f 0c0a 	mov.w	ip, #10
 8003870:	4620      	mov	r0, r4
 8003872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003876:	3a30      	subs	r2, #48	; 0x30
 8003878:	2a09      	cmp	r2, #9
 800387a:	d903      	bls.n	8003884 <_svfiprintf_r+0x1a8>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0c5      	beq.n	800380c <_svfiprintf_r+0x130>
 8003880:	9105      	str	r1, [sp, #20]
 8003882:	e7c3      	b.n	800380c <_svfiprintf_r+0x130>
 8003884:	fb0c 2101 	mla	r1, ip, r1, r2
 8003888:	4604      	mov	r4, r0
 800388a:	2301      	movs	r3, #1
 800388c:	e7f0      	b.n	8003870 <_svfiprintf_r+0x194>
 800388e:	ab03      	add	r3, sp, #12
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	462a      	mov	r2, r5
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <_svfiprintf_r+0x1f8>)
 8003896:	a904      	add	r1, sp, #16
 8003898:	4638      	mov	r0, r7
 800389a:	f3af 8000 	nop.w
 800389e:	1c42      	adds	r2, r0, #1
 80038a0:	4606      	mov	r6, r0
 80038a2:	d1d6      	bne.n	8003852 <_svfiprintf_r+0x176>
 80038a4:	89ab      	ldrh	r3, [r5, #12]
 80038a6:	065b      	lsls	r3, r3, #25
 80038a8:	f53f af2c 	bmi.w	8003704 <_svfiprintf_r+0x28>
 80038ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ae:	b01d      	add	sp, #116	; 0x74
 80038b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b4:	ab03      	add	r3, sp, #12
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	462a      	mov	r2, r5
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <_svfiprintf_r+0x1f8>)
 80038bc:	a904      	add	r1, sp, #16
 80038be:	4638      	mov	r0, r7
 80038c0:	f000 f87a 	bl	80039b8 <_printf_i>
 80038c4:	e7eb      	b.n	800389e <_svfiprintf_r+0x1c2>
 80038c6:	bf00      	nop
 80038c8:	08003f14 	.word	0x08003f14
 80038cc:	08003f1e 	.word	0x08003f1e
 80038d0:	00000000 	.word	0x00000000
 80038d4:	08003625 	.word	0x08003625
 80038d8:	08003f1a 	.word	0x08003f1a

080038dc <_printf_common>:
 80038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	4616      	mov	r6, r2
 80038e2:	4699      	mov	r9, r3
 80038e4:	688a      	ldr	r2, [r1, #8]
 80038e6:	690b      	ldr	r3, [r1, #16]
 80038e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bfb8      	it	lt
 80038f0:	4613      	movlt	r3, r2
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f8:	4607      	mov	r7, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	b10a      	cbz	r2, 8003902 <_printf_common+0x26>
 80038fe:	3301      	adds	r3, #1
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	0699      	lsls	r1, r3, #26
 8003906:	bf42      	ittt	mi
 8003908:	6833      	ldrmi	r3, [r6, #0]
 800390a:	3302      	addmi	r3, #2
 800390c:	6033      	strmi	r3, [r6, #0]
 800390e:	6825      	ldr	r5, [r4, #0]
 8003910:	f015 0506 	ands.w	r5, r5, #6
 8003914:	d106      	bne.n	8003924 <_printf_common+0x48>
 8003916:	f104 0a19 	add.w	sl, r4, #25
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	6832      	ldr	r2, [r6, #0]
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	42ab      	cmp	r3, r5
 8003922:	dc26      	bgt.n	8003972 <_printf_common+0x96>
 8003924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003928:	1e13      	subs	r3, r2, #0
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	bf18      	it	ne
 800392e:	2301      	movne	r3, #1
 8003930:	0692      	lsls	r2, r2, #26
 8003932:	d42b      	bmi.n	800398c <_printf_common+0xb0>
 8003934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	3001      	adds	r0, #1
 8003940:	d01e      	beq.n	8003980 <_printf_common+0xa4>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	68e5      	ldr	r5, [r4, #12]
 8003946:	6832      	ldr	r2, [r6, #0]
 8003948:	f003 0306 	and.w	r3, r3, #6
 800394c:	2b04      	cmp	r3, #4
 800394e:	bf08      	it	eq
 8003950:	1aad      	subeq	r5, r5, r2
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	6922      	ldr	r2, [r4, #16]
 8003956:	bf0c      	ite	eq
 8003958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800395c:	2500      	movne	r5, #0
 800395e:	4293      	cmp	r3, r2
 8003960:	bfc4      	itt	gt
 8003962:	1a9b      	subgt	r3, r3, r2
 8003964:	18ed      	addgt	r5, r5, r3
 8003966:	2600      	movs	r6, #0
 8003968:	341a      	adds	r4, #26
 800396a:	42b5      	cmp	r5, r6
 800396c:	d11a      	bne.n	80039a4 <_printf_common+0xc8>
 800396e:	2000      	movs	r0, #0
 8003970:	e008      	b.n	8003984 <_printf_common+0xa8>
 8003972:	2301      	movs	r3, #1
 8003974:	4652      	mov	r2, sl
 8003976:	4649      	mov	r1, r9
 8003978:	4638      	mov	r0, r7
 800397a:	47c0      	blx	r8
 800397c:	3001      	adds	r0, #1
 800397e:	d103      	bne.n	8003988 <_printf_common+0xac>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003988:	3501      	adds	r5, #1
 800398a:	e7c6      	b.n	800391a <_printf_common+0x3e>
 800398c:	18e1      	adds	r1, r4, r3
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	2030      	movs	r0, #48	; 0x30
 8003992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003996:	4422      	add	r2, r4
 8003998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800399c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a0:	3302      	adds	r3, #2
 80039a2:	e7c7      	b.n	8003934 <_printf_common+0x58>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4622      	mov	r2, r4
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0e6      	beq.n	8003980 <_printf_common+0xa4>
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7d9      	b.n	800396a <_printf_common+0x8e>
	...

080039b8 <_printf_i>:
 80039b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	7e0f      	ldrb	r7, [r1, #24]
 80039be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039c0:	2f78      	cmp	r7, #120	; 0x78
 80039c2:	4691      	mov	r9, r2
 80039c4:	4680      	mov	r8, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	469a      	mov	sl, r3
 80039ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ce:	d807      	bhi.n	80039e0 <_printf_i+0x28>
 80039d0:	2f62      	cmp	r7, #98	; 0x62
 80039d2:	d80a      	bhi.n	80039ea <_printf_i+0x32>
 80039d4:	2f00      	cmp	r7, #0
 80039d6:	f000 80d8 	beq.w	8003b8a <_printf_i+0x1d2>
 80039da:	2f58      	cmp	r7, #88	; 0x58
 80039dc:	f000 80a3 	beq.w	8003b26 <_printf_i+0x16e>
 80039e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e8:	e03a      	b.n	8003a60 <_printf_i+0xa8>
 80039ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ee:	2b15      	cmp	r3, #21
 80039f0:	d8f6      	bhi.n	80039e0 <_printf_i+0x28>
 80039f2:	a101      	add	r1, pc, #4	; (adr r1, 80039f8 <_printf_i+0x40>)
 80039f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a65 	.word	0x08003a65
 8003a00:	080039e1 	.word	0x080039e1
 8003a04:	080039e1 	.word	0x080039e1
 8003a08:	080039e1 	.word	0x080039e1
 8003a0c:	080039e1 	.word	0x080039e1
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	080039e1 	.word	0x080039e1
 8003a18:	080039e1 	.word	0x080039e1
 8003a1c:	080039e1 	.word	0x080039e1
 8003a20:	080039e1 	.word	0x080039e1
 8003a24:	08003b71 	.word	0x08003b71
 8003a28:	08003a95 	.word	0x08003a95
 8003a2c:	08003b53 	.word	0x08003b53
 8003a30:	080039e1 	.word	0x080039e1
 8003a34:	080039e1 	.word	0x080039e1
 8003a38:	08003b93 	.word	0x08003b93
 8003a3c:	080039e1 	.word	0x080039e1
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	080039e1 	.word	0x080039e1
 8003a48:	080039e1 	.word	0x080039e1
 8003a4c:	08003b5b 	.word	0x08003b5b
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	602a      	str	r2, [r5, #0]
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0a3      	b.n	8003bac <_printf_i+0x1f4>
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	6829      	ldr	r1, [r5, #0]
 8003a68:	0606      	lsls	r6, r0, #24
 8003a6a:	f101 0304 	add.w	r3, r1, #4
 8003a6e:	d50a      	bpl.n	8003a86 <_printf_i+0xce>
 8003a70:	680e      	ldr	r6, [r1, #0]
 8003a72:	602b      	str	r3, [r5, #0]
 8003a74:	2e00      	cmp	r6, #0
 8003a76:	da03      	bge.n	8003a80 <_printf_i+0xc8>
 8003a78:	232d      	movs	r3, #45	; 0x2d
 8003a7a:	4276      	negs	r6, r6
 8003a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a80:	485e      	ldr	r0, [pc, #376]	; (8003bfc <_printf_i+0x244>)
 8003a82:	230a      	movs	r3, #10
 8003a84:	e019      	b.n	8003aba <_printf_i+0x102>
 8003a86:	680e      	ldr	r6, [r1, #0]
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a8e:	bf18      	it	ne
 8003a90:	b236      	sxthne	r6, r6
 8003a92:	e7ef      	b.n	8003a74 <_printf_i+0xbc>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	1d19      	adds	r1, r3, #4
 8003a9a:	6029      	str	r1, [r5, #0]
 8003a9c:	0601      	lsls	r1, r0, #24
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0xec>
 8003aa0:	681e      	ldr	r6, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_printf_i+0xf2>
 8003aa4:	0646      	lsls	r6, r0, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0xe8>
 8003aa8:	881e      	ldrh	r6, [r3, #0]
 8003aaa:	4854      	ldr	r0, [pc, #336]	; (8003bfc <_printf_i+0x244>)
 8003aac:	2f6f      	cmp	r7, #111	; 0x6f
 8003aae:	bf0c      	ite	eq
 8003ab0:	2308      	moveq	r3, #8
 8003ab2:	230a      	movne	r3, #10
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aba:	6865      	ldr	r5, [r4, #4]
 8003abc:	60a5      	str	r5, [r4, #8]
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	bfa2      	ittt	ge
 8003ac2:	6821      	ldrge	r1, [r4, #0]
 8003ac4:	f021 0104 	bicge.w	r1, r1, #4
 8003ac8:	6021      	strge	r1, [r4, #0]
 8003aca:	b90e      	cbnz	r6, 8003ad0 <_printf_i+0x118>
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	d04d      	beq.n	8003b6c <_printf_i+0x1b4>
 8003ad0:	4615      	mov	r5, r2
 8003ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8003ada:	5dc7      	ldrb	r7, [r0, r7]
 8003adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ae0:	4637      	mov	r7, r6
 8003ae2:	42bb      	cmp	r3, r7
 8003ae4:	460e      	mov	r6, r1
 8003ae6:	d9f4      	bls.n	8003ad2 <_printf_i+0x11a>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d10b      	bne.n	8003b04 <_printf_i+0x14c>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	07de      	lsls	r6, r3, #31
 8003af0:	d508      	bpl.n	8003b04 <_printf_i+0x14c>
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	6861      	ldr	r1, [r4, #4]
 8003af6:	4299      	cmp	r1, r3
 8003af8:	bfde      	ittt	le
 8003afa:	2330      	movle	r3, #48	; 0x30
 8003afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b04:	1b52      	subs	r2, r2, r5
 8003b06:	6122      	str	r2, [r4, #16]
 8003b08:	f8cd a000 	str.w	sl, [sp]
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	aa03      	add	r2, sp, #12
 8003b10:	4621      	mov	r1, r4
 8003b12:	4640      	mov	r0, r8
 8003b14:	f7ff fee2 	bl	80038dc <_printf_common>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d14c      	bne.n	8003bb6 <_printf_i+0x1fe>
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	b004      	add	sp, #16
 8003b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b26:	4835      	ldr	r0, [pc, #212]	; (8003bfc <_printf_i+0x244>)
 8003b28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b2c:	6829      	ldr	r1, [r5, #0]
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b34:	6029      	str	r1, [r5, #0]
 8003b36:	061d      	lsls	r5, r3, #24
 8003b38:	d514      	bpl.n	8003b64 <_printf_i+0x1ac>
 8003b3a:	07df      	lsls	r7, r3, #31
 8003b3c:	bf44      	itt	mi
 8003b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b42:	6023      	strmi	r3, [r4, #0]
 8003b44:	b91e      	cbnz	r6, 8003b4e <_printf_i+0x196>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f023 0320 	bic.w	r3, r3, #32
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	2310      	movs	r3, #16
 8003b50:	e7b0      	b.n	8003ab4 <_printf_i+0xfc>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	2378      	movs	r3, #120	; 0x78
 8003b5c:	4828      	ldr	r0, [pc, #160]	; (8003c00 <_printf_i+0x248>)
 8003b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b62:	e7e3      	b.n	8003b2c <_printf_i+0x174>
 8003b64:	0659      	lsls	r1, r3, #25
 8003b66:	bf48      	it	mi
 8003b68:	b2b6      	uxthmi	r6, r6
 8003b6a:	e7e6      	b.n	8003b3a <_printf_i+0x182>
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	e7bb      	b.n	8003ae8 <_printf_i+0x130>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	6826      	ldr	r6, [r4, #0]
 8003b74:	6961      	ldr	r1, [r4, #20]
 8003b76:	1d18      	adds	r0, r3, #4
 8003b78:	6028      	str	r0, [r5, #0]
 8003b7a:	0635      	lsls	r5, r6, #24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0x1cc>
 8003b80:	6019      	str	r1, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0x1d2>
 8003b84:	0670      	lsls	r0, r6, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0x1c8>
 8003b88:	8019      	strh	r1, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	4615      	mov	r5, r2
 8003b90:	e7ba      	b.n	8003b08 <_printf_i+0x150>
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fc fb36 	bl	8000210 <memchr>
 8003ba4:	b108      	cbz	r0, 8003baa <_printf_i+0x1f2>
 8003ba6:	1b40      	subs	r0, r0, r5
 8003ba8:	6060      	str	r0, [r4, #4]
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	e7a8      	b.n	8003b08 <_printf_i+0x150>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	47d0      	blx	sl
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0ab      	beq.n	8003b1c <_printf_i+0x164>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	079b      	lsls	r3, r3, #30
 8003bc8:	d413      	bmi.n	8003bf2 <_printf_i+0x23a>
 8003bca:	68e0      	ldr	r0, [r4, #12]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	4298      	cmp	r0, r3
 8003bd0:	bfb8      	it	lt
 8003bd2:	4618      	movlt	r0, r3
 8003bd4:	e7a4      	b.n	8003b20 <_printf_i+0x168>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d09b      	beq.n	8003b1c <_printf_i+0x164>
 8003be4:	3501      	adds	r5, #1
 8003be6:	68e3      	ldr	r3, [r4, #12]
 8003be8:	9903      	ldr	r1, [sp, #12]
 8003bea:	1a5b      	subs	r3, r3, r1
 8003bec:	42ab      	cmp	r3, r5
 8003bee:	dcf2      	bgt.n	8003bd6 <_printf_i+0x21e>
 8003bf0:	e7eb      	b.n	8003bca <_printf_i+0x212>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	f104 0619 	add.w	r6, r4, #25
 8003bf8:	e7f5      	b.n	8003be6 <_printf_i+0x22e>
 8003bfa:	bf00      	nop
 8003bfc:	08003f25 	.word	0x08003f25
 8003c00:	08003f36 	.word	0x08003f36

08003c04 <memcpy>:
 8003c04:	440a      	add	r2, r1
 8003c06:	4291      	cmp	r1, r2
 8003c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c0c:	d100      	bne.n	8003c10 <memcpy+0xc>
 8003c0e:	4770      	bx	lr
 8003c10:	b510      	push	{r4, lr}
 8003c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c1a:	4291      	cmp	r1, r2
 8003c1c:	d1f9      	bne.n	8003c12 <memcpy+0xe>
 8003c1e:	bd10      	pop	{r4, pc}

08003c20 <memmove>:
 8003c20:	4288      	cmp	r0, r1
 8003c22:	b510      	push	{r4, lr}
 8003c24:	eb01 0402 	add.w	r4, r1, r2
 8003c28:	d902      	bls.n	8003c30 <memmove+0x10>
 8003c2a:	4284      	cmp	r4, r0
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	d807      	bhi.n	8003c40 <memmove+0x20>
 8003c30:	1e43      	subs	r3, r0, #1
 8003c32:	42a1      	cmp	r1, r4
 8003c34:	d008      	beq.n	8003c48 <memmove+0x28>
 8003c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c3e:	e7f8      	b.n	8003c32 <memmove+0x12>
 8003c40:	4402      	add	r2, r0
 8003c42:	4601      	mov	r1, r0
 8003c44:	428a      	cmp	r2, r1
 8003c46:	d100      	bne.n	8003c4a <memmove+0x2a>
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c52:	e7f7      	b.n	8003c44 <memmove+0x24>

08003c54 <_free_r>:
 8003c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d044      	beq.n	8003ce4 <_free_r+0x90>
 8003c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c5e:	9001      	str	r0, [sp, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f1a1 0404 	sub.w	r4, r1, #4
 8003c66:	bfb8      	it	lt
 8003c68:	18e4      	addlt	r4, r4, r3
 8003c6a:	f000 f913 	bl	8003e94 <__malloc_lock>
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <_free_r+0x94>)
 8003c70:	9801      	ldr	r0, [sp, #4]
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	b933      	cbnz	r3, 8003c84 <_free_r+0x30>
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	6014      	str	r4, [r2, #0]
 8003c7a:	b003      	add	sp, #12
 8003c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c80:	f000 b90e 	b.w	8003ea0 <__malloc_unlock>
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d908      	bls.n	8003c9a <_free_r+0x46>
 8003c88:	6825      	ldr	r5, [r4, #0]
 8003c8a:	1961      	adds	r1, r4, r5
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf01      	itttt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	1949      	addeq	r1, r1, r5
 8003c96:	6021      	streq	r1, [r4, #0]
 8003c98:	e7ed      	b.n	8003c76 <_free_r+0x22>
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b10b      	cbz	r3, 8003ca4 <_free_r+0x50>
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	d9fa      	bls.n	8003c9a <_free_r+0x46>
 8003ca4:	6811      	ldr	r1, [r2, #0]
 8003ca6:	1855      	adds	r5, r2, r1
 8003ca8:	42a5      	cmp	r5, r4
 8003caa:	d10b      	bne.n	8003cc4 <_free_r+0x70>
 8003cac:	6824      	ldr	r4, [r4, #0]
 8003cae:	4421      	add	r1, r4
 8003cb0:	1854      	adds	r4, r2, r1
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	d1e0      	bne.n	8003c7a <_free_r+0x26>
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	6053      	str	r3, [r2, #4]
 8003cbe:	4421      	add	r1, r4
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	e7da      	b.n	8003c7a <_free_r+0x26>
 8003cc4:	d902      	bls.n	8003ccc <_free_r+0x78>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	6003      	str	r3, [r0, #0]
 8003cca:	e7d6      	b.n	8003c7a <_free_r+0x26>
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	1961      	adds	r1, r4, r5
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf04      	itt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	6063      	str	r3, [r4, #4]
 8003cda:	bf04      	itt	eq
 8003cdc:	1949      	addeq	r1, r1, r5
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	6054      	str	r4, [r2, #4]
 8003ce2:	e7ca      	b.n	8003c7a <_free_r+0x26>
 8003ce4:	b003      	add	sp, #12
 8003ce6:	bd30      	pop	{r4, r5, pc}
 8003ce8:	200001bc 	.word	0x200001bc

08003cec <sbrk_aligned>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4e0e      	ldr	r6, [pc, #56]	; (8003d28 <sbrk_aligned+0x3c>)
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	6831      	ldr	r1, [r6, #0]
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	b911      	cbnz	r1, 8003cfe <sbrk_aligned+0x12>
 8003cf8:	f000 f8bc 	bl	8003e74 <_sbrk_r>
 8003cfc:	6030      	str	r0, [r6, #0]
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 f8b7 	bl	8003e74 <_sbrk_r>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	d00a      	beq.n	8003d20 <sbrk_aligned+0x34>
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	f024 0403 	bic.w	r4, r4, #3
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d007      	beq.n	8003d24 <sbrk_aligned+0x38>
 8003d14:	1a21      	subs	r1, r4, r0
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 f8ac 	bl	8003e74 <_sbrk_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d101      	bne.n	8003d24 <sbrk_aligned+0x38>
 8003d20:	f04f 34ff 	mov.w	r4, #4294967295
 8003d24:	4620      	mov	r0, r4
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	200001c0 	.word	0x200001c0

08003d2c <_malloc_r>:
 8003d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d30:	1ccd      	adds	r5, r1, #3
 8003d32:	f025 0503 	bic.w	r5, r5, #3
 8003d36:	3508      	adds	r5, #8
 8003d38:	2d0c      	cmp	r5, #12
 8003d3a:	bf38      	it	cc
 8003d3c:	250c      	movcc	r5, #12
 8003d3e:	2d00      	cmp	r5, #0
 8003d40:	4607      	mov	r7, r0
 8003d42:	db01      	blt.n	8003d48 <_malloc_r+0x1c>
 8003d44:	42a9      	cmp	r1, r5
 8003d46:	d905      	bls.n	8003d54 <_malloc_r+0x28>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	4630      	mov	r0, r6
 8003d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d54:	4e2e      	ldr	r6, [pc, #184]	; (8003e10 <_malloc_r+0xe4>)
 8003d56:	f000 f89d 	bl	8003e94 <__malloc_lock>
 8003d5a:	6833      	ldr	r3, [r6, #0]
 8003d5c:	461c      	mov	r4, r3
 8003d5e:	bb34      	cbnz	r4, 8003dae <_malloc_r+0x82>
 8003d60:	4629      	mov	r1, r5
 8003d62:	4638      	mov	r0, r7
 8003d64:	f7ff ffc2 	bl	8003cec <sbrk_aligned>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	d14d      	bne.n	8003e0a <_malloc_r+0xde>
 8003d6e:	6834      	ldr	r4, [r6, #0]
 8003d70:	4626      	mov	r6, r4
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	d140      	bne.n	8003df8 <_malloc_r+0xcc>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	4631      	mov	r1, r6
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	eb04 0803 	add.w	r8, r4, r3
 8003d80:	f000 f878 	bl	8003e74 <_sbrk_r>
 8003d84:	4580      	cmp	r8, r0
 8003d86:	d13a      	bne.n	8003dfe <_malloc_r+0xd2>
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	3503      	adds	r5, #3
 8003d8c:	1a6d      	subs	r5, r5, r1
 8003d8e:	f025 0503 	bic.w	r5, r5, #3
 8003d92:	3508      	adds	r5, #8
 8003d94:	2d0c      	cmp	r5, #12
 8003d96:	bf38      	it	cc
 8003d98:	250c      	movcc	r5, #12
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f7ff ffa5 	bl	8003cec <sbrk_aligned>
 8003da2:	3001      	adds	r0, #1
 8003da4:	d02b      	beq.n	8003dfe <_malloc_r+0xd2>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	442b      	add	r3, r5
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	e00e      	b.n	8003dcc <_malloc_r+0xa0>
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	1b52      	subs	r2, r2, r5
 8003db2:	d41e      	bmi.n	8003df2 <_malloc_r+0xc6>
 8003db4:	2a0b      	cmp	r2, #11
 8003db6:	d916      	bls.n	8003de6 <_malloc_r+0xba>
 8003db8:	1961      	adds	r1, r4, r5
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	6025      	str	r5, [r4, #0]
 8003dbe:	bf18      	it	ne
 8003dc0:	6059      	strne	r1, [r3, #4]
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	bf08      	it	eq
 8003dc6:	6031      	streq	r1, [r6, #0]
 8003dc8:	5162      	str	r2, [r4, r5]
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f104 060b 	add.w	r6, r4, #11
 8003dd2:	f000 f865 	bl	8003ea0 <__malloc_unlock>
 8003dd6:	f026 0607 	bic.w	r6, r6, #7
 8003dda:	1d23      	adds	r3, r4, #4
 8003ddc:	1af2      	subs	r2, r6, r3
 8003dde:	d0b6      	beq.n	8003d4e <_malloc_r+0x22>
 8003de0:	1b9b      	subs	r3, r3, r6
 8003de2:	50a3      	str	r3, [r4, r2]
 8003de4:	e7b3      	b.n	8003d4e <_malloc_r+0x22>
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	bf0c      	ite	eq
 8003dec:	6032      	streq	r2, [r6, #0]
 8003dee:	605a      	strne	r2, [r3, #4]
 8003df0:	e7ec      	b.n	8003dcc <_malloc_r+0xa0>
 8003df2:	4623      	mov	r3, r4
 8003df4:	6864      	ldr	r4, [r4, #4]
 8003df6:	e7b2      	b.n	8003d5e <_malloc_r+0x32>
 8003df8:	4634      	mov	r4, r6
 8003dfa:	6876      	ldr	r6, [r6, #4]
 8003dfc:	e7b9      	b.n	8003d72 <_malloc_r+0x46>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4638      	mov	r0, r7
 8003e04:	f000 f84c 	bl	8003ea0 <__malloc_unlock>
 8003e08:	e7a1      	b.n	8003d4e <_malloc_r+0x22>
 8003e0a:	6025      	str	r5, [r4, #0]
 8003e0c:	e7de      	b.n	8003dcc <_malloc_r+0xa0>
 8003e0e:	bf00      	nop
 8003e10:	200001bc 	.word	0x200001bc

08003e14 <_realloc_r>:
 8003e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e18:	4680      	mov	r8, r0
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	460e      	mov	r6, r1
 8003e1e:	b921      	cbnz	r1, 8003e2a <_realloc_r+0x16>
 8003e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e24:	4611      	mov	r1, r2
 8003e26:	f7ff bf81 	b.w	8003d2c <_malloc_r>
 8003e2a:	b92a      	cbnz	r2, 8003e38 <_realloc_r+0x24>
 8003e2c:	f7ff ff12 	bl	8003c54 <_free_r>
 8003e30:	4625      	mov	r5, r4
 8003e32:	4628      	mov	r0, r5
 8003e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e38:	f000 f838 	bl	8003eac <_malloc_usable_size_r>
 8003e3c:	4284      	cmp	r4, r0
 8003e3e:	4607      	mov	r7, r0
 8003e40:	d802      	bhi.n	8003e48 <_realloc_r+0x34>
 8003e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e46:	d812      	bhi.n	8003e6e <_realloc_r+0x5a>
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	f7ff ff6e 	bl	8003d2c <_malloc_r>
 8003e50:	4605      	mov	r5, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0ed      	beq.n	8003e32 <_realloc_r+0x1e>
 8003e56:	42bc      	cmp	r4, r7
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	bf28      	it	cs
 8003e5e:	463a      	movcs	r2, r7
 8003e60:	f7ff fed0 	bl	8003c04 <memcpy>
 8003e64:	4631      	mov	r1, r6
 8003e66:	4640      	mov	r0, r8
 8003e68:	f7ff fef4 	bl	8003c54 <_free_r>
 8003e6c:	e7e1      	b.n	8003e32 <_realloc_r+0x1e>
 8003e6e:	4635      	mov	r5, r6
 8003e70:	e7df      	b.n	8003e32 <_realloc_r+0x1e>
	...

08003e74 <_sbrk_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	; (8003e90 <_sbrk_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fc fe84 	bl	8000b8c <_sbrk>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_sbrk_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_sbrk_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	200001c4 	.word	0x200001c4

08003e94 <__malloc_lock>:
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <__malloc_lock+0x8>)
 8003e96:	f000 b811 	b.w	8003ebc <__retarget_lock_acquire_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	200001c8 	.word	0x200001c8

08003ea0 <__malloc_unlock>:
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <__malloc_unlock+0x8>)
 8003ea2:	f000 b80c 	b.w	8003ebe <__retarget_lock_release_recursive>
 8003ea6:	bf00      	nop
 8003ea8:	200001c8 	.word	0x200001c8

08003eac <_malloc_usable_size_r>:
 8003eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb0:	1f18      	subs	r0, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bfbc      	itt	lt
 8003eb6:	580b      	ldrlt	r3, [r1, r0]
 8003eb8:	18c0      	addlt	r0, r0, r3
 8003eba:	4770      	bx	lr

08003ebc <__retarget_lock_acquire_recursive>:
 8003ebc:	4770      	bx	lr

08003ebe <__retarget_lock_release_recursive>:
 8003ebe:	4770      	bx	lr

08003ec0 <_init>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	bf00      	nop
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr

08003ecc <_fini>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr
